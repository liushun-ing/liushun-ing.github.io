import{_ as n,o as s,c as a,a as e}from"./app-3a1034a6.js";const t="/home/assets/screenshot2024-03-1417.10.23-3103cd21.png",p="/home/assets/screenshot2024-03-1419.53.25-fd6589c4.png",o="/home/assets/screenshot2024-03-1421.10.20-843cc02c.png",c={},l=e('<h1 id="项目" tabindex="-1"><a class="header-anchor" href="#项目" aria-hidden="true">#</a> 项目</h1><h2 id="自我介绍" tabindex="-1"><a class="header-anchor" href="#自我介绍" aria-hidden="true">#</a> 自我介绍</h2><p>焦面试官，您好，我叫刘顺，目前就读于浙江大学软件工程专业，研究生一年级，本科毕业于湖南大学。</p><p>在本科期间，我认真学习，以专业第二的成绩保研到了浙江大学，然后在校期间获得过国家奖学金，湖南大学三好学生和湖南大学优秀毕业生等荣誉。来到浙大以后，在智能软件工程实验室研究代码上下文相关的代码修复和推荐工作，然后简历上的本科毕业设计也是与这个工作相关。</p><p>项目方面，我曾作为项目组长负责开发了基于smtp和pop3的邮件系统以及对联云小程序。在邮件系统开发中，我主要负责后端的开发，这包括基于命令模式实现smtp的pop3协议的主要内容，使用基于NIO的netty框架提高服务可用性，使用shiro+JWT完成登陆鉴权功能，以及在云服务器上部署相关服务。对联云小程序中虽然主要是负责小程序端的开发，但是也参与后端Spring cloud微服务项目的搭建。这些项目经历让我掌握了java开发的基本流程，也锻炼了我的编码能力。</p><p>最后，这是我第一次正式实习面试，我非常珍惜这次机会，所以也希望能和您聊得愉快。以上就是我的自我介绍，谢谢。</p><h2 id="邮件项目" tabindex="-1"><a class="header-anchor" href="#邮件项目" aria-hidden="true">#</a> 邮件项目</h2><p><strong>项目描述：</strong></p><p>基于POP3和SMTP协议，设计实现一个可以收发邮件的邮件服务器，以及用户代理客户端。用户可以通过小程序使用邮箱的基本功能，管理员可以通过后台管理系统进行用户管理和服务配置等操作。</p><p><strong>工作职责：</strong></p><ul><li>完成所有服务端代码开发，基于命令模式实现了 SMTP 和 POP3 中各种命令的处理逻辑</li><li>基于 Netty 多路复用的 NIO 模型，提高 IO 效率，提高服务器的可用性</li><li>使用 docker 容器提供 Mysql 和 Nginx 服务，基于 Shiro 和 JWT 实现用户登陆、鉴权和登出功能</li><li>使用 SpringBoot 和 Vue 技术，实现邮件服务器配置管理的前后端</li></ul><h3 id="邮件系统" tabindex="-1"><a class="header-anchor" href="#邮件系统" aria-hidden="true">#</a> 邮件系统？</h3><p>一个电子邮件系统应当由这几个主要部分组成：</p><img src="'+t+`" alt="screenshot2024-03-14 17.10.23" style="zoom:50%;"><p>从上图可以看出，这里采用常用的SMTP作为邮件发送协议，采用常用的POP3作为邮件读取协议。请注意，SMTP和 POP3 (或IMAP)都是使用TCP连接来传送邮件的，使用TCP的目的是为了可靠地传送邮件。</p><p><strong>邮件服务器</strong>：邮件服务器的功能是发送和接收邮件，同时还要向发件人报告邮件传送的结果（已交付、被拒绝、丢失等）。邮件服务器按照客户服务器方式（C/S）工作。邮件服务器需要使用两种不同的协议。一种协议用于用户代理向邮件服务器发送邮件或在邮件服务器之间发送邮件，如SMTP协议，而另一种协议用于用户代理从邮件服务器读取邮件，如邮局协议POP3。</p><h3 id="smtp" tabindex="-1"><a class="header-anchor" href="#smtp" aria-hidden="true">#</a> SMTP？</h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p>SMTP 是一种应用层协议。SMTP 服务器是一种始终在线的侦听模式。一旦侦听来自任何客户端的 TCP 连接，SMTP 进程就会通过端口 25 启动连接。成功建立 TCP 连接后，客户端进程会立即发送邮件。</p><p><strong>SMTP和HTTP协议一样都属于请求应答式协议，也就是一问一答，客户端发送命令后，服务器返回响应内容。<strong>SMTP的响应格式和HTTP协议的基本一样，都是响应码+响应描述。响应码用三位数字表示，空格后则是响应信息的描述，只是HTTP协议会多一个版本信息。这种一问一答式协议，在HTTP协议上体现的并不是很明显，只有HTTP连接设置为</strong>Keep-Alive</strong>时，你才有机会使用GET或POST命令反复与服务器进行交互，否则只有一次问答的机会。</p><p><strong>但在SMTP协议下这种一问一答的交互方式就非常明显了。</strong> 主要原因是完成一次邮件的发送任务涉及到的步骤比较多，电子邮件的发送分为如下五个步骤：</p><blockquote><p><strong>1、建立会话；</strong><strong>2、身份认证；</strong><strong>3、发送邮件信封（发件人和收件人）；</strong><strong>4、发送邮件内容（邮件正文和附件）；</strong><strong>5、关闭会话</strong>；</p></blockquote><h4 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h4><p>建立会话</p><p><strong>HELO or EHLO</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>S: <span class="token number">220</span> yeah.net Anti-spam GT <span class="token keyword">for</span> Coremail System <span class="token punctuation">(</span>yeah<span class="token punctuation">[</span><span class="token number">20141016</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
C: HELO your-computer-name
S: <span class="token number">250</span> OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登陆</p><p><strong>SMTP命令：AUTH LOGIN</strong></p><p>该命令用于进行身份验证，虽然这一步在SMTP协议中不是强制的要求，但目前几乎所有的SMTP服务器都需要进行身份认证。增加这一步可以大大减少垃圾邮件的存在，以及避免有人伪造其它发件人进行邮件的发送操作。 <strong>这一步中账号和密码需要进行base64编码，包括服务器发来的提示信息也是base64编码。</strong> 首先发送<strong>AUTH LOGIN</strong>命令，服务器会返回“334 XNlcm5hbWU6”，“dXNlcm5hbWU6”解码后为“username:” UGFzc3dvcmQ6解码为&quot;Password:&quot; <strong>也就是提示用户输入用户名和密码。认证成功后返回235</strong>。** 接着根据服务器返回的提示，发送账号（发件人的邮箱账号）和密码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>C: AUTH LOGIN
S: <span class="token number">334</span> dXNlcm5hbWU6
C: base64编码后的账号（发件人的邮箱账号）
S: <span class="token number">334</span> UGFzc3dvcmQ6
C: base64编码后的密码
S: <span class="token number">235</span> Authentication successful
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送信封信息</p><p><strong>SMTP命令：MAIL FROM、RCPT TO</strong> 该阶段是告诉服务器发件人和收件人的邮箱地址，可以把这个阶段想象为你在写纸质信件的信封。MAIL FROM用于指定发件人邮箱，该邮箱地址其实就是上述身份认证中的账号，如： <strong>MAIL FROM: <a href="mailto:lig4961@yeah.net">lig4961@yeah.net</a></strong><strong>RCPT TO</strong>用于指定收件人邮箱，一次只能指定一个收件人地址，如果收件人有多个的话，可以多次发送RCPT TO命令。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>C<span class="token operator">:</span> MAIL FROM<span class="token operator">:</span> <span class="token operator">&lt;</span>lig4961@yeah<span class="token punctuation">.</span>net<span class="token operator">&gt;</span>
S<span class="token operator">:</span> <span class="token number">250</span> Mail OK
C<span class="token operator">:</span> RCPT TO<span class="token operator">:</span> <span class="token operator">&lt;</span>syfzxm@<span class="token number">163.</span>com<span class="token operator">&gt;</span>
S<span class="token operator">:</span> <span class="token number">250</span> Mail OK
C<span class="token operator">:</span> RCPT TO<span class="token operator">:</span> <span class="token operator">&lt;</span>lig4961@yeah<span class="token punctuation">.</span>net<span class="token operator">&gt;</span>
S<span class="token operator">:</span> <span class="token number">250</span> Mail OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，邮件地址要用放入&lt;&gt;中，此外，<strong>每条命令发送完毕后，一定要判断服务器返回码是否是250。</strong> 如果返回的不是二百五，说明你发送的地址可能是不正确的地址，比如邮件地址中没有@，或者在同一个邮箱系统中，SMTP服务器发现收件人的地址并不存在，也就是没有注册过。</p><p><strong>SMTP命令：DATA</strong></p><p>这一步是发送数据最多也是最复杂的一步，但操作命令却只有一个，就是<strong>DATA</strong>，也就是数据（邮件内容），邮件内容主要包括三个部分（可能会有内嵌资源文件，也可以理解为狭义上的附件）：</p><blockquote><p><strong>1、邮件头；</strong><strong>2、邮件正文；</strong><strong>3、邮件附件；</strong></p></blockquote><p>DATA命令发送后，服务器会返回<strong>354</strong>响应码，并告诉客户端，数据结束要以&quot;\\r\\n.\\r\\n&quot;来标识。接下来客户端就可以发送整个邮件内容了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DATA
<span class="token number">354</span> End data with <span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span><span class="token operator">&lt;</span>LF<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span><span class="token operator">&lt;</span>LF<span class="token operator">&gt;</span>
SUBJECT: <span class="token operator">=</span>?UTF-8?B?5p2l6IeqU29mdGxlZe+8jOi/meaYr+S4gOWwgea1i+ivlemCruS7tg<span class="token operator">==</span>?<span class="token operator">=</span>
xxxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后所有数据发送完毕后，一定要发送&quot;\\r\\n.\\r\\n&quot;，从而告诉SMTP服务器所有数据发送完毕。</p><p>结束会话</p><p><strong>SMTP命令：QUIT</strong> 这一步非常简单，就是发送一条QUIT命令，QUIT命令发送完毕后，还是要判断服务器的返回码是否为250。如果返回的不是，则表明发送失败，SMTP服务器可能不会将邮件转发到收件人所在的邮箱中，这一点很重要。</p><p>其他</p><p><strong>RSET命令</strong>：该实用程序将连接重置为其初始会话。使用时，它将擦除所有发件人和收件人缓冲区和表，以提供响应代码 250 的肯定服务器响应。它使 SMTP 服务保持打开状态并准备好进行新的会话对话。</p><p><strong>NOOP命令</strong>：如果您不确定 SMTP 服务是否已连接并正常运行，您应该使用 NOOP 实用程序进行检查。它对您的系统没有任何作用，但会提示接收者通过响应代码 250 发送 OK 响应。</p><h3 id="pop3" tabindex="-1"><a class="header-anchor" href="#pop3" aria-hidden="true">#</a> POP3？</h3><p>110端口</p><p>POP3(Post Office Protocol 3)即邮局协议的第3个版本，它是规定个人计算机如何连接到互联网上的邮件服务器进行收发邮件的协议。它是因特网电子邮件的第一个离线协议标准，POP3协议允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上，同时根据客户端的操作删除或保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。</p><p>当客户机与服务器建立联系时，一旦客户机提供了自己身份并成功确认，即由认可状态转入处理状态，在完成相应的操作后客户机发出quit命令，则进入更新状态，更新之后最后重返认可状态。如下:</p><img src="`+p+`" alt="screenshot2024-03-14 19.53.25" style="zoom:33%;"><p>POP作为Internet上邮件的第一个离线协议标准，允许用户从服务器上把邮件下载到本地主机上，同时删除保存在邮件服务器上的邮件，从而使用户不必长时间地与邮件服务器连接，很大程度上减少了服务器和网络的整体开销。 但 POP3有其天生的缺陷，即当用户接收电子邮件时，所有的信件都从服务器上清除并下载到客户机。在整个收信过程中，用户无法知道邮件的具体信息，只有照单全收入硬盘后，才能慢慢浏览和删除。这使用户几乎没有对邮件接收的控制决定权。一旦碰上邮箱被轰炸，或有比较大的邮件，用户不能通过分析邮件的内容及发信人地址来决定是否下载或删除，从而造成系统资源的浪费。而IMAP协议不但可以克服POP3的缺陷，而且还提供了更强大的功能。</p><h3 id="技术栈" tabindex="-1"><a class="header-anchor" href="#技术栈" aria-hidden="true">#</a> 技术栈？</h3><p>邮件服务：Netty</p><p>web服务：springboot + mysql + shiro + JWT + mybatis-plus + Nginx + Docker</p><p>Netty主要用于提高邮件服务的IO效率，包含高可用性</p><p>Shiro+JWT实现登陆，鉴权，登出等功能</p><p>使用docker部署mysql和nginx服务，nginx主要用来配置反向代理，保证前端部署的文件是可以访问的。</p><h3 id="难点" tabindex="-1"><a class="header-anchor" href="#难点" aria-hidden="true">#</a> 难点？</h3><h4 id="io效率的优化" tabindex="-1"><a class="header-anchor" href="#io效率的优化" aria-hidden="true">#</a> IO效率的优化</h4><p>使用netty框架来实现非阻塞IO，提高服务可用性。</p><p>产生粘包和拆包问题的主要原因是，操作系统在发送TCP数据的时候，底层会有一个缓冲区，例如1024个字节大小，如果一次请求发送的数据量比较小，没达到缓冲区大小，TCP则会将多个请求合并为同一个请求进行发送，这就形成了粘包问题；如果一次请求发送的数据量比较大，超过了缓冲区大小，TCP就会将其拆分为多次发送，这就是拆包，也就是将一个大的包拆分为多个小包进行发送。</p><p>使用pipeline来为每个通道添加编码器和解码器还有处理器，保证数据能够正常读取，并使用按行读取的方式，一换行符作为解码依据，解决数据沾包问题。这样handler中的数据会自动转换为字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 通道初始化对象 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmtpServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// 每个连接建立都需要初始化</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 往pipeline中添加配置</span>
    socketChannel
        <span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// TCP/IP数据包的传输方式，包在传输的过程中会分片和重组</span>
        <span class="token comment">// 确保数据会按行读取，以换行符作为解码依据，上面的原因导致粘包，正确解包</span>
        <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">&quot;framer&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token class-name">Delimiters</span><span class="token punctuation">.</span><span class="token function">lineDelimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 添加字符串解码器，用于接受客户端数据</span>
        <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">&quot;decoder&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 添加字符串编码器，用于向客户端发送数据</span>
        <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">&quot;encoder&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 添加处理器，每个连接一个handler对象</span>
        <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">&quot;handler&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SmtpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用future在消息回复完毕后主动关闭通道</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 在回复完消息之后，将通道关闭</span>
  <span class="token class-name">ChannelFuture</span> future <span class="token operator">=</span> smtpData<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">ReplyMessage</span><span class="token punctuation">.</span><span class="token constant">QUIT_OK</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 添加异步回调事件，在回调队列中等待执行</span>
  future<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span><span class="token constant">CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指令的设计和处理" tabindex="-1"><a class="header-anchor" href="#指令的设计和处理" aria-hidden="true">#</a> 指令的设计和处理</h4><p>设计：主要是设置指令的处理逻辑，包括设置指令的基类，然后让下面的所有指令来继承该类，每个指令一个类，都有他自己的处理方法，但也有公共的方法就放在父类里。然后包括封装指令的返回消息，返回消息的构建工具类等等</p><p>处理：各种指令之间的顺序执行的保证，以及指令实现的正确性，去网上查了很多资料。</p><h4 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题？</h4><p>1、netstat -tanp 查看端口占用情况 find / -name master #查了一下位置 部署的时候centos他25端口是默认是占用的postfix，然后找到端口占用的程序，将它终止并禁止开机自启才成功</p><p>2、依赖注入的问题，邮件服务是独立的，所以不交给springboot管理，但是收到邮件后需要保存到数据库，这需要用到mybatis-plus持久化，所以需要用到sprinboot管理的对象，一开始直接使用@autowired一直报空指针。</p><p>原因：不归springboot管理的bean内部使用依赖注入的注解是不会生效的。</p><p>所以需要手动获取，于是自己编写了一个工具类，在springboot启动的时候，将上下文对象保存到工具类的静态变量中，然后邮件服务中需要使用mapper的地方手动传入class对象屈从容器中拿bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextHolder</span> <span class="token punctuation">{</span>

  <span class="token comment">// 上下文对象</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/** 通过name获取 Bean. */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** 通过class获取Bean. */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** 通过name,以及Clazz返回指定的Bean */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局异常处理" tabindex="-1"><a class="header-anchor" href="#全局异常处理" aria-hidden="true">#</a> 全局异常处理</h4><p>自定义异常，然后在这里统一处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token comment">// @RestControllerAdvice 建议直接Rest，就不用一个个加@ResponseBody，因为前后端分离项目不需要返回路径</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 处理自定义的业务异常
     * <span class="token keyword">@param</span> <span class="token parameter">req</span>
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">BizException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultResponse</span> <span class="token function">bizExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">BizException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发生业务异常！原因是：{}&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 处理空指针的异常
     * <span class="token keyword">@param</span> <span class="token parameter">req</span>
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultResponse</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发生空指针异常！原因是:&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">BODY_NOT_MATCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 处理其他异常
     * <span class="token keyword">@param</span> <span class="token parameter">req</span>
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultResponse</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;未知异常！原因是:&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker？</h3><p>Docker 是一个开源的应用容器引擎，基于 Go 语言并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><h4 id="docker-的优点" tabindex="-1"><a class="header-anchor" href="#docker-的优点" aria-hidden="true">#</a> Docker 的优点</h4><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>1、快速，一致地交付您的应用程序</p><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p><p>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p><ul><li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li><li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li><li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li><li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li></ul><p>2、响应式部署和扩展</p><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p><p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p><p>3、在同一硬件上运行更多工作负载</p><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p><h4 id="基本结构" tabindex="-1"><a class="header-anchor" href="#基本结构" aria-hidden="true">#</a> 基本结构</h4><p>一个是Docker的客户端，一个是Docker的主机，一个是Docker的远程仓库：</p><img src="`+o+`" alt="screenshot2024-03-14 21.10.20" style="zoom:50%;"><ul><li>镜像（image)：</li></ul><p>docker镜像就是一个只读模板，比如，一个镜像可以包含一个完整的centos，里面仅安装apache或用户的其他应用，镜像可以用来创建docker容器，另外docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下一个已经做好的镜像来直接使用，通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码，运行时间，库、环境变量、和配置文件。</p><ul><li>容器(container)：</li></ul><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的，容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用docker ps 查看，它可以被启动，开始、停止、删除、每个容器都是互相隔离的，可以把容器看做是要给简易版的linux环境（包括root用户权限、镜像空间、用户空间和网络空间等）和运行在其中的应用程序</p><ul><li>仓库(repository)：</li></ul><p>registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下载，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务。</p><h3 id="容器和虚拟机" tabindex="-1"><a class="header-anchor" href="#容器和虚拟机" aria-hidden="true">#</a> 容器和虚拟机</h3><p>容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量</p><p>虚拟机运行的是一个完整的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多</p><h2 id="对联云" tabindex="-1"><a class="header-anchor" href="#对联云" aria-hidden="true">#</a> 对联云</h2><p>默认是JVM初始内存为物理内存的1/64，最大为1/4</p><p>jvm参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms512m  设置JVM初始内存为512m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。

-Xmx512m ，设置JVM最大可用内存为512M。

-Xmn200m：设置年轻代大小为200M。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。

-Xss128k：
设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,108),i=[l];function r(u,d){return s(),a("div",null,i)}const m=n(c,[["render",r],["__file","project.html.vue"]]);export{m as default};
