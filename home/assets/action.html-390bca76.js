import{_ as o,r as l,o as i,c,b as n,d as s,e,a as t}from"./app-0bc2a4b0.js";const p="/home/assets/runson-f4f89d26.png",u="/home/assets/aaa-98fdae84.png",d="/home/assets/pr-499aad3a.png",r={},k=n("h1",{id:"github-action",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#github-action","aria-hidden":"true"},"#"),s(" Github Action")],-1),m=n("p",null,"GitHub Actions 是一种持续集成和持续交付 (CI/CD) 平台，可用于自动执行生成、测试和部署管道。",-1),v=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),b=n("p",null,"持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。",-1),h=n("p",null,"很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。",-1),g={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"userName/repoName",-1),_=n("code",null,"actions/setup-go@v5",-1),f=n("code",null,"github.com/actions/setup-go",-1),w={href:"https://github.com/actions/setup-node",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>actions/setup-go@74bc508 <span class="token comment"># 指向一个 commit</span>
actions/setup-go@v1.0    <span class="token comment"># 指向一个标签</span>
actions/setup-go@master  <span class="token comment"># 指向一个分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>GitHub Actions 术语：</p><ol><li><strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li><li><strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li><strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</li><li><strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</li></ol><h2 id="workflow文件" tabindex="-1"><a class="header-anchor" href="#workflow文件" aria-hidden="true">#</a> workflow文件</h2><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p><p>workflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为<code>.yml/yaml</code>，比如<code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p>`,8),q={href:"https://docs.github.com/zh/actions/writing-workflows/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>name：name是workflow的名称，如果省略该字段，默认为当前workflow的文件名。</p><p>on：on指定出发workflow的条件，通常是某些事件。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span> push
<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> pull_request<span class="token punctuation">]</span>
<span class="token key atrule">on</span><span class="token punctuation">:</span>
	<span class="token key atrule">push</span><span class="token punctuation">:</span>
		<span class="token key atrule">branches</span><span class="token punctuation">:</span>
			<span class="token punctuation">-</span> master
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
    <span class="token comment"># * is a special character in YAML so you have to quote this string</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span>  <span class="token string">&#39;30 5,17 * * *&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他支持很多种类型的事件：如push事件，或者合并pull_request，还可以限定分支或tag，也可以是cron的定时任务。</p><p>jobs.&lt;jon_id&gt;.name：workflow文件的主体是jobs字段，标识要执行一项或多项任务。</p><p>jobs字段里面，需要写出每一项任务的job_id，job_id里的name字段是任务的说明。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
	<span class="token key atrule">first_job</span><span class="token punctuation">:</span>
		<span class="token key atrule">name</span><span class="token punctuation">:</span> aaa
	<span class="token key atrule">second_job</span><span class="token punctuation">:</span>
		<span class="token key atrule">name</span><span class="token punctuation">:</span> bbb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jobs.&lt;job_id&gt;.needs：needs字段指定当前任务的依赖关系，即运行顺序</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">job1</span><span class="token punctuation">:</span>
  <span class="token key atrule">job2</span><span class="token punctuation">:</span>
    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1
  <span class="token key atrule">job3</span><span class="token punctuation">:</span>
    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jobs.&lt;job_id&gt;.runs-on：runs-on字段指定运行所需要的虚拟机环境，是必填字段，下面是一些可用的环境</p><p><img src="`+p+`" alt="screenshot2024-12-09 11.12.13"></p><p>jobs.&lt;job_id&gt;.steps：steps字段指定每个job的运行步骤，可以包含一个或多个步骤，每个步骤都可以指定以下三个字段：</p><ul><li><code>jobs.&lt;job_id&gt;.steps.name</code>：步骤名称。</li><li><code>jobs.&lt;job_id&gt;.steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs.&lt;job_id&gt;.steps.env</code>：该步骤所需的环境变量。</li></ul><p>下面是一个完整的实例：</p><p>下面</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> golangci<span class="token punctuation">-</span>gotest<span class="token punctuation">-</span>ci

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths-ignore</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;**.md&#39;</span>
  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">golangci</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ci
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout <span class="token comment"># 获取源码</span>
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>

      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>go@v5 <span class="token comment"># 安装 go</span>
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">go-version</span><span class="token punctuation">:</span> <span class="token string">&#39;1.22.3&#39;</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> golangci<span class="token punctuation">-</span>lint <span class="token comment"># 安装golangci-lint并检查</span>
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> golangci/golangci<span class="token punctuation">-</span>lint<span class="token punctuation">-</span>action@v6
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or \`latest\` to use the latest version</span>
          <span class="token key atrule">version</span><span class="token punctuation">:</span> latest

          <span class="token comment"># Optional: working directory, useful for monorepos</span>
          <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> ./

          <span class="token comment"># Optional: golangci-lint command line arguments.</span>
          <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>timeout 300s <span class="token punctuation">-</span><span class="token punctuation">-</span>verbose

          <span class="token comment"># Optional: show only new issues if it&#39;s a pull request. The default value is \`false\`.</span>
          <span class="token comment"># only-new-issues: true</span>

          <span class="token comment"># Optional: if set to true then the action will use pre-installed Go.</span>
          <span class="token key atrule">skip-go-installation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

          <span class="token comment"># Optional: if set to true then the action don&#39;t cache or restore ~/go/pkg.</span>
          <span class="token key atrule">skip-pkg-cache</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

          <span class="token comment"># Optional: if set to true then the action don&#39;t cache or restore ~/.cache/go-build.</span>
          <span class="token comment"># skip-build-cache: true</span>
          
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run test case <span class="token comment"># 执行所有单元测试</span>
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          go test ./...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要在代码仓库中创建<code>.github/workflows</code>，创建一个yml文件，并写入上面内容，然后推送到远程仓库，以后每次push代码或者合并pr的时候都会自动执行go的代码静态检查和单元测试的运行。</p><p><img src="`+u+`" alt="screenshot2024-12-09 11.21.49"></p><p>就可以在github的actions中看到该任务了。</p><h2 id="dependabot" tabindex="-1"><a class="header-anchor" href="#dependabot" aria-hidden="true">#</a> Dependabot</h2><p>Dependabot 可帮助随时掌握依赖项生态系统。 使用 Dependabot，可以保持依赖项为最新状态，从而解决供应链中的任何潜在安全问题。</p><p>Dependabot 由三种不同的功能组成，可帮助你管理依赖项：</p><ul><li>Dependabot alerts：就存储库中使用的依赖项中的漏洞问题通知你。</li><li>Dependabot security updates：自动引发拉取请求，以更新你使用的具有已知安全漏洞的依赖项。</li><li>Dependabot version updates：自动引发拉取请求以使依赖项保持最新。</li></ul><h3 id="版本更新" tabindex="-1"><a class="header-anchor" href="#版本更新" aria-hidden="true">#</a> 版本更新</h3><p>通过将 <code>dependabot.yml</code> 配置文件签入存储库的 <code>.github</code> 目录，可启用 Dependabot version updates。 Dependabot 然后提出拉取请求，使配置的依赖项保持最新。 然后就是写配置文件了。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 必填项。该文件必须以 version: 2 开头。</span>
<span class="token key atrule">updates</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">package-ecosystem</span><span class="token punctuation">:</span> <span class="token string">&quot;gomod&quot;</span>
    <span class="token key atrule">directory</span><span class="token punctuation">:</span> <span class="token string">&quot;/&quot;</span>
    <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token string">&quot;daily&quot;</span>
      <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token string">&quot;10:00&quot;</span>
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;dependencies&quot;</span>
  <span class="token punctuation">-</span> <span class="token key atrule">package-ecosystem</span><span class="token punctuation">:</span> <span class="token string">&quot;github-actions&quot;</span>
    <span class="token key atrule">directory</span><span class="token punctuation">:</span> <span class="token string">&quot;/&quot;</span>
    <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token string">&quot;daily&quot;</span>
      <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token string">&quot;10:00&quot;</span>
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;dependencies&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),D=n("code",null,"package-ecosystem",-1),G=n("code",null,"dependabot.yml",-1),H={href:"https://docs.github.com/zh/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"package-ecosystem",-1),A=n("code",null,"directory",-1),N=n("code",null,"dependabot.yml",-1),z={href:"https://docs.github.com/zh/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#directory",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"directory",-1),L=n("code",null,"directories",-1),V=n("code",null,"dependabot.yml",-1),B={href:"https://docs.github.com/zh/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#directories",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"directories",-1),I=n("code",null,"schedule.interval",-1),M=n("code",null,"dependabot.yml",-1),T={href:"https://docs.github.com/zh/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#scheduleinterval",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"schedule.interval",-1),S=n("p",null,"就可以看到bot他会自动提交一些更新依赖包的pr。",-1),F=n("p",null,[n("img",{src:d,alt:"screenshot2024-12-09 15.16.29"})],-1);function J(K,P){const a=l("ExternalLinkIcon");return i(),c("div",null,[k,m,v,b,h,n("p",null,[s("如果需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。GitHub 做了一个"),n("a",g,[s("官方市场"),e(a)]),s("，可以搜索到他人提交的 actions。")]),n("p",null,[s("每个 action 就是一个独立脚本，因此可以做成代码仓库，使用"),y,s("的语法引用 action。比如，"),_,s("就表示"),f,s("这个"),n("a",w,[s("仓库"),e(a)]),s("，它代表一个 action，作用是安装go。")]),j,n("p",null,[s("workflow 文件的配置字段非常多，"),n("a",q,[s("官方文档"),e(a)]),s("。下面只介绍一些基本字段。")]),x,n("ul",null,[n("li",null,[n("p",null,[D,s(" 指定包管理器。 有关支持的包管理器的详细信息，去看“"),G,s(" 文件配置选项”中的 "),n("a",H,[O,e(a)]),s("。")])]),n("li",null,[n("p",null,[A,s(" 指定清单或其他定义文件的位置。 有关详细信息，去看“"),N,s(" 文件配置选项”中的 "),n("a",z,[C,e(a)]),s("。")])]),n("li",null,[n("p",null,[L,s(" 用于指定多个清单或其他定义文件的位置。 去看“"),V,s(" 文件的配置选项”中的 "),n("a",B,[E,e(a)]),s("。")])]),n("li",null,[n("p",null,[I,s(" 指定检查新版本的频率。 去看“"),M,s(" 文件配置选项”中的 "),n("a",T,[Y,e(a)]),s("。")])])]),S,F])}const R=o(r,[["render",J],["__file","action.html.vue"]]);export{R as default};
