import{_ as p,r as o,o as c,c as i,b as n,d as s,e as t,a as e}from"./app-e5ba6616.js";const l="/home/assets/yumdocker-982d2f31.png",u="/home/assets/dockerstart-ec3183fd.png",r="/home/assets/dockerversion-214bc096.png",k="/home/assets/dockerinfo-a33dcc26.png",d="/home/assets/dockerrun-d4dbf8a0.png",m="/home/assets/prometheusdocker-e6a7e07f.png",v="/home/assets/dockerrun_d-a8f96aec.png",b="/home/assets/prometheustest-773155c9.png",g="/home/assets/prometheuspage-69c28f4c.png",h="/home/assets/dockerdataprometheus-dc348dd4.png",f="/home/assets/grafanarun-8cd3426d.png",_="/home/assets/dockerportgrafana-9abd3ea8.png",q="/home/assets/grafanapage-9b30d29b.png",y="/home/assets/grafanavolume-560b73b8.png",w="/home/assets/grafana1-2c5de099.png",x="/home/assets/grafana2-af45a477.png",R="/home/assets/grafana3-712bf435.png",C="/home/assets/datasourcename-2938a9f2.png",S="/home/assets/datasourceconnection-2f7e35c6.png",G="/home/assets/datasourceperformance-6de428e4.png",D="/home/assets/dashboards-cb79204b.png",P="/home/assets/dockercompose-f01fc92f.png",$="/home/assets/docker-composeup-e6a17572.png",I="/home/assets/shellstart-2869460a.png",M={},T=n("h1",{id:"monitoring",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#monitoring","aria-hidden":"true"},"#"),s(" Monitoring")],-1),U={href:"https://geth.ethereum.org/docs/monitoring/dashboards",target:"_blank",rel:"noopener noreferrer"},N=e(`<h2 id="服务器环境" tabindex="-1"><a class="header-anchor" href="#服务器环境" aria-hidden="true">#</a> 服务器环境</h2><p>Amazon Linux 2023版本，工具用的也是yum，但和centos不一样。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@ip-172-31-23-171 ~<span class="token punctuation">]</span><span class="token comment"># uname -a</span>
Linux ip-172-31-23-171.ec2.internal <span class="token number">6.1</span>.84-99.169.amzn2023.x86_64 <span class="token comment">#1 SMP PREEMPT_DYNAMIC Mon Apr  8 19:19:48 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker知识" tabindex="-1"><a class="header-anchor" href="#docker知识" aria-hidden="true">#</a> docker知识</h2><p>在 Docker 中，挂载数据卷（Volumes）和后挂载（Bind Mounts）都是将主机文件系统和容器文件系统关联的方式，但它们有以下区别：</p><p><strong>1. 数据卷 (Volume)</strong></p><p>数据卷是 Docker 管理的独立存储区，它们可以在多个容器之间共享和重用。通常情况下，数据卷由 Docker 管理，并且存储在 Docker 的内部文件系统中（例如 /var/lib/docker/volumes/）。</p><p><strong>特点</strong>：</p><ul><li>由 Docker 管理，因此独立于容器生命周期（容器删除后卷仍然保留）。</li><li>提供一致的存储路径（由 Docker 控制，避免了直接访问宿主机的路径）。</li><li>支持容器之间的数据共享：可以轻松地在多个容器间共享数据。</li><li>适合持久化容器数据，比如数据库文件、日志数据等。</li><li>具备额外的功能支持，比如备份、恢复、加密等。</li></ul><p><strong>创建和挂载数据卷</strong>：</p><p>通过 docker volume create 来创建独立的数据卷。</p><p>使用 docker run -v volume_name:/container_path 挂载到容器指定路径。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create my_volume
<span class="token function">docker</span> run <span class="token parameter variable">-v</span> my_volume:/app/data my_image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 后挂载 (Bind Mount)</strong></p><p>后挂载是直接将宿主机的指定目录或文件挂载到容器的指定目录。这种方式更为灵活，但不受 Docker 管理，宿主机路径需要手动管理和指定。</p><p><strong>特点</strong>：</p><ul><li>不受 Docker 控制，直接访问宿主机文件系统的路径。</li><li>容器销毁后挂载的文件夹/文件依然存在。</li><li>适合需要容器实时访问宿主机数据的情况，比如调试、开发环境等。</li><li>更加灵活，可以挂载主机上的任意文件或目录。</li></ul><p><strong>创建和挂载后挂载</strong>：</p><p>使用 docker run -v /host/path:/container_path 挂载主机路径到容器。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /host/data:/app/data my_image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>对比总结</strong></p><p><strong>特点</strong> <strong>数据卷 (Volume)</strong> <strong>后挂载 (Bind Mount)</strong></p><p>存储位置 由 Docker 管理（默认在 /var/lib/docker/volumes） 任何宿主机指定路径</p><p>容器共享数据 支持容器之间共享 支持，但路径管理复杂</p><p>数据持久性 持久化，容器删除不会影响数据 取决于宿主机路径是否删除</p><p>数据一致性和隔离 Docker 管理更为一致和隔离性强 直接访问宿主机路径，灵活但隔离性较差</p><p>使用场景 数据持久化需求（如数据库、日志等） 需要直接访问宿主机文件（如开发、调试等）</p><p>总结来说，<strong>数据卷更适合持久化应用数据</strong>，而 <strong>后挂载更适合临时数据访问或需要实时同步主机数据的场景</strong>。</p><h2 id="开放geth-metrics" tabindex="-1"><a class="header-anchor" href="#开放geth-metrics" aria-hidden="true">#</a> 开放geth metrics</h2>`,31),O={href:"https://geth.ethereum.org/docs/monitoring/metrics",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ./geth-linux <span class="token parameter variable">--config</span> ./config.toml <span class="token parameter variable">--datadir</span> ./node <span class="token parameter variable">--cache</span> <span class="token number">8000</span> <span class="token parameter variable">--history.transactions</span><span class="token operator">=</span><span class="token number">90000</span> <span class="token parameter variable">--syncmode</span><span class="token operator">=</span>full <span class="token parameter variable">--db.engine</span><span class="token operator">=</span>pebble --tries-verify-mode<span class="token operator">=</span>none <span class="token parameter variable">--http</span> <span class="token parameter variable">--http.port</span> <span class="token number">80</span> <span class="token parameter variable">--ws</span> <span class="token parameter variable">--metrics</span> <span class="token parameter variable">--metrics.expensive</span> <span class="token parameter variable">--metrics.addr</span> <span class="token number">0.0</span>.0.0 <span class="token parameter variable">--metrics.port</span> <span class="token number">6060</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装docker" tabindex="-1"><a class="header-anchor" href="#安装docker" aria-hidden="true">#</a> 安装docker</h2><p>要在 6.1.84-99.169.amzn2023.x86_64 服务器上安装 Docker，请按照以下步骤操作。此服务器可能运行的是 Amazon Linux 2023，以下步骤将基于此系统环境进行。</p><p><strong>1、更新软件包和系统</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum update <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2、安装 Docker</strong>：</p><p>Amazon Linux 提供了 Docker 的软件包，可以直接使用 yum 来安装 Docker。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+l+`" alt="screenshot2024-11-06 10.50.49" style="zoom:50%;"><p><strong>3、启动 Docker 并将其设置为开机启动</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="screenshot2024-11-06 10.52.12"></p><p><strong>4、验证 Docker 安装</strong>：</p><p>检查 Docker 的版本，确保安装成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+r+`" alt="screenshot2024-11-06 10.52.50" style="zoom:67%;"><p><strong>5、配置权限（可选）</strong>：</p><p>将当前用户添加到 docker 组中，以便无需 sudo 即可运行 Docker 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更改后需要重新登录才能生效。</p><img src="`+k+`" alt="screenshot2024-11-06 10.56.31" style="zoom:67%;"><h2 id="安装promethues" tabindex="-1"><a class="header-anchor" href="#安装promethues" aria-hidden="true">#</a> 安装promethues</h2><p>先准备启动prometheus需要的配置文件。需要准备两个文件：<code>prometheus.yml</code>和<code>record.geth.rules.yml</code></p><p><code>prometheus.yml</code>配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">global</span><span class="token punctuation">:</span>
  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 10s
  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 10s

<span class="token comment"># Load and evaluate rules in this file every &#39;evaluation_interval&#39; seconds.</span>
<span class="token key atrule">rule_files</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;record.geth.rules.yml&#39;</span>

<span class="token comment"># A scrape configuration containing exactly one endpoint to scrape.</span>
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;bsc-dev&#39;</span>
    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 10s
    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /debug/metrics/prometheus
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> 34.226.211.254<span class="token punctuation">:</span><span class="token number">6060</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">chain</span><span class="token punctuation">:</span> bsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>record.geth.rules.yml</code>配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">groups</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> geth_custom_rules
    <span class="token key atrule">rules</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> geth_rpc_requests_success
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_duration_.<span class="token important">*_success&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_duration_(.+)_success&quot;)
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> geth_rpc_requests_failure
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_duration_.<span class="token important">*_failure&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_duration_(.+)_failure&quot;)
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> geth_rpc_requests_success_count
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_duration_.<span class="token important">*_success_count&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_duration_(.+)_success_count&quot;)
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> geth_rpc_requests_failure_count
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_duration_.<span class="token important">*_failure_count&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_duration_(.+)_failure_count&quot;)
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> rpc_count
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_count_.<span class="token important">*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_count_(.+)&quot;)
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> geth_rpc_success
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_success_.<span class="token important">*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_success_(.+)&quot;)
      <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> geth_rpc_failure
        <span class="token key atrule">expr</span><span class="token punctuation">:</span> label_replace(<span class="token punctuation">{</span>__name__=~&quot;rpc_failure_.<span class="token important">*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;__name__&quot;</span><span class="token punctuation">,</span> &quot;rpc_failure_(.+)&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件的作用是设置一些修改规则，因为geth暴露的metrics是没有标签的，比如最后的rpc_count，表示每个rpc接口的请求次数，按道理来说这个metrics里面应该有一个label来表示统计的是那个rpc接口，如：<code>rpc_count{method=&quot;eth_call&quot;}</code>，但实际上，他是将每个方法都看成了一个独立的metrics，如：<code>rpc_count_eth_call{}</code>。所以为了方便展示，需要将这些数据进行修改。</p><p>这里的含义是匹配所有<code>rpc_count_</code>开头的metrics，然后将他后面的api提取出来，作为一个method标签，然后重新构成为一个<code>rpc_count{method=}</code>的metrics.</p>`,29),L={href:"https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://prometheus.io/docs/prometheus/latest/installation/",target:"_blank",rel:"noopener noreferrer"},W=e(`<p>直接启动即可，他会自动去拉取，也可以使用docker pull先拉取，然后在启动</p><p>记得加-d让他后台运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9090</span>:9090 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /root/monitor/prometheus:/etc/prometheus <span class="token punctuation">\\</span>
    prom/prometheus:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不加-d可以看到他的启动日志</p><p><img src="`+d+'" alt="screenshot2024-11-06 11.42.10"></p><img src="'+m+'" alt="screenshot2024-11-06 11.34.26" style="zoom:50%;"><p>加上-d让他后台运行</p><img src="'+v+'" alt="screenshot2024-11-06 11.43.16" style="zoom:67%;"><p>然后请求一个接口查看一下：</p><p><img src="'+b+'" alt="screenshot2024-11-06 13.38.20"></p><p>说明服务一起启动成功，如果开放了服务器端口，可以直接浏览器请求即可。</p><img src="'+g+`" alt="screenshot2024-11-06 13.58.21" style="zoom:33%;"><p>为了持久化数据，而不是在容器删除后，换个容器，数据就抹除，需要使用数据挂载。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create prometheus-data
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>prometheus <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9090</span>:9090 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /root/monitor/prometheus:/etc/prometheus <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> prometheus-data:/prometheus <span class="token punctuation">\\</span>
    prom/prometheus:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+h+'" alt="screenshot2024-11-06 14.17.44" style="zoom:50%;"><p>接下来就可以去安装配置面板了。</p><h2 id="安装grafana" tabindex="-1"><a class="header-anchor" href="#安装grafana" aria-hidden="true">#</a> 安装grafana</h2>',17),B={href:"https://grafana.com/grafana/download?platform=docker",target:"_blank",rel:"noopener noreferrer"},F={href:"https://grafana.com/docs/grafana/latest/setup-grafana/installation/docker/",target:"_blank",rel:"noopener noreferrer"},z=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>grafana <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 grafana/grafana-enterprise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+f+'" alt="screenshot2024-11-06 13.43.22" style="zoom:50%;"><p>查看grafana的运行情况</p><img src="'+_+'" alt="screenshot2024-11-06 13.44.36" style="zoom:67%;"><p>然后访问3000端口，就可以进入grafana的页面了，账号密码都是admin。</p><img src="'+q+`" alt="screenshot2024-11-06 13.57.39" style="zoom:33%;"><p>同样的，也需要数据持久化。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># create a persistent volume for your data</span>
<span class="token function">docker</span> volume create grafana-storage

<span class="token comment"># verify that the volume was created correctly</span>
<span class="token comment"># you should see some JSON output</span>
<span class="token function">docker</span> volume inspect grafana-storage

<span class="token comment"># start grafana</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--name</span><span class="token operator">=</span>grafana <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> grafana-storage:/var/lib/grafana <span class="token punctuation">\\</span>
  grafana/grafana-enterprise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+y+'" alt="screenshot2024-11-06 14.22.01" style="zoom:50%;"><p>接下来就可以去配置面板了。</p><h2 id="配置面板" tabindex="-1"><a class="header-anchor" href="#配置面板" aria-hidden="true">#</a> 配置面板</h2><img src="'+w+'" alt="screenshot2024-11-06 14.29.20" style="zoom:25%;"><p>选择右下角的<code>Add your first data source</code></p><img src="'+x+'" alt="screenshot2024-11-06 14.30.10" style="zoom:25%;"><p>然后选择prometheus</p><img src="'+R+'" alt="screenshot2024-11-06 14.30.48" style="zoom:25%;"><p>然后就是配置各项信息。</p><img src="'+C+'" alt="screenshot2024-11-06 15.15.05" style="zoom:33%;">',18),H={href:"https://liushun-ing.github.io/home/master/prometheus/intro.html#node-exporter",target:"_blank",rel:"noopener noreferrer"},V=n("img",{src:S,alt:"screenshot2024-11-06 15.15.28",style:{zoom:"33%"}},null,-1),j=n("p",null,[s("然后这里可以使用"),n("code",null,"docker container logs prometheus"),s("去看启动日志查看版本。")],-1),K=n("img",{src:G,alt:"screenshot2024-11-06 15.18.35",style:{zoom:"33%"}},null,-1),Y=n("p",null,"其他没啥需要配置的。",-1),J={href:"https://grafana.com/grafana/dashboards/18463-go-ethereum-by-instance/",target:"_blank",rel:"noopener noreferrer"},Q=n("strong",null,"完美！！！",-1),X=e('<p><img src="'+D+`" alt="screenshot2024-11-06 15.21.14"></p><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> docker compose</h2><p>上面是服务配置有两个，需要启动两个服务，我们可以写一个配置文件，然后使用<code>docker compose</code>一键式配置和启动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+P+`" alt="screenshot2024-11-06 15.39.43"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置执行权限</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose

<span class="token punctuation">[</span>root@ip-172-31-23-171 ~<span class="token punctuation">]</span><span class="token comment"># docker-compose --version</span>
Docker Compose version v2.30.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这就安装成功啦。</p><p>因为使用的是官方镜像（prom/prometheus 和 grafana/grafana-enterprise），可以直接在 docker-compose.yml 中引用这些镜像，无需额外的 Dockerfile。如果需要构造自己的镜像，就需要自己写DockerFile文件来构造镜像文件了。</p><p>创建<strong>docker-compose.yml</strong>，docker compose就是根据这个文件去启动应用的。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">prometheus</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/prometheus<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> prometheus
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;9090:9090&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./prometheus<span class="token punctuation">:</span>/etc/prometheus       <span class="token comment"># 配置文件挂载</span>
      <span class="token punctuation">-</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/prometheus        <span class="token comment"># 数据卷</span>

  <span class="token key atrule">grafana</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana<span class="token punctuation">-</span>enterprise
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> grafana
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3000:3000&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> grafana<span class="token punctuation">-</span>storage<span class="token punctuation">:</span>/var/lib/grafana   <span class="token comment"># 数据卷</span>

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">prometheus-data</span><span class="token punctuation">:</span>
  <span class="token key atrule">grafana-storage</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在配置文件所在的目录执行一下命令即可。</p><blockquote><p>注意：Docker Compose 无法找到用 docker run 创建的容器，这是因为 Docker Compose 仅管理它自己启动和定义的容器。它会根据 docker-compose.yml 文件来识别和管理服务，<strong>不直接管理</strong>通过 docker run 命令启动的容器，即使它们使用了相同的镜像或相同的名称。</p><p>所以在使用docker-compose之前，记得先把docker直接启动的容器停止并删了,还有数据卷也记得删了。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
<span class="token comment"># 运行完毕后，可以通过以下命令来检查容器状态</span>
<span class="token function">docker-compose</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+$+`" alt="screenshot2024-11-06 16.01.17"></p><blockquote><p><strong>一些常用命令</strong></p></blockquote><p>这条命令会启动所有定义在 <code>docker-compose.yml</code> 文件中的服务，如果容器已经在运行，Docker Compose 会<strong>确认其状态</strong>，而不会重复启动。</p><p><code> docker-compose restart</code> <strong>命令</strong>：这会<strong>重新启动</strong>所有定义在 <code>docker-compose.yml</code> 文件中的容器，先停止再启动它们。</p><p><code>docker-compose restart prometheus</code> 命令：这样只会重启该服务，而不会影响其他容器。</p><p><code>docker-compose down</code> 停止所有服务,会把container删了，但数据卷不会受影响：</p><p><strong>注意</strong>：使用 down 命令时，如果添加了 -v 参数（如 <code>docker-compose down -v</code>），会删除所有未使用的数据卷。确保不要在无备份的情况下误加 -v 参数。</p><p><strong>选择适合的方式</strong></p><p>​ • <strong>简单重启</strong>：<code>docker-compose restart</code> 或 <code>docker-compose up -d</code></p><p>​ • <strong>完整停用再启动</strong>：<code>docker-compose down &amp;&amp; docker-compose up -d</code></p><p><code>docker volume ls</code>：查看所有数据卷</p><p>日志相关：</p><p>运行以下命令可以查看所有容器的实时日志输出：</p><p><code>docker-compose logs -f</code></p><ul><li>-f 或 --follow：表示“跟随模式”，会实时输出新日志，就像使用 tail -f。</li><li>这将显示所有服务的日志，并实时更新。</li></ul><p>如果只想查看某个服务的日志，可以在命令后指定服务名称。例如，要查看 prometheus 服务的日志：</p><p><code>docker-compose logs -f prometheus</code></p><p>如果只想查看最近的几行日志，可以使用 --tail 选项。例如，要查看 grafana 服务的最近 100 行日志：</p><p><code>docker-compose logs --tail=100 grafana</code></p><h2 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h2><p>写了一个脚本，chatGPT就是好用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env bash</span>

<span class="token comment"># Color functions for output</span>
<span class="token function-name function">color_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[<span class="token variable">$1m</span><span class="token variable">$2</span><span class="token entity" title="\\033">\\033</span>[0m&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token function-name function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> color_text <span class="token string">&quot;0;34&quot;</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment"># Blue</span>
<span class="token function-name function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> color_text <span class="token string">&quot;0;32&quot;</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment"># Green</span>
<span class="token function-name function">warning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> color_text <span class="token string">&quot;0;33&quot;</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment"># Yellow</span>
<span class="token function-name function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> color_text <span class="token string">&quot;0;31&quot;</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment"># Red</span>

<span class="token comment"># Exit on error</span>
<span class="token function-name function">error_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  error <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>
  <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment"># Display help message</span>
<span class="token function-name function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Usage: <span class="token variable">$0</span> -c &lt;chain-name&gt;&quot;</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Options:&quot;</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;  -c &lt;chain-name&gt;   Specify the blockchain to monitor (e.g., bsc, eth)&quot;</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;  -h                Display this help message&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment"># List of valid chain names</span>
<span class="token assign-left variable">VALID_CHAINS</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;bsc&quot;</span> <span class="token string">&quot;eth&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Check for required parameters</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$#</span>&quot;</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  usage
  <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token comment"># Only allow -c or -h as valid options</span>
<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;:c:h&quot;</span> opt<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">case</span> <span class="token variable">\${opt}</span> <span class="token keyword">in</span>
    c<span class="token punctuation">)</span>
      <span class="token assign-left variable">CHAIN_NAME</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${OPTARG}</span>&quot;</span>
      <span class="token punctuation">;</span><span class="token punctuation">;</span>
    h<span class="token punctuation">)</span>
      usage
      <span class="token builtin class-name">exit</span> <span class="token number">0</span>
      <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">\\</span>?<span class="token punctuation">)</span>
      error_exit <span class="token string">&quot;Invalid option: -<span class="token variable">$OPTARG</span>. Use -h for help.&quot;</span>
      <span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">esac</span>
<span class="token keyword">done</span>

<span class="token comment"># Shift away parsed options, check for any extra arguments</span>
<span class="token builtin class-name">shift</span> <span class="token variable"><span class="token variable">$((</span>OPTIND <span class="token operator">-</span><span class="token number">1</span><span class="token variable">))</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$#</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  error_exit <span class="token string">&quot;Unexpected argument(s): <span class="token variable">$*</span>. Only -c and -h options are allowed.&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Ensure chain name is provided and is valid</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$CHAIN_NAME</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  error_exit <span class="token string">&quot;Error: Chain name must be specified with -c.&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Validate chain name</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">&quot; <span class="token variable">\${VALID_CHAINS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> &quot;</span> <span class="token operator">=~</span> <span class="token string">&quot; <span class="token variable">\${CHAIN_NAME}</span> &quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  error_exit <span class="token string">&quot;Error: Invalid chain name &#39;<span class="token variable">$CHAIN_NAME</span>&#39;. Valid options are: <span class="token variable">\${VALID_CHAINS<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>.&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Docker installation check</span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> <span class="token function">docker</span> <span class="token operator">&amp;&gt;</span> /dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>
  info <span class="token string">&quot;Installing Docker...&quot;</span>
  <span class="token function">sudo</span> yum update <span class="token parameter variable">-y</span>
  <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">docker</span>
  <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
  <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
  <span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token string">&quot;<span class="token environment constant">$USER</span>&quot;</span>
<span class="token keyword">else</span>
  success <span class="token string">&quot;Docker is already installed&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Docker Compose installation check</span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> <span class="token function">docker-compose</span> <span class="token operator">&amp;&gt;</span> /dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>
  info <span class="token string">&quot;Installing Docker Compose...&quot;</span>
  <span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
  <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
<span class="token keyword">else</span>
  success <span class="token string">&quot;Docker Compose is already installed&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Setup Prometheus and Grafana configuration files</span>
info <span class="token string">&quot;Setting up Prometheus and Grafana configuration for chain: <span class="token variable">$CHAIN_NAME</span>&quot;</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> monitor/prometheus
<span class="token builtin class-name">cd</span> monitor/prometheus <span class="token operator">||</span> <span class="token builtin class-name">exit</span>

<span class="token comment"># Get server IP address</span>
<span class="token assign-left variable">ipAddress</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> ifconfig.me<span class="token variable">)</span></span>

<span class="token comment"># Write Prometheus configuration</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span>prometheus.yml <span class="token operator">&lt;&lt;</span><span class="token string">EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - &#39;record.geth.rules.yml&#39;

scrape_configs:
  - job_name: &#39;<span class="token variable">$CHAIN_NAME</span>-dev&#39;
    scrape_interval: 15s
    metrics_path: /debug/metrics/prometheus
    static_configs:
      - targets:
        - <span class="token variable">$ipAddress</span>:6060
        labels:
          chain: <span class="token variable">$CHAIN_NAME</span>
EOF</span>

<span class="token comment"># Write Prometheus recording rules</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span>record.geth.rules.yml <span class="token operator">&lt;&lt;</span><span class="token string">EOF
groups:
  - name: geth_custom_rules
    rules:
      - record: geth_rpc_requests_success
        expr: label_replace({__name__=~&quot;rpc_duration_.*_success&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_duration_(.+)_success&quot;)
      - record: geth_rpc_requests_failure
        expr: label_replace({__name__=~&quot;rpc_duration_.*_failure&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_duration_(.+)_failure&quot;)
      - record: geth_rpc_requests_success_count
        expr: label_replace({__name__=~&quot;rpc_duration_.*_success_count&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_duration_(.+)_success_count&quot;)
      - record: geth_rpc_requests_failure_count
        expr: label_replace({__name__=~&quot;rpc_duration_.*_failure_count&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_duration_(.+)_failure_count&quot;)
      - record: rpc_count
        expr: label_replace({__name__=~&quot;rpc_count_.*&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_count_(.+)&quot;)
      - record: geth_rpc_success
        expr: label_replace({__name__=~&quot;rpc_success_.*&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_success_(.+)&quot;)
      - record: geth_rpc_failure
        expr: label_replace({__name__=~&quot;rpc_failure_.*&quot;}, &quot;method&quot;, &quot;\\<span class="token variable">$1</span>&quot;, &quot;__name__&quot;, &quot;rpc_failure_(.+)&quot;)
EOF</span>

<span class="token comment"># Create Docker Compose file for Prometheus and Grafana</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span>docker-compose.yml <span class="token operator">&lt;&lt;</span><span class="token string">EOF
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - &quot;9090:9090&quot;
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    ports:
      - &quot;3000:3000&quot;
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  prometheus-data:
  grafana-storage:
EOF</span>

<span class="token comment"># Start Prometheus and Grafana</span>
info <span class="token string">&quot;Starting Prometheus and Grafana containers...&quot;</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>

<span class="token comment"># Final status message</span>
success <span class="token string">&quot;Setup complete. Prometheus is running on port 9090 and Grafana on port 3000.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新的服务器上跑的结果。</p><p><img src="`+I+'" alt="screenshot2024-11-06 17.51.29"></p><h2 id="geth增加新指标" tabindex="-1"><a class="header-anchor" href="#geth增加新指标" aria-hidden="true">#</a> geth增加新指标</h2><h3 id="system-metrics" tabindex="-1"><a class="header-anchor" href="#system-metrics" aria-hidden="true">#</a> system metrics</h3>',39),Z={href:"https://github.com/shirou/gopsutil",target:"_blank",rel:"noopener noreferrer"},nn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> metrics

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;github.com/ethereum/go-ethereum/log&quot;</span>
    cpuv4 <span class="token string">&quot;github.com/shirou/gopsutil/v4/cpu&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// ReadScutumCPUStats retrieves the current CPU stats.</span>
<span class="token keyword">func</span> <span class="token function">ReadScutumCPUStats</span><span class="token punctuation">(</span>stats <span class="token operator">*</span>CPUStats<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// passing false to request all cpu times</span>
    timeStats<span class="token punctuation">,</span> err <span class="token operator">:=</span> cpuv4<span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Could not read cpu stats&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
       <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>timeStats<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
       log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Empty cpu stats&quot;</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// requesting all cpu times will always return an array with only one time stats entry</span>
    timeStat <span class="token operator">:=</span> timeStats<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    stats<span class="token punctuation">.</span>GlobalTime <span class="token operator">=</span> timeStat<span class="token punctuation">.</span>User <span class="token operator">+</span> timeStat<span class="token punctuation">.</span>Nice <span class="token operator">+</span> timeStat<span class="token punctuation">.</span>System
    stats<span class="token punctuation">.</span>GlobalWait <span class="token operator">=</span> timeStat<span class="token punctuation">.</span>Iowait
    stats<span class="token punctuation">.</span>LocalTime <span class="token operator">=</span> <span class="token function">getProcessCPUTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> metrics

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;github.com/shirou/gopsutil/v4/disk&quot;</span>
    <span class="token string">&quot;github.com/shirou/gopsutil/v4/mem&quot;</span>
    <span class="token string">&quot;github.com/shirou/gopsutil/v4/process&quot;</span>
    <span class="token string">&quot;os&quot;</span>
    <span class="token string">&quot;os/exec&quot;</span>
    <span class="token string">&quot;runtime/metrics&quot;</span>
    <span class="token string">&quot;runtime/pprof&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
    <span class="token string">&quot;strings&quot;</span>
    <span class="token string">&quot;syscall&quot;</span>
    <span class="token string">&quot;time&quot;</span>

    <span class="token string">&quot;github.com/ethereum/go-ethereum/log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> runtimeStats <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    GCPauses     <span class="token operator">*</span>metrics<span class="token punctuation">.</span>Float64Histogram
    GCAllocBytes <span class="token builtin">uint64</span>
    GCFreedBytes <span class="token builtin">uint64</span>

    MemTotal     <span class="token builtin">uint64</span>
    HeapObjects  <span class="token builtin">uint64</span>
    HeapFree     <span class="token builtin">uint64</span>
    HeapReleased <span class="token builtin">uint64</span>
    HeapUnused   <span class="token builtin">uint64</span>

    Goroutines   <span class="token builtin">uint64</span>
    SchedLatency <span class="token operator">*</span>metrics<span class="token punctuation">.</span>Float64Histogram
<span class="token punctuation">}</span>

<span class="token keyword">var</span> runtimeSamples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>metrics<span class="token punctuation">.</span>Sample<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/gc/pauses:seconds&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// histogram</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/gc/heap/allocs:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/gc/heap/frees:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/memory/classes/total:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/memory/classes/heap/objects:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/memory/classes/heap/free:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/memory/classes/heap/released:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/memory/classes/heap/unused:bytes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/sched/goroutines:goroutines&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;/sched/latencies:seconds&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// histogram</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ReadRuntimeStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>runtimeStats <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>runtimeStats<span class="token punctuation">)</span>
    <span class="token function">readRuntimeStats</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r
<span class="token punctuation">}</span>

<span class="token comment">// CollectSystemMetrics 使用 gopsutil 收集系统信息：cpu, disk and memory.</span>
<span class="token keyword">func</span> <span class="token function">CollectSystemMetrics</span><span class="token punctuation">(</span>refresh time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Create the various data collectors</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>
       cpustats  <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>CPUStats<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
       diskstats <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>ScutumDiskStats<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
       rstats    <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>runtimeStats<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token comment">// Define the various metrics to collect</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>
       cpuSysLoad       <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/sysload&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuSysWait       <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/syswait&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuProcLoad      <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/procload&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuSysLoadTotal  <span class="token operator">=</span> <span class="token function">GetOrRegisterCounterFloat64</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/sysload/total&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuSysWaitTotal  <span class="token operator">=</span> <span class="token function">GetOrRegisterCounterFloat64</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/syswait/total&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuProcLoadTotal <span class="token operator">=</span> <span class="token function">GetOrRegisterCounterFloat64</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/procload/total&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuThreads       <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/threads&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       cpuGoroutines    <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/cpu/goroutines&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>

       memTotal     <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/memory/total&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       memFree      <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/memory/free&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       memAvailable <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/memory/available&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       memUsed      <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/memory/used&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       memGethUsed  <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/memory/gethused&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>

       diskReadCounter  <span class="token operator">=</span> <span class="token function">GetOrRegisterCounter</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk/readcount&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       diskWriteCounter <span class="token operator">=</span> <span class="token function">GetOrRegisterCounter</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk/writecount&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       readBytes        <span class="token operator">=</span> <span class="token function">GetOrRegisterCounter</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk/readbytes&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       writeBytes       <span class="token operator">=</span> <span class="token function">GetOrRegisterCounter</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk/writebytes&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token comment">// 使用 pgrep 查找进程名为 geth-linux 的进程 PID</span>
    cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;pgrep&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;geth-linux&quot;</span><span class="token punctuation">)</span>
    output<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;未找到进程或发生错误:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
       <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 去除输出中的换行符</span>
    pidStr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>
    pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>pidStr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;geth-linux 进程 pid 解析失败&quot;</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;geth-linux 进程的 PID 是: %v\\n&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span>

    <span class="token keyword">var</span> mountDirs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
    gethProcess<span class="token punctuation">,</span> err <span class="token operator">:=</span> process<span class="token punctuation">.</span><span class="token function">NewProcess</span><span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       gethProcess <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取进程启动命令行</span>
    <span class="token keyword">if</span> gethProcess <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       workingDir<span class="token punctuation">,</span> err <span class="token operator">:=</span> gethProcess<span class="token punctuation">.</span><span class="token function">Cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          mountDirs <span class="token operator">=</span> <span class="token function">extractMountDir</span><span class="token punctuation">(</span>workingDir<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> lastCollectTime time<span class="token punctuation">.</span>Time

    <span class="token comment">// Iterate loading the different stats and updating the meters.</span>
    now<span class="token punctuation">,</span> prev <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    <span class="token keyword">for</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> now<span class="token punctuation">,</span> prev <span class="token operator">=</span> prev<span class="token punctuation">,</span> now <span class="token punctuation">{</span>
       <span class="token comment">// Gather CPU times.</span>
       <span class="token function">ReadScutumCPUStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpustats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>
       collectTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       secondsSinceLastCollect <span class="token operator">:=</span> collectTime<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>lastCollectTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       lastCollectTime <span class="token operator">=</span> collectTime
       <span class="token keyword">if</span> secondsSinceLastCollect <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
          sysLoad <span class="token operator">:=</span> cpustats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>GlobalTime <span class="token operator">-</span> cpustats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>GlobalTime
          sysWait <span class="token operator">:=</span> cpustats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>GlobalWait <span class="token operator">-</span> cpustats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>GlobalWait
          procLoad <span class="token operator">:=</span> cpustats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>LocalTime <span class="token operator">-</span> cpustats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>LocalTime
          <span class="token comment">// Convert to integer percentage.</span>
          cpuSysLoad<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>sysLoad <span class="token operator">/</span> secondsSinceLastCollect <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          cpuSysWait<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>sysWait <span class="token operator">/</span> secondsSinceLastCollect <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          cpuProcLoad<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>procLoad <span class="token operator">/</span> secondsSinceLastCollect <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token comment">// increment counters (ms)</span>
          cpuSysLoadTotal<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>sysLoad<span class="token punctuation">)</span>
          cpuSysWaitTotal<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>sysWait<span class="token punctuation">)</span>
          cpuProcLoadTotal<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>procLoad<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// Threads</span>
       <span class="token keyword">if</span> gethProcess <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          threads<span class="token punctuation">,</span> err <span class="token operator">:=</span> gethProcess<span class="token punctuation">.</span><span class="token function">NumThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
             cpuThreads<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          memoryInfo<span class="token punctuation">,</span> err <span class="token operator">:=</span> gethProcess<span class="token punctuation">.</span><span class="token function">MemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
             memGethUsed<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>memoryInfo<span class="token punctuation">.</span>RSS<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// Go runtime metrics</span>
       <span class="token function">readScutumRuntimeStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>
       cpuGoroutines<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>rstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>Goroutines<span class="token punctuation">)</span><span class="token punctuation">)</span>

       virtualMemory<span class="token punctuation">,</span> err <span class="token operator">:=</span> mem<span class="token punctuation">.</span><span class="token function">VirtualMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          memAvailable<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>virtualMemory<span class="token punctuation">.</span>Available<span class="token punctuation">)</span><span class="token punctuation">)</span>
          memFree<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>virtualMemory<span class="token punctuation">.</span>Free<span class="token punctuation">)</span><span class="token punctuation">)</span>
          memUsed<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>virtualMemory<span class="token punctuation">.</span>Used<span class="token punctuation">)</span><span class="token punctuation">)</span>
          memTotal<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>virtualMemory<span class="token punctuation">.</span>Total<span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// Disk</span>
       <span class="token function">collectDiskMetrics</span><span class="token punctuation">(</span>mountDirs<span class="token punctuation">)</span>
       <span class="token keyword">if</span> <span class="token function">ReadScutumDiskStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>diskstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          diskReadCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>diskstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>ReadCount <span class="token operator">-</span> diskstats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>ReadCount<span class="token punctuation">)</span>
          diskWriteCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>diskstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>WriteCount <span class="token operator">-</span> diskstats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>WriteCount<span class="token punctuation">)</span>
          readBytes<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>diskstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>ReadBytes <span class="token operator">-</span> diskstats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>ReadBytes<span class="token punctuation">)</span>
          writeBytes<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>diskstats<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>WriteBytes <span class="token operator">-</span> diskstats<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>WriteBytes<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>

       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>refresh<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">collectDiskMetrics</span><span class="token punctuation">(</span>mounts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> mount <span class="token operator">:=</span> <span class="token keyword">range</span> mounts <span class="token punctuation">{</span>
       k <span class="token operator">:=</span> <span class="token string">&quot;&quot;</span>
       <span class="token keyword">if</span> mount <span class="token operator">==</span> <span class="token string">&quot;/&quot;</span> <span class="token punctuation">{</span>
          k <span class="token operator">=</span> <span class="token string">&quot;/bscdev&quot;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> mount <span class="token operator">==</span> <span class="token string">&quot;/mnt&quot;</span> <span class="token punctuation">{</span>
          k <span class="token operator">=</span> <span class="token string">&quot;/ethdev&quot;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>mount<span class="token punctuation">,</span> <span class="token string">&quot;/mnt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          k <span class="token operator">=</span> mount<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">var</span> <span class="token punctuation">(</span>
          diskTotal <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk&quot;</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">&quot;/total&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
          diskUsed  <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk&quot;</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">&quot;/used&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
          diskFree  <span class="token operator">=</span> <span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span><span class="token string">&quot;scutum/system/disk&quot;</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">&quot;/free&quot;</span><span class="token punctuation">,</span> DefaultRegistry<span class="token punctuation">)</span>
       <span class="token punctuation">)</span>
       <span class="token comment">// Disk</span>
       diskUsage<span class="token punctuation">,</span> err <span class="token operator">:=</span> disk<span class="token punctuation">.</span><span class="token function">Usage</span><span class="token punctuation">(</span>mount<span class="token punctuation">)</span>
       <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          diskTotal<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>diskUsage<span class="token punctuation">.</span>Total<span class="token punctuation">)</span><span class="token punctuation">)</span>
          diskUsed<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>diskUsage<span class="token punctuation">.</span>Used<span class="token punctuation">)</span><span class="token punctuation">)</span>
          diskFree<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>diskUsage<span class="token punctuation">.</span>Free<span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">extractMountDir</span><span class="token punctuation">(</span>workingDir <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    partitions<span class="token punctuation">,</span> err <span class="token operator">:=</span> disk<span class="token punctuation">.</span><span class="token function">Partitions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> mounts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> partition <span class="token operator">:=</span> <span class="token keyword">range</span> partitions <span class="token punctuation">{</span>
       <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;/root/geth.fast&quot;</span><span class="token punctuation">,</span> workingDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// bsc dev</span>
          <span class="token keyword">if</span> partition<span class="token punctuation">.</span>Mountpoint <span class="token operator">==</span> <span class="token string">&quot;/&quot;</span> <span class="token punctuation">{</span>
             mounts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>mounts<span class="token punctuation">,</span> partition<span class="token punctuation">.</span>Mountpoint<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;/mnt/data&quot;</span><span class="token punctuation">,</span> workingDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// eth dev</span>
          <span class="token keyword">if</span> partition<span class="token punctuation">.</span>Mountpoint <span class="token operator">==</span> <span class="token string">&quot;/mnt&quot;</span> <span class="token punctuation">{</span>
             mounts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>mounts<span class="token punctuation">,</span> partition<span class="token punctuation">.</span>Mountpoint<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>partition<span class="token punctuation">.</span>Mountpoint<span class="token punctuation">,</span> <span class="token string">&quot;/mnt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             mounts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>mounts<span class="token punctuation">,</span> partition<span class="token punctuation">.</span>Mountpoint<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mounts
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">readScutumRuntimeStats</span><span class="token punctuation">(</span>v <span class="token operator">*</span>runtimeStats<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    metrics<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>runtimeSamples<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> runtimeSamples <span class="token punctuation">{</span>
       <span class="token comment">// Skip invalid/unknown metrics. This is needed because some metrics</span>
       <span class="token comment">// are unavailable in older Go versions, and attempting to read a &#39;bad&#39;</span>
       <span class="token comment">// metric panics.</span>
       <span class="token keyword">if</span> s<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> metrics<span class="token punctuation">.</span>KindBad <span class="token punctuation">{</span>
          <span class="token keyword">continue</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">switch</span> s<span class="token punctuation">.</span>Name <span class="token punctuation">{</span>
       <span class="token keyword">case</span> <span class="token string">&quot;/sched/goroutines:goroutines&quot;</span><span class="token punctuation">:</span>
          v<span class="token punctuation">.</span>Goroutines <span class="token operator">=</span> s<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ScutumDiskStats <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ReadCount  <span class="token builtin">int64</span> <span class="token comment">// Number of read operations executed</span>
    ReadBytes  <span class="token builtin">int64</span> <span class="token comment">// Total number of bytes read (include disk cache)</span>
    WriteCount <span class="token builtin">int64</span> <span class="token comment">// Number of write operations executed</span>
    WriteBytes <span class="token builtin">int64</span> <span class="token comment">// Total number of byte written</span>
<span class="token punctuation">}</span>

<span class="token comment">// ReadScutumDiskStats retrieves the disk IO stats for whole system disk.</span>
<span class="token keyword">func</span> <span class="token function">ReadScutumDiskStats</span><span class="token punctuation">(</span>stats <span class="token operator">*</span>ScutumDiskStats<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    counters<span class="token punctuation">,</span> err <span class="token operator">:=</span> disk<span class="token punctuation">.</span><span class="token function">IOCounters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取 disk IOCounters 失败&quot;</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> totalReadCount<span class="token punctuation">,</span> totalWriteCount<span class="token punctuation">,</span> totalReadBytes<span class="token punctuation">,</span> totalWriteBytes <span class="token builtin">uint64</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> counter <span class="token operator">:=</span> <span class="token keyword">range</span> counters <span class="token punctuation">{</span>
       totalReadCount <span class="token operator">+=</span> counter<span class="token punctuation">.</span>ReadCount
       totalReadBytes <span class="token operator">+=</span> counter<span class="token punctuation">.</span>ReadBytes
       totalWriteCount <span class="token operator">+=</span> counter<span class="token punctuation">.</span>WriteCount
       totalWriteBytes <span class="token operator">+=</span> counter<span class="token punctuation">.</span>WriteBytes
    <span class="token punctuation">}</span>
    stats<span class="token punctuation">.</span>ReadCount <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>totalReadCount<span class="token punctuation">)</span>
    stats<span class="token punctuation">.</span>ReadBytes <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>totalReadBytes<span class="token punctuation">)</span>
    stats<span class="token punctuation">.</span>WriteCount <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>totalWriteCount<span class="token punctuation">)</span>
    stats<span class="token punctuation">.</span>WriteBytes <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>totalWriteBytes<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api-metrics" tabindex="-1"><a class="header-anchor" href="#api-metrics" aria-hidden="true">#</a> api metrics</h3><p>这个可以看作是个rpc的处理函数，可以看到他runMethod之后进行了metrics的统计。我们可以在这里分析成功和失败的请求的个数。也就是<code>newRPCFailureGauge(msg.Method).Inc(1)</code>和<code>newRPCSuccessGauge(msg.Method).Inc(1)</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// handleCall processes method calls.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>handler<span class="token punctuation">)</span> <span class="token function">handleCall</span><span class="token punctuation">(</span>cp <span class="token operator">*</span>callProc<span class="token punctuation">,</span> msg <span class="token operator">*</span>jsonrpcMessage<span class="token punctuation">)</span> <span class="token operator">*</span>jsonrpcMessage <span class="token punctuation">{</span>
    <span class="token keyword">if</span> msg<span class="token punctuation">.</span><span class="token function">isSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">handleSubscribe</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> callb <span class="token operator">*</span>callback
    <span class="token keyword">if</span> msg<span class="token punctuation">.</span><span class="token function">isUnsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       callb <span class="token operator">=</span> h<span class="token punctuation">.</span>unsubscribeCb
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       callb <span class="token operator">=</span> h<span class="token punctuation">.</span>reg<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> callb <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">errorResponse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>methodNotFoundError<span class="token punctuation">{</span>method<span class="token punctuation">:</span> msg<span class="token punctuation">.</span>Method<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    args<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parsePositionalArguments</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Params<span class="token punctuation">,</span> callb<span class="token punctuation">.</span>argTypes<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">errorResponse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>invalidParamsError<span class="token punctuation">{</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    answer <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">runMethod</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> callb<span class="token punctuation">,</span> args<span class="token punctuation">)</span>

    <span class="token comment">// Collect the statistics for RPC calls if metrics is enabled.</span>
    <span class="token comment">// We only care about pure rpc call. Filter out subscription.</span>
    <span class="token keyword">if</span> callb <span class="token operator">!=</span> h<span class="token punctuation">.</span>unsubscribeCb <span class="token punctuation">{</span>
       rpcRequestGauge<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> answer<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          failedRequestGauge<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
          <span class="token function">newRPCFailureGauge</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          successfulRequestGauge<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
          <span class="token function">newRPCSuccessGauge</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
       rpcServingTimer<span class="token punctuation">.</span><span class="token function">UpdateSince</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>
       <span class="token function">newRPCRequestGauge</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token function">updateServeTimeHistogram</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> answer<span class="token punctuation">.</span>Error <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> answer
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newRPCRequestGauge</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">)</span> metrics<span class="token punctuation">.</span>Gauge <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc/count/%s&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span>
	<span class="token keyword">return</span> metrics<span class="token punctuation">.</span><span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newRPCSuccessGauge</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">)</span> metrics<span class="token punctuation">.</span>Gauge <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc/success/%s&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span>
	<span class="token keyword">return</span> metrics<span class="token punctuation">.</span><span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newRPCFailureGauge</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">)</span> metrics<span class="token punctuation">.</span>Gauge <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc/failure/%s&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span>
	<span class="token keyword">return</span> metrics<span class="token punctuation">.</span><span class="token function">GetOrRegisterGauge</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个指标也对了rules中的最后两条rules。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- record: geth_rpc_success
  expr: label_replace({__name__=~&quot;rpc_success_.*&quot;}, &quot;method&quot;, &quot;$1&quot;, &quot;__name__&quot;, &quot;rpc_success_(.+)&quot;)
- record: geth_rpc_failure
  expr: label_replace({__name__=~&quot;rpc_failure_.*&quot;}, &quot;method&quot;, &quot;$1&quot;, &quot;__name__&quot;, &quot;rpc_failure_(.+)&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，通过rate函数就可以查询最近一段时间内的接口请求个数的增长情况。</p>`,8);function sn(an,tn){const a=o("ExternalLinkIcon");return c(),i("div",null,[T,n("p",null,[s("记录在测试服务器上部署promethues和grafana的控制面板的过程，"),n("a",U,[s("geth"),t(a)]),s("。")]),N,n("p",null,[s("只需要在启动的时候加上开启参数就行，可以看"),n("a",O,[s("文档"),t(a)])]),A,n("p",null,[s("具体的修改规则定义可以看"),n("a",L,[s("文档"),t(a)])]),n("p",null,[n("a",E,[s("docker启动prometheus"),t(a)])]),W,n("p",null,[n("a",B,[s("官网"),t(a)]),s(",这个"),n("a",F,[s("更好"),t(a)])]),z,n("p",null,[s("这里不能填localhost，和prometheus的配置一样，因为这个是在容器中运行的，用的网络和不互通，所以必须要指定ip，不然需要去"),n("a",H,[s("配置docker的网络"),t(a)]),s("。")]),V,j,K,Y,n("p",null,[s("然后就可以去dashboards去创建一个控制面板了，可以直接导入"),n("a",J,[s("这个"),t(a)]),s("，然后选择刚刚配置好的数据源，就可以看到如下："),Q]),X,n("p",null,[s("go语言的监测库-"),n("a",Z,[s("gopsutil"),t(a)])]),nn])}const pn=p(M,[["render",sn],["__file","monitoring.html.vue"]]);export{pn as default};
