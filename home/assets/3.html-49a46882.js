import{_ as n,o as s,c as a,a as p}from"./app-0f3922f1.js";const t="/home/assets/image-20220223225057510-0aca3484.png",e="/home/assets/image-20220224131310628-be7513f1.png",o="/home/assets/image-20220225111845410-16a5b542.png",i={},c=p(`<h1 id="js高级知识" tabindex="-1"><a class="header-anchor" href="#js高级知识" aria-hidden="true">#</a> JS高级知识</h1><h2 id="_1、函数的prototype" tabindex="-1"><a class="header-anchor" href="#_1、函数的prototype" aria-hidden="true">#</a> 1、函数的prototype</h2><p>每个函数都有一个prototype属性，它默认指向一个Object空对象(即称为:原型对象)</p><p>原型对象中有一个属性constructor,它指向函数对象</p><p>给原型对象添加属性(一般都是方法)</p><p>作用:函数的所有实例对象自动拥有原型中的属性(方法)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function <span class="token comment">// true</span>

<span class="token comment">// 为原型添加方法并调用</span>
<span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Function本身是自己的实例</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__  <span class="token comment">//true</span>
<span class="token comment">// 隐式原型链尽头是Object,而Object没有隐式原型，Object.__proto__=n</span>
<span class="token comment">// Object.__proto__ = Function.prototype</span>
<span class="token comment">// Object.prototype.__proto__ = null;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+t+'" alt="image-20220223225057510" style="zoom:50%;"><img src="'+e+`" alt="image-20220224131310628" style="zoom:67%;"><h2 id="_2、显示原型和隐式原型" tabindex="-1"><a class="header-anchor" href="#_2、显示原型和隐式原型" aria-hidden="true">#</a> 2、显示原型和隐式原型</h2><p>每个函数function都有一个<code>prototype</code>，即显式原型(属性)</p><p>每个实例对象都有一个<code>__proto__</code>，可称为隐式原型(属性)</p><p>对象的隐式原型的值 === 对应构造函数的显式原型的值</p><p><strong>给显示原型添加方法，实例对象可以直接调用（通过隐式原型）</strong></p><p>总结:</p><p>函数的<code>prototype</code>属性:在定义函数时自动添加的，默认值是一个空0bject对象</p><p>对象的<code>__proto__</code>属性:创建对象时自动添加的，默认值为构造函数的<code>prototype</code>属性值</p><p>程序员能直接操作显式原型，但不能直接操作隐式原型(ES6之前)</p><h2 id="_3、执行上下文" tabindex="-1"><a class="header-anchor" href="#_3、执行上下文" aria-hidden="true">#</a> 3、执行上下文</h2><h3 id="全局执行上下文" tabindex="-1"><a class="header-anchor" href="#全局执行上下文" aria-hidden="true">#</a> 全局执行上下文</h3><p>在执行全局代码前将window确定为全局执行上下文</p><p>对全局数据进行如下预处理：</p><ul><li>var定义的全局变量--&gt;undefined，添加为window的属性</li><li>function声明的全局函数==&gt;赋值(fun)，添加为window的方法==</li><li>==this==&gt;赋值(window)</li></ul><p>最终开始执行全局代码</p><h3 id="函数执行上下文" tabindex="-1"><a class="header-anchor" href="#函数执行上下文" aria-hidden="true">#</a> 函数执行上下文</h3><p>在调用函数，准备<strong>执行</strong>函数体之前，创建对应的函数执行上下文对象</p><p>对局部数据进行如下预处理：</p><ul><li>形参变量 ==&gt; 赋值(实参) ==&gt; 添加为执行上下文的属性</li><li>arguments ==&gt; 赋值(实参列表)，添加为执行上下文的属性</li><li>var定义的局部变量 ==&gt; undefined，添加为执行上下文的属性</li><li>function声明的函数 ==&gt; 赋值(fun)，添加为执行上下文的方法</li><li>this ==&gt; 赋值(调用函数的对象)</li></ul><p>最终开始执行函数体代码</p><h3 id="执行上下文栈" tabindex="-1"><a class="header-anchor" href="#执行上下文栈" aria-hidden="true">#</a> 执行上下文栈</h3><p>1.在全局代码执行前,JS引擎就会创建一个栈来存储管理所有的执行上下文对象</p><p>2.在全局执行上下文(window)确定后,将其添加到栈中(压栈)</p><p>3.在函数执行上下文创建后,将其添加到栈中(压栈)</p><p>4.在当前函教执行完后,将栈顶的对象移除(出栈)</p><p>5.当所有的代码执行完后,栈中只剩下window</p><h2 id="_4、作用域和执行上下文" tabindex="-1"><a class="header-anchor" href="#_4、作用域和执行上下文" aria-hidden="true">#</a> 4、作用域和执行上下文</h2><p>区别1</p><ul><li>全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时</li><li>全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建</li><li>函数执行上下文是在调用函数时，函数体代码执行之前创建</li></ul><p>区别2</p><ul><li>作用域是<strong>静态</strong>的，只要函数定义好了就一直存在，且不会再变化</li><li>执行上下文是动态的，调用函数时创建，函数调用结束时就会<strong>自动释放</strong></li></ul><p>联系</p><ul><li>上下文环境(对象)是从属于所在的作用域</li><li>全局上下文环境 ==&gt; 全局作用域</li><li>函数上下文环境 ==&gt; 对应的函数使用域</li></ul><h2 id="_5、闭包" tabindex="-1"><a class="header-anchor" href="#_5、闭包" aria-hidden="true">#</a> 5、闭包</h2><h3 id="_1-如何产生闭包" tabindex="-1"><a class="header-anchor" href="#_1-如何产生闭包" aria-hidden="true">#</a> 1 如何产生闭包?</h3><p>当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时，就产生了闭包</p><h3 id="_2-闭包到底是什么" tabindex="-1"><a class="header-anchor" href="#_2-闭包到底是什么" aria-hidden="true">#</a> 2 闭包到底是什么?</h3><p>理解一:闭包是嵌套的内部函数(绝大部分人)</p><p>理解二:包含被引用变量(函数)的对象(极少数人)</p><p>注意:闭包存在于嵌套的内部函数中</p><h3 id="_3-产生闭包的条件" tabindex="-1"><a class="header-anchor" href="#_3-产生闭包的条件" aria-hidden="true">#</a> 3 产生闭包的条件?</h3><p>函数嵌套</p><p>内部函数引用了外部函数的数据(变量/函数)</p><h3 id="_4-闭包作用" tabindex="-1"><a class="header-anchor" href="#_4-闭包作用" aria-hidden="true">#</a> 4 闭包作用</h3><p>使用函数内部的变量在函数执行完后，仍然存活在内存中(延长了局部变量的生命周期)</p><p>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</p><h3 id="_5-常见的闭包" tabindex="-1"><a class="header-anchor" href="#_5-常见的闭包" aria-hidden="true">#</a> 5 常见的闭包</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1．将函数作为另一个函数的返回值</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token operator">++</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fn2
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//3</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//4</span>
<span class="token comment">// 闭包中只有一个a属性</span>

<span class="token comment">// 2．将函数作为实参传递给另一个函数调用</span>
<span class="token keyword">function</span> <span class="token function">showDeLay</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-闭包的生命周期" tabindex="-1"><a class="header-anchor" href="#_6-闭包的生命周期" aria-hidden="true">#</a> 6 闭包的生命周期</h3><p>产生：在嵌套内部函数<strong>定义执行完</strong>时就产生了(不是在调用)</p><p>死亡：在嵌套的内部函数成为拉圾对象时</p><h3 id="_7-闭包应用-定义js模块" tabindex="-1"><a class="header-anchor" href="#_7-闭包应用-定义js模块" aria-hidden="true">#</a> 7 闭包应用-定义js模块</h3><p>模块：</p><ul><li>具有特定功能的js文件</li><li>将所有的数据和功能都封装在一个函数内部(私有的)</li><li>只向外暴露一个包含n个方法的对象或函数</li></ul><p>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模块化方法一</span>
<span class="token keyword">function</span> <span class="token function">myModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 私有数据</span>
    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;My atguigu&#39;</span>
    <span class="token comment">// 操作数据的函数</span>
    <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dosomething()&#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">dootherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;do0therthing()&quot;</span><span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//向外暴露对象(给外部使用的方法)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
    	<span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>
        <span class="token literal-property property">dootherthing</span><span class="token operator">:</span> dootherthing
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 模块化方式二</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//私有数据</span>
    <span class="token keyword">var</span> msg <span class="token operator">=</span> &quot;My atguigu&#39;操作数据的函数
    <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething()&#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">dootherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dootherthing()&#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//向外暴露对象(给外部使用的方法)</span>
    window<span class="token punctuation">.</span>myModule2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    	<span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>
        <span class="token literal-property property">doOtherthing</span><span class="token operator">:</span> dootherthing
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">/*
前者引入之后还需要调用函数才会产生闭包，才能调用相关导出的模块化函数
后者不需要引入即可直接调用
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-闭包缺点" tabindex="-1"><a class="header-anchor" href="#_8-闭包缺点" aria-hidden="true">#</a> 8 闭包缺点</h3><p>缺点</p><ul><li>函数执行完后，函数内的局部变量没有释放</li><li>占用内存时间会变长容易造成内存泄露</li></ul><p>解决</p><ul><li>能不用闭包就不用</li><li>及时释放（赋值null），让内部函数成为垃圾对象，进行垃圾回收</li></ul><h3 id="_9-利用闭包遍历绑定按钮事件" tabindex="-1"><a class="header-anchor" href="#_9-利用闭包遍历绑定按钮事件" aria-hidden="true">#</a> 9 利用闭包遍历绑定按钮事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 利用闭包</span>
<span class="token comment">// 这样就可以不需要为btn对象添加index属性了，可以直接利用闭包保存i</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">=</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">var</span> btn <span class="token operator">=</span> btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> &#39;个&quot;<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、内存溢出和泄露" tabindex="-1"><a class="header-anchor" href="#_6、内存溢出和泄露" aria-hidden="true">#</a> 6、内存溢出和泄露</h2><h3 id="内存溢出" tabindex="-1"><a class="header-anchor" href="#内存溢出" aria-hidden="true">#</a> 内存溢出</h3><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时，就出抛出内存溢出的错误</li></ul><h3 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露" aria-hidden="true">#</a> 内存泄露</h3><ul><li>占用的内存没有及时释放</li><li>内存泄露积累多了就容易导致内存溢出</li></ul><h3 id="常见的内存泄露" tabindex="-1"><a class="header-anchor" href="#常见的内存泄露" aria-hidden="true">#</a> 常见的内存泄露:</h3><ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul><h2 id="_7、对象创建模式" tabindex="-1"><a class="header-anchor" href="#_7、对象创建模式" aria-hidden="true">#</a> 7、对象创建模式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*方式一:object构造函数模式
*套路:先创建空object对象，再动态添加属性/方法
*适用场景:起始时不确定对象内部数据
*问题:语句太多
*/</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">;</span>

<span class="token comment">/*方式二:对象字面量模式
*套路:使用{}创建对象，同时指定属性/方法
*适用场景:起始时对象内部数据是确定的
*问题:如创建多个对象,有重复代码
*/</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">xxx</span><span class="token operator">:</span> xxx
<span class="token punctuation">}</span>

<span class="token comment">/*方式三:工厂模式
*套路:通过工厂函数动态创建对象并返回
*适用场景:需要创建多个对象
*问题:对象没有一个具体的类型,都是Object类型
*/</span>
<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">xxx<span class="token punctuation">,</span> xx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">xxx</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
        <span class="token literal-property property">xxx</span><span class="token operator">:</span> xx
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*方式四:自定义构造函数模式
*套路:自定义构造函数，通过new创建对象
*适用场景:需要创建多个类型确定的对象
*问题:每个对象都有相同的数据，浪费内存
*/</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">xx<span class="token punctuation">,</span> xxx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>xx <span class="token operator">=</span> xx<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*方式六:构造函数+原型的组合模式
*套路:自定义构造函数，属性在函数中初始化，方法添加到原型上
*适用场景:需要创建多个类型确定的对象
*/</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">xx<span class="token punctuation">,</span> xxx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>xx <span class="token operator">=</span> xx<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setXx</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>xx <span class="token operator">=</span> xx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、继承模式" tabindex="-1"><a class="header-anchor" href="#_8、继承模式" aria-hidden="true">#</a> 8、继承模式</h2><p>原型链 + 借用构造函数的组合继承</p><p>1．利用原型链实现对父类型对象的方法继承</p><p>2．利用call()借用父类型构建函数初始化相同属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
	<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span>，name，age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于: this.Person(name，age),为了得到属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类型原型指向父类型的实例，为了能看到父类型的方法</span>
student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span> <span class="token comment">// 修正constructor属性，否则会指向父类型</span>
student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setPrice</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、线程机制和事件机制" tabindex="-1"><a class="header-anchor" href="#_9、线程机制和事件机制" aria-hidden="true">#</a> 9、线程机制和事件机制</h2><h3 id="浏览器内核模块组成" tabindex="-1"><a class="header-anchor" href="#浏览器内核模块组成" aria-hidden="true">#</a> 浏览器内核模块组成</h3><h4 id="主线程" tabindex="-1"><a class="header-anchor" href="#主线程" aria-hidden="true">#</a> 主线程</h4><ul><li>js引擎模块:负责js程序的编译与运行</li><li>html ,css文档解析模块:负责页面文本的解析</li><li>DOM/CSS模块:负责dom/css在内存中的相关处理</li><li>布局和渲染模块:负责页面的布局和效果的绘制(内存中的对象)</li></ul><h4 id="分线程" tabindex="-1"><a class="header-anchor" href="#分线程" aria-hidden="true">#</a> 分线程</h4><ul><li>定时器模块:负责定时器的管理</li><li>DOM事件响应模块:负责事件的管理</li><li>网络请求模块:负责Ajax请求</li></ul><h3 id="js线程" tabindex="-1"><a class="header-anchor" href="#js线程" aria-hidden="true">#</a> js线程</h3><ul><li>js是单线程执行的(回调函数也是在主线程)</li><li>H5提出了实现多线程的方案:web workers--- &gt;worker</li><li><strong>只能是主线程更新界面</strong></li></ul><h3 id="定时器问题" tabindex="-1"><a class="header-anchor" href="#定时器问题" aria-hidden="true">#</a> 定时器问题</h3><ul><li>定时器并不真正完全定时</li><li>如果在主线程执行了一个长时间的操作，可能导致延时才处理</li></ul><h3 id="事件处理机制" tabindex="-1"><a class="header-anchor" href="#事件处理机制" aria-hidden="true">#</a> 事件处理机制</h3><p>代码分类</p><ul><li>初始化执行代码:包含绑定dom事件监听，设置定时器，发送ajax请求的代码</li><li>回调执行代码:处理回调逻辑</li></ul><p>js引擎执行代码的基本流程:</p><ul><li>初始化代码===&gt;回调代码</li></ul><p>模型的2个重要组成部分:</p><ul><li>事件管理模块 回调队列</li></ul><p>模型的运转流程</p><ul><li>执行初始化代码,将事件回调函数交给对应模块管理</li><li>当事件发生时，管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后(可能要一定时间)，才会遍历读取回调队列中的回调函数执行</li></ul><img src="`+o+`" alt="image-20220225111845410" style="zoom:67%;"><h2 id="经典问题" tabindex="-1"><a class="header-anchor" href="#经典问题" aria-hidden="true">#</a> 经典问题</h2><p><strong>1、undefined 与nuLL的区别?</strong></p><p>undefined代表定义未赋值</p><p>nulLl定义并赋值了，只是值为null</p><p><strong>2、什么时候给变量赋值为null呢?</strong></p><p>初始赋值，表明将要赋值为对象</p><p>结束前,让对象成为垃圾对象(被垃圾回收器回收)</p><p><strong>3、严格区别变量类型与数据类型?</strong></p><p>数据的类型：基本类型&amp;对象类型</p><p>变量的类型(变量内存值的类型)：基本类型:保存就是基本类型的数据&amp;引用类型:保存的是地址值</p><p><strong>4、内存，数据，变量三者之间的关系</strong></p><p>内存用来存储数据的空间</p><p>变量是内存的标识，通过变量找到对应的内存，从而操作数据</p><p><strong>5、在js 调用函数时传递变量参数时，是值传递还是引用传递</strong></p><p>理解1：都是值(基本/地址值)传递</p><p>理解2：可能是值传递，也可能是引用传递(地址值)</p><p><strong>6、IIFE</strong></p><p>全称: ImmediateLy-Invoked Function Expression</p><p>作用</p><ul><li>隐藏实现</li><li>不会污染外部(全局)命名空间</li><li>用它来编码js模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匿名函数自调用</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7、new一个对象背后做了什么</strong></p><ul><li>创建一个空对象</li><li>给对象设置<code>__proto__</code>,值为构造函数对象的prototype属性值</li><li>执行构造函数体(给对象添加属性/方法)</li></ul>`,129),l=[c];function u(r,d){return s(),a("div",null,l)}const v=n(i,[["render",u],["__file","3.html.vue"]]);export{v as default};
