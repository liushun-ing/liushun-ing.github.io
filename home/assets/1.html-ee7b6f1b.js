import{_ as p,r as o,o as i,c as l,b as n,d as s,e as t,a}from"./app-e5ba6616.js";const c={},r=a('<h1 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> Vite</h1><h1 id="什么是构建工具" tabindex="-1"><a class="header-anchor" href="#什么是构建工具" aria-hidden="true">#</a> 什么是构建工具</h1><h2 id="构建工具做了什么" tabindex="-1"><a class="header-anchor" href="#构建工具做了什么" aria-hidden="true">#</a> 构建工具做了什么</h2><p>（浏览器他只认识html, css, js）</p><ol><li>typescript: 如果遇到ts文件我们需要使用tsc将typescript代码转换为js代码</li><li>React/Vue: 安装react-compiler / vue-compiler, 将我们写的jsx文件或者.vue文件转换为render函数</li><li>less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具</li><li>语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法</li><li>体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成体积更小性能更高的文件</li><li>.....</li></ol><p>能够把tsc, react-compiler, less, babel, uglifyjs全部集成到一起，代码一旦变化，自动将tsc, react-compiler, less, babel, uglifyjs全部走一遍 ---&gt; 最终得到js文件，这个东西就叫做<strong>构建工具</strong> 打包: 将我们写的浏览器不认识的代码，交给构建工具进行编译处理的过程就叫做打包, 打包完成以后会给一个浏览器可以认识的文件</p><h2 id="构建工具功能" tabindex="-1"><a class="header-anchor" href="#构建工具功能" aria-hidden="true">#</a> 构建工具功能</h2><ol><li>模块化开发支持: 支持直接从node_modules里引入代码 + 多种模块化支持</li><li>处理代码兼容性: 比如babel语法降级, less,ts 语法转换(<strong>不是构建工具做的, 构建工具将这些语法对应的处理工具集成进来自动化处理</strong>)</li><li>提高项目性能: 压缩文件, <strong>代码分割</strong></li><li>优化开发体验: <ul><li>构建工具会帮你自动监听文件的变化, 当文件变化以后自动帮你调用对应的集成工具进行重新打包, 然后再浏览器重新运行（整个过程叫做热更新, hot replacement</li><li>开发服务器: 跨域的问题, 用react-cli create-react-element vue-cli 解决跨域的问题,</li></ul></li></ol><p>构建工具他让我们可以不用每次都关心代码在浏览器如何运行, 只需要首次给构建工具提供一个配置文件(这个配置文件也不是必须的, 会有默认的处理), 有了这个集成的配置文件以后, 就可以在下次需要更新的时候调用一次对应的命令就好了, 如果再结合热更新, 我们就不需要管任何东西, 这就是构建工具去做的东西。</p><h2 id="主流的构建工具" tabindex="-1"><a class="header-anchor" href="#主流的构建工具" aria-hidden="true">#</a> 主流的构建工具</h2><ul><li>webpack</li><li>vite</li><li>parcel</li><li>esbuild</li><li>rollup</li><li>grunt</li><li>gulp</li></ul><h1 id="vite相较于webpack的优势" tabindex="-1"><a class="header-anchor" href="#vite相较于webpack的优势" aria-hidden="true">#</a> vite相较于webpack的优势</h1>',12),u={href:"https://cn.vitejs.dev/guide/why.html#the-problems",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 这一段代码最终会到浏览器里去运行</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// commonjs 规范</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// es6 module</span>
<span class="token comment">// webpack是允许我们这么写的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack的编译原理, AST 抽象语法分析的工具 分析出你写的这个js文件有哪些导入和导出操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack的一个转换结果</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 入口是index.js</span>
    <span class="token comment">// 通过webpack的配置文件得来的: webpack.config.js ./src/index.js</span>
    modules<span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">(</span>webpack_require<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">webpack_require</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为webpack支持多种模块化, 他一开始必须要统一模块化代码, 所以意味着他需要将所有的依赖全部读一遍 vite不会直接把webpack干翻, vite是基于es modules的, 侧重点不一样, webpack更多的关注兼容性, 而vite关注浏览器端的开发体验 此外，vite的上手难度更低,，webpack的配置是非常多的</p><h1 id="vite脚手架和vite" tabindex="-1"><a class="header-anchor" href="#vite脚手架和vite" aria-hidden="true">#</a> vite脚手架和vite</h1>`,6),v={href:"https://vitejs.dev/guide/#scaffolding-your-first-vite-project",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"yarn create vite",-1),m=a(`<ol><li>帮我们全局安装一个东西: create-vite (vite的脚手架)</li><li>直接运行这个create-vite bin目录的下的一个执行配置</li></ol><p>误区: <strong>认为官网中使用对应yarn create构建项目的过程也是vite在做的事情</strong> create-vite和vite的关系是什么呢？ ---- create-vite内置了vite，就像使用vue-cli 会内置webpack</p><h2 id="预设" tabindex="-1"><a class="header-anchor" href="#预设" aria-hidden="true">#</a> 预设</h2><p>我们自己搭建一个项目: 需要下载vite, vue, post-css, less, babel vue-cli/create-react-app(开发商)给我们提供已经精装修的模板: 把react/vue都下好了, 同时还把配置调整到了最佳实践 create-vite(开发商)给一套模板(一套预设): 下载vite, vue, post-css, less, babel好了, 并且做好了最佳实践的配置</p><h1 id="vite的预加载" tabindex="-1"><a class="header-anchor" href="#vite的预加载" aria-hidden="true">#</a> vite的预加载</h1><h2 id="路径补全" tabindex="-1"><a class="header-anchor" href="#路径补全" aria-hidden="true">#</a> 路径补全</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lodash可能也import了其他的东西</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在处理的过程中如果说看到了有非绝对路径或者相对路径的引用, vite则会尝试开启路径补全</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/.vite/lodash&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lodash可能也import了其他的东西</span>
<span class="token comment">// 开发者工具中捕捉到如下</span>
<span class="token keyword">import</span> __vite__cjsImport0_lodash <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/.vite/deps/lodash.js?v=ebe57916&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vite找寻依赖的过程是自当前目录依次向上查找的过程, 直到搜寻到根目录或者搜寻到对应依赖为止 生产和开发 yarn dev ---&gt; 开发(每次依赖预构建所重新构建的相对路径都是正确的) yarn build ---&gt; vite会全权交给一个叫做rollup的库去完成生产环境的打包</p><h2 id="依赖预构建" tabindex="-1"><a class="header-anchor" href="#依赖预构建" aria-hidden="true">#</a> 依赖预构建</h2><p>首先vite会找到对应的依赖, 然后调用esbuild(对js语法进行处理的一个库), 将其他规范的代码转换成esmodule规范, 然后放到当前目录下的node_modules/.vite/deps, 同时对esmodule规范的各个模块进行统一集成 他解决了3个问题:</p><ol><li>不同的第三方包会有不同的导出格式(这个是vite没法约束人家的事情)</li><li>对路径的处理上可以直接使用.vite/deps, 方便路径重写</li><li>叫做网络多包传输的性能问题(也是原生esmodule规范不敢支持node_modules的原因之一), 有了依赖预构建以后无论他有多少的额外export 和import, vite都会尽可能的将他们进行集成最后只生成一个或者几个模块</li></ol><h1 id="vite环境变量配置" tabindex="-1"><a class="header-anchor" href="#vite环境变量配置" aria-hidden="true">#</a> vite环境变量配置</h1><blockquote><p>环境变量: 会根据当前的代码环境产生值的变化的变量就叫做环境变量</p></blockquote><h2 id="代码环境分类" tabindex="-1"><a class="header-anchor" href="#代码环境分类" aria-hidden="true">#</a> 代码环境分类</h2><ol><li>开发环境</li><li>测试环境</li><li>预发布环境</li><li>灰度环境</li><li>生产环境</li></ol><p>.env: 所有环境都需要用到的环境变量 .env.development: 开发环境需要用到的环境变量(默认情况下vite将我们的开发环境取名为development) .env.production: 生产环境需要用到的环境变量(默认情况下vite将我们的生产环境取名为production) <code>yarn dev --mode development</code> 会将mode设置为development传递进来</p><h2 id="演示代码" tabindex="-1"><a class="header-anchor" href="#演示代码" aria-hidden="true">#</a> 演示代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineConfig<span class="token punctuation">,</span> loadEnv<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> viteBaseConfig <span class="token keyword">from</span> <span class="token string">&quot;./vite.base.config&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> viteDevConfig <span class="token keyword">from</span> <span class="token string">&quot;./vite.dev.config&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> viteProdConfig <span class="token keyword">from</span> <span class="token string">&quot;./vite.prod.config&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 策略模式</span>
<span class="token keyword">const</span> envResolver <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;生产环境&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>viteBaseConfig<span class="token punctuation">,</span> <span class="token operator">...</span>viteProdConfig <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;开发环境&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>viteBaseConfig<span class="token punctuation">,</span> <span class="token operator">...</span>viteProdConfig <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 新配置里是可能会被配置envDir .envA</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是build 还是serve主要取决于我们敲的命令是开启开发环境还是生产环境</span>
    <span class="token comment">// console.log(&quot;process&quot;, process.cwd());</span>
    <span class="token comment">// 当前env文件所在的目录，process.cwd方法: 返回当前node进程的工作目录</span>
    <span class="token comment">// 第二个参数不是必须要使用process.cwd(),</span>
    <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> envResolver<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量处理" tabindex="-1"><a class="header-anchor" href="#环境变量处理" aria-hidden="true">#</a> 环境变量处理</h2><p>在vite中的环境变量处理（服务器端）: vite内置了dotenv这个第三方库 dotenv会自动读取.env文件, 并解析这个文件中的对应环境变量，并将其注入到process对象下(但是vite考虑到和其他配置的一些冲突问题, 他不会直接注入到process对象下) 涉及到vite.config.js中的一些配置:</p><ul><li>root</li><li>envDir: 用来配置当前环境变量的文件地址</li></ul><p>如果，新的配置设置了envDir，那么之前读取的默认路径的.env内容就是无效的，vite给我们提供了一些补偿措施：我们可以调用vite的loadEnv来手动确认env文件 <strong>官网原话：注意 Vite 默认是不加载 .env 文件的，因为这些文件需要在执行完 Vite 配置后才能确定加载哪一个</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> loadEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据当前工作目录中的 \`mode\` 加载 .env 文件</span>
  <span class="token comment">// 设置第三个参数为 &#39;&#39; 来加载所有环境变量，而不管是否有 \`VITE_\` 前缀。</span>
  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// vite 配置</span>
    <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">__APP_ENV__</span><span class="token operator">:</span> env<span class="token punctuation">.</span><span class="token constant">APP_ENV</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们调用loadenv的时候, 他会做如下几件事:</p><ol><li>直接找到.env文件 并解析其中的环境变量 并放进一个对象里</li><li>会将传进来的mode这个变量的值进行拼接: <code>.env.development</code>,  并根据我们提供的目录去取对应的配置文件并进行解析, 并放进一个对象</li><li>我们可以理解为</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> baseEnvConfig <span class="token operator">=</span> 读取<span class="token punctuation">.</span>env的配置
 <span class="token keyword">const</span> modeEnvConfig <span class="token operator">=</span> 读取<span class="token punctuation">.</span>env<span class="token punctuation">.</span>mode相关配置
 <span class="token keyword">const</span> lastEnvConfig <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>baseEnvConfig<span class="token punctuation">,</span> <span class="token operator">...</span>modeEnvConfig <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="客户端使用" tabindex="-1"><a class="header-anchor" href="#客户端使用" aria-hidden="true">#</a> 客户端使用</h2><p>如果是客户端, vite会将对应的环境变量注入到<code>i<wbr>mport.meta.env</code>里去，不需要导入直接是用就好了 vite做了一个拦截, 他为了防止我们将隐私性的变量直接送进<code>i<wbr>mport.meta.env</code>中, 所以他做了一层拦截, 如果你的环境变量不是以<code>VITE_</code>开头的, 他就不会帮你注入到客户端中去, 如果我们想要更改这个前缀, 可以去使用<strong>envPrefix</strong>配置</p><p>补充一个小知识: 为什么vite.config.js可以书写成esmodule的形式, 这是因为vite他在读取这个vite.config.js的时候会率先node去解析文件语法, 如果发现你是esmodule规范会直接将你的esmodule规范进行替换变成commonjs规范</p><h1 id="在vite中处理css" tabindex="-1"><a class="header-anchor" href="#在vite中处理css" aria-hidden="true">#</a> 在vite中处理css</h1><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>vite天生就支持对css文件的直接处理，处理逻辑如下：</p><ol><li>vite在读取到main.js中引用到了Index.css</li><li>直接去使用fs模块去读取index.css中文件内容</li><li>直接创建一个style标签, 将index.css中文件内容直接copy进style标签里</li><li>将style标签插入到index.html的head中</li><li>将该css文件中的内容直接替换为js脚本(方便热更新或者css模块化), 同时设置Content-Type为js 从而让浏览器以JS脚本的形式来执行该css后缀的文件</li></ol><p>类名重复会导致样式被覆盖，在协同开发的时候很容易出现，cssmodule就是来解决这个问题的，原理如下:</p><ol><li>module.css (xxx.module.css命名文件，module是一种约定, 表示需要开启css模块化)</li><li>他会将你的所有类名进行一定规则的替换（将footer 替换成 _footer_i22st_1）</li><li>同时创建一个映射对象{ footer: &quot;_footer_i22st_1&quot; }</li><li>将替换过后的内容塞进style标签里然后放入到head标签中 (能够读到index.html的文件内容)</li><li>将componentA.module.css内容进行全部抹除, 替换成JS脚本</li><li>将创建的映射对象在脚本中进行默认导出</li></ol><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对css的行为进行配置</span>
    <span class="token comment">// modules配置最终会丢给postcss modules</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 是对css模块化的默认行为进行覆盖</span>
        <span class="token literal-property property">localsConvention</span><span class="token operator">:</span> <span class="token string">&quot;camelCaseOnly&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 修改生成的配置对象的key的展示形式(驼峰还是中划线形式)</span>
        <span class="token literal-property property">scopeBehaviour</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置当前的模块化行为是模块化还是全局化 (有hash就是开启了模块化的一个标志, 因为他可以保证产生不同的hash值来控制我们的样式类名不被覆盖)</span>
        <span class="token comment">// generateScopedName: &quot;[name]_[local]_[hash:5]&quot; // https://github.com/webpack/loader-utils#interpolatename</span>
        <span class="token comment">// generateScopedName: (name, filename, css) =&gt; {</span>
        <span class="token comment">//     // name -&gt; 代表的是你此刻css文件中的类名</span>
        <span class="token comment">//     // filename -&gt; 是你当前css文件的绝对路径</span>
        <span class="token comment">//     // css -&gt; 给的就是你当前样式</span>
        <span class="token comment">//     console.log(&quot;name&quot;, name, &quot;filename&quot;, filename, &quot;css&quot;, css); // 这一行会输出在哪？？？ 输出在node</span>
        <span class="token comment">//     // 配置成函数以后, 返回值就决定了他最终显示的类型</span>
        <span class="token comment">//     return \`\${name}_\${Math.random().toString(36).substr(3, 8)}\`;</span>
        <span class="token comment">// }</span>
        <span class="token literal-property property">hashPrefix</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生成hash会根据你的类名 + 一些其他的字符串(文件名 + 他内部随机生成一个字符串)去进行生成, 如果你想要你生成hash更加的独特一点, 你可以配置hashPrefix, 你配置的这个字符串会参与到最终的hash生成, （hash: 只要你的字符串有一个字不一样, 那么生成的hash就完全不一样, 但是只要你的字符串完全一样, 生成的hash就会一样）</span>
        <span class="token literal-property property">globalModulePaths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./componentB.module.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 代表你不想参与到css模块化的路径</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// key + config key代表预处理器的名</span>
        <span class="token literal-property property">less</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 整个的配置对象都会最终给到less的执行参数（全局参数）中去</span>
            <span class="token comment">// 在webpack里就给less-loader去配置就好了</span>
            <span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">globalVars</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 全局变量</span>
                <span class="token literal-property property">mainColor</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devSourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss" aria-hidden="true">#</a> postcss</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>vite天生对postcss有非常良好的支持 postcss的工作: 保证css在执行起来是万无一失的 less，sass等预处理器并不能够解决这些问题:</p><ol><li>对未来css属性的一些使用降级问题</li><li>前缀补全: Google非常卷 --webkit</li></ol><p><strong>都对postcss有一个误区: 他们认为postcss和less sass是差不多级别</strong> 我们写的css代码 --&gt; postcss ---&gt; less(去将语法进行编译(嵌套语法，函数，变量)成原生css) --&gt; 再次对未来的高级css语法进行降级 --&gt; 前缀补全 --&gt; 浏览器客户端 目前来说 less和sass等一系列预处理器的postcss插件已经停止维护了 less插件，<strong>所以业内就产生了一个新的说法: postcss是后处理器</strong> 我们写的js代码 --&gt; babel --&gt; 将最新的ts语法进行转换js语法 --&gt; 做一次语法降级  --&gt; 浏览器客户端去执行 babel --&gt; 帮助我们让js执行起来万无一失</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// es6的写法</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// es3的语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用postcss" tabindex="-1"><a class="header-anchor" href="#使用postcss" aria-hidden="true">#</a> 使用postcss</h3><ol><li>安装依赖</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add postcss-cli postcss -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>书写描述文件postcss.config.js</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 预设环境里面是会包含很多的插件</span>
<span class="token comment">// 语法降级 --&gt; postcss-low-level</span>
<span class="token comment">// 编译插件 --&gt; postcss-compiler</span>
<span class="token comment">// ...</span>
<span class="token keyword">const</span> postcssPresetEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 预设就是帮你一次性的把这些必要的插件都给你装上了</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token comment">/* pluginOptions */</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vite配置文件配置" tabindex="-1"><a class="header-anchor" href="#vite配置文件配置" aria-hidden="true">#</a> vite配置文件配置</h3><p>直接在css.postcss中进行配置, 该属性直接配置的就是postcss的配置（优先级更高），也可以编写postcss.config.js</p><ul><li>postcss-preset-env: 支持css变量和一些未来css语法 自动补全(autoprefixer)</li></ul><h2 id="打包配置" tabindex="-1"><a class="header-anchor" href="#打包配置" aria-hidden="true">#</a> 打包配置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置rollup的一些构建策略</span>
        <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 控制输出</span>
            <span class="token comment">// 在rollup里面, hash代表将你的文件名和文件内容进行组合计算得来的结果</span>
            <span class="token literal-property property">assetFileNames</span><span class="token operator">:</span> <span class="token string">&quot;[hash].[name].[ext]&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">4096000</span><span class="token punctuation">,</span> <span class="token comment">// 4000kb </span>
    <span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 输出目录</span>
    <span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span> <span class="token comment">// 输出目录中的静态资源目录</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite插件" tabindex="-1"><a class="header-anchor" href="#vite插件" aria-hidden="true">#</a> vite插件</h2><p>插件是什么？</p><blockquote><p>vite会在生命周期的不同阶段中去调用不同的插件以达到不同的目的</p></blockquote><h3 id="vite-aliases" tabindex="-1"><a class="header-anchor" href="#vite-aliases" aria-hidden="true">#</a> vite-aliases</h3>`,59),b={href:"https://github.com/subwaytime/vite-aliases",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  	<span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/**/src&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;@assets&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/**/src/assets&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;@components&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/**/src/components&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token function">ViteAliases</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * Relative path to the project directory
	 */</span>
	<span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Prefix symbol for the aliases
	 */</span>
	<span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Allow searching for subdirectories
	 */</span>
	<span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Search depthlevel for subdirectories
	 */</span>
	<span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Creates a Logfile
	 * use \`logPath\` to change the location
	 */</span>
	<span class="token literal-property property">createLog</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Path for Logfile
	 */</span>

	<span class="token literal-property property">logPath</span><span class="token operator">:</span> <span class="token string">&#39;src/logs&#39;</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Create global project directory alias
	 */</span>
	<span class="token literal-property property">createGlobalAlias</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Turns duplicates into camelCased path aliases
	 */</span>
	<span class="token literal-property property">adjustDuplicates</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Used paths in JS/TS configs will now be relative to baseUrl
	 */</span>
	<span class="token literal-property property">useAbsolute</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Adds seperate index paths
	 * approach created by @davidohlin
	 */</span>
	<span class="token literal-property property">useIndexes</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Generates paths in IDE config file
	 * works with JS or TS
	 */</span>
	<span class="token literal-property property">useConfig</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Will generate Paths in tsconfig
	 * used in combination with \`useConfig\`
	 * Typescript will be auto detected
	 */</span>
	<span class="token literal-property property">dts</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/**
	 * Root path of Vite project
	 */</span>
	<span class="token literal-property property">root</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vite-plugin-html" tabindex="-1"><a class="header-anchor" href="#vite-plugin-html" aria-hidden="true">#</a> vite-plugin-html</h3><ul><li>HTML 压缩能力</li><li>EJS 模版能力</li><li>多页应用支持</li><li>支持自定义entry</li><li>支持自定义template</li></ul>`,3),g={href:"https://github.com/vbenjs/vite-plugin-html",target:"_blank",rel:"noopener noreferrer"},y=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">createHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">minify</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * After writing entry here, you will not need to add script tags in \`index.html\`, the original tags need to be deleted
   * <span class="token keyword">@default</span> src/main.ts
   */</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;src/main.ts&#39;</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * If you want to store \`index.html\` in the specified folder, you can modify it, otherwise no configuration is required
   * <span class="token keyword">@default</span> index.html
   */</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;public/index.html&#39;</span><span class="token punctuation">,</span>

  <span class="token doc-comment comment">/**
   * Data that needs to be injected into the index.html ejs template
   */</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">injectScript</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;script src=&quot;./inject.js&quot;&gt;&lt;/script&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">tags</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">injectTo</span><span class="token operator">:</span> <span class="token string">&#39;body-prepend&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite与ts" tabindex="-1"><a class="header-anchor" href="#vite与ts" aria-hidden="true">#</a> vite与ts</h2>`,2),f={href:"https://vite-plugin-checker.netlify.app/introduction/introduction.html",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"add type checking and linting support",-1),w=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> checker <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-checker&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">checker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// e.g. use TypeScript check</span>
      <span class="token literal-property property">typescript</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要在根目录下创建一个tsconfig.json文件规定ts的一些编译选项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;removeComments&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;preserveConstEnums&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;../../built/local/tsc.js&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;src/**/*&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;**/*.spec.ts&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在构建环境中遇到ts报错需要限制打包操作，需要在package.json的命令中如下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc --noEmit &amp;&amp; vite build&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额外地，针对<strong>环境变量（也就是.env文件里面的变量），需要有额外的类型声明</strong><strong>需要在根目录下书写</strong><code>**vite-env.d.ts或env.d.ts**</code><strong>文件，</strong> 使用 i<wbr>mport.meta.env.VITE_NODE_ENV 获取环境变量，但是是没有智能提示的，只有默认的以下几种提示,，要想有自己定义的环境变量提示，需要自己添加：</p><ul><li>MODE，用来指明现在所处于的模式，一般通过它进行不同环境的区分，比如 dev、test、pre、prd 等等，默认为：“development”</li><li>BASE_URL，用来请求静态资源初始的 url</li><li>PROD，用来判断当前环境是否是正式环境</li><li>DEV，用来与 PROD 相反的环境</li><li>SSR，用来判断是否是服务端渲染的环境</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>
  readonly <span class="token constant">VITE_NODE_ENV</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token comment">//定义提示信息 数据是只读的无法被修改</span>
  <span class="token comment">//多个变量定义多个...</span>
<span class="token punctuation">}</span>

declare module <span class="token string">&#39;*.vue&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> type <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">component</span><span class="token operator">:</span> DefineComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> any<span class="token operator">&gt;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> component
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function j(x,_){const e=o("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[n("a",u,[s("官方文档"),t(e)]),s(" 然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用 HMR(热更新)，文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。 造成的结果: 构建工具需要很长时间才能启动开发服务器 (启动开发服务器 ---> 把项目跑起来)")]),d,n("p",null,[n("a",v,[s("vite官网搭建vite项目文档教程"),t(e)]),s(" 比如我们敲了"),k]),m,n("p",null,[n("a",b,[s("https://github.com/subwaytime/vite-aliases"),t(e)]),s(" vite-aliases可以帮助我们自动生成别名: 检测你当前目录下包括src在内的所有一级文件夹, 并帮助我们去生成别名，示例如下：")]),h,n("p",null,[n("a",g,[s("https://github.com/vbenjs/vite-plugin-html"),t(e)])]),y,n("p",null,[n("a",f,[s("vite-plugin-checker"),t(e)]),s(" A Vite plugin that can run TypeScript, VLS, vue-tsc, ESLint, Stylelint in worker thread to "),q,s(" for Vite. 需要安装typescript包")]),w])}const C=p(c,[["render",j],["__file","1.html.vue"]]);export{C as default};
