import{_ as c,r as t,o as l,c as i,b as n,d as e,e as a,a as o}from"./app-de60e2dc.js";const d="/home/assets/archi-f2c2fc34.png",r="/home/assets/vs-3b9f8050.png",p="/home/assets/datamanage-aba9d1b4.png",u={},b=n("h1",{id:"docker-intro",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker-intro","aria-hidden":"true"},"#"),e(" Docker Intro")],-1),v=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),e(" 介绍")],-1),m=n("strong",null,"Docker",-1),k=n("code",null,"Google",-1),h=n("code",null,"Linux",-1),g={href:"https://zh.wikipedia.org/wiki/Cgroups",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.docker.com/storage/storagedriver/overlayfs-driver/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"},q={href:"https://en.wikipedia.org/wiki/Operating-system-level_virtualization",target:"_blank",rel:"noopener noreferrer"},D={href:"https://linuxcontainers.org/lxc/introduction/",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"0.7",-1),I=n("code",null,"LXC",-1),E={href:"https://github.com/docker/libcontainer",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"1.11",-1),A={href:"https://github.com/opencontainers/runc",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/containerd/containerd",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runc",-1),M={href:"https://github.com/opencontainers/runtime-spec",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,[n("code",null,"containerd"),e(" 是一个守护程序，它管理容器生命周期，提供了在一个节点上执行容器和管理镜像的最小功能集。")],-1),O=o('<img src="'+d+'" alt="screenshot2024-07-22 13.32.00" style="zoom:50%;"><p><strong>Docker</strong> 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 <strong>Docker</strong> 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><img src="'+r+'" alt="screenshot2024-07-22 13.33.50" style="zoom:50%;"><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><blockquote><p>更高效的利用系统资源</p></blockquote><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对<strong>系统资源的利用率更高</strong>。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><blockquote><p>更快速的启动时间</p></blockquote><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><blockquote><p>一致的运行环境</p></blockquote><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><blockquote><p>持续交付和部署</p></blockquote>',13),C={href:"https://zh.wikipedia.org/wiki/DevOps",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"Docker",-1),P={href:"https://docker-practice.github.io/zh-cn/image/dockerfile",target:"_blank",rel:"noopener noreferrer"},N={href:"https://en.wikipedia.org/wiki/Continuous_integration",target:"_blank",rel:"noopener noreferrer"},B={href:"https://en.wikipedia.org/wiki/Continuous_delivery",target:"_blank",rel:"noopener noreferrer"},G={href:"https://docker-practice.github.io/zh-cn/image/build.html",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"Dockerfile",-1),U=n("blockquote",null,[n("p",null,"更轻松的迁移")],-1),H=n("p",null,[e("由于 "),n("code",null,"Docker"),e(" 确保了执行环境的一致性，使得应用的迁移更加容易。"),n("code",null,"Docker"),e(" 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。")],-1),z=n("blockquote",null,[n("p",null,"更轻松的维护和扩展")],-1),Y=n("code",null,"Docker",-1),F=n("code",null,"Docker",-1),V={href:"https://hub.docker.com/search/?type=image&image_filter=official",target:"_blank",rel:"noopener noreferrer"},Z=o('<blockquote><p>对比传统虚拟机总结</p></blockquote><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">容器</th><th style="text-align:left;">虚拟机</th></tr></thead><tbody><tr><td style="text-align:left;">启动</td><td style="text-align:left;">秒级</td><td style="text-align:left;">分钟级</td></tr><tr><td style="text-align:left;">硬盘使用</td><td style="text-align:left;">一般为 <code>MB</code></td><td style="text-align:left;">一般为 <code>GB</code></td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">接近原生</td><td style="text-align:left;">弱于</td></tr><tr><td style="text-align:left;">系统支持量</td><td style="text-align:left;">单机支持上千个容器</td><td style="text-align:left;">一般几十个</td></tr></tbody></table><h2 id="三大组件介绍" tabindex="-1"><a class="header-anchor" href="#三大组件介绍" aria-hidden="true">#</a> 三大组件介绍</h2><h3 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像" aria-hidden="true">#</a> 镜像</h3><p>操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。对于 <code>Linux</code> 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 <strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供<strong>容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）</strong>。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><blockquote><p>分层存储</p></blockquote>',7),j=n("code",null,"root",-1),K={href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"ISO",-1),X=o('<p><strong>镜像构建时，会一层层构建，前一层是后一层的基础</strong>。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h3><p><strong>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</strong></p>',4),J=n("strong",null,"进程",-1),Q={href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"},ee=n("code",null,"root",-1),ne=n("strong",null,"容器内的进程是运行在一个隔离的环境里",-1),se=n("p",null,[e("镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 "),n("strong",null,"容器存储层"),e("。")],-1),ae=n("p",null,"容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。",-1),oe={href:"https://docker-practice.github.io/zh-cn/data_management/volume.html",target:"_blank",rel:"noopener noreferrer"},ce={href:"https://docker-practice.github.io/zh-cn/data_management/bind-mounts.html",target:"_blank",rel:"noopener noreferrer"},te=n("p",null,"数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。",-1),le=n("h3",{id:"仓库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#仓库","aria-hidden":"true"},"#"),e(" 仓库")],-1),ie={href:"https://docker-practice.github.io/zh-cn/repository/registry.html",target:"_blank",rel:"noopener noreferrer"},de=o("<p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p>",2),re={href:"https://hub.docker.com/_/ubuntu",target:"_blank",rel:"noopener noreferrer"},pe=n("code",null,"ubuntu",-1),ue=n("code",null,"16.04",-1),be=n("code",null,"18.04",-1),ve=n("code",null,"ubuntu:16.04",-1),me=n("code",null,"ubuntu:18.04",-1),ke=n("code",null,"ubuntu",-1),he=n("code",null,"ubuntu:latest",-1),ge=n("p",null,[e("仓库名经常以 "),n("em",null,"两段式路径"),e(" 形式出现，比如 "),n("code",null,"jwilder/nginx-proxy"),e("，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。")],-1),fe=n("blockquote",null,[n("p",null,"Docker Registry 公开服务")],-1),_e=n("p",null,"Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。",-1),xe={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},qe={href:"https://hub.docker.com/search?q=&type=image&image_filter=official",target:"_blank",rel:"noopener noreferrer"},De=n("code",null,"Registry Mirror",-1),ye=n("strong",null,"加速器",-1),Ie={href:"https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu",target:"_blank",rel:"noopener noreferrer"},Ee={href:"https://www.daocloud.io/mirror#accelerator-doc",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://c.163.com/hub#/m/library/",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://hub.daocloud.io/",target:"_blank",rel:"noopener noreferrer"},Re={href:"https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu",target:"_blank",rel:"noopener noreferrer"},we=n("blockquote",null,[n("p",null,"私有 Docker Registry")],-1),Me={href:"https://hub.docker.com/_/registry/",target:"_blank",rel:"noopener noreferrer"},Se=o(`<h2 id="镜像组件" tabindex="-1"><a class="header-anchor" href="#镜像组件" aria-hidden="true">#</a> 镜像组件</h2><p>Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。</p><h3 id="获取镜像" tabindex="-1"><a class="header-anchor" href="#获取镜像" aria-hidden="true">#</a> 获取镜像</h3><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>Docker Registry 地址<span class="token punctuation">[</span>:端口号<span class="token punctuation">]</span>/<span class="token punctuation">]</span>仓库名<span class="token punctuation">[</span>:标签<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里说一下镜像名称的格式。</p><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub(<code>docker.io</code>)。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>比如：<code>docker pull ubuntu:18.04</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>18.04: Pulling from library/ubuntu
92dc2a97ff99: Pull complete
be13a9d27eb8: Pull complete
c8299583700a: Pull complete
Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26
Status: Downloaded newer image for ubuntu:18.04
docker.io/library/ubuntu:18.04
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （<code>docker.io</code>）获取镜像。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。<code>docker pull</code> 命令的输出结果最后一行给出了镜像的完整名称，即： <code>docker.io/library/ubuntu:18.04</code>。</p><p>从下载过程中可以看到之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 <code>sha256</code> 的摘要，以确保下载一致性。</p><p>在使用上面命令的时候，所看到的层 ID 以及 <code>sha256</code> 的摘要可能不是一直一样的。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可以获得更安全、更稳定的镜像。</p><h3 id="列出镜像" tabindex="-1"><a class="header-anchor" href="#列出镜像" aria-hidden="true">#</a> 列出镜像</h3><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>liushun@liushun ~ % docker image list
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
nginx        latest    443d199e8bfc   4 weeks ago   193MB
ubuntu       18.04     329ed837d508   3 days ago    63.3MB
ubuntu       bionic    329ed837d508   3 days ago    63.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p><p><strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个 <strong>标签</strong>。因此，在上面的例子中，可以看到 <code>ubuntu:18.04</code> 和 <code>ubuntu:bionic</code> 拥有相同的 ID，因为它们对应的是同一个镜像。</p><blockquote><p>镜像体积</p></blockquote>`,18),Oe=n("code",null,"ubuntu:18.04",-1),Ce=n("code",null,"63.3MB",-1),$e={href:"https://hub.docker.com/layers/ubuntu/library/ubuntu/bionic/images/sha256-32776cc92b5810ce72e77aca1d949de1f348e1d281d3f00ebcc22a3adcdc9f42?context=explore",target:"_blank",rel:"noopener noreferrer"},Pe=n("code",null,"25.47 MB",-1),Ne=n("strong",null,"这是因为 Docker Hub 中显示的体积是压缩后的体积",-1),Be=n("code",null,"docker image ls",-1),Ge=o(`<p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p><p>可以通过 <code>docker system df</code> 命令来便捷的查看镜像、容器、数据卷所占用的空间。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>liushun@liushun ~ % docker system df
TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images          1         0         193MB     193MB (100%)
Containers      0         0         0B        0B
Local Volumes   0         0         0B        0B
Build Cache     0         0         0B        0B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>虚悬镜像</p></blockquote><p>有一种特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
<span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>中间层镜像</p></blockquote><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。<strong>只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</strong></p><blockquote><p>列出部分镜像</p></blockquote><p>不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶层镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code> 有好几个参数可以帮助做到这个事情。</p><p>根据仓库名列出镜像（全名称匹配）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> ubuntu
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
ubuntu              bionic              329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列出特定的某个镜像，也就是说指定仓库名和标签</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> ubuntu:18.04
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">since</span><span class="token operator">=</span>mongo:3.2
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               latest              5f515359c7f8        <span class="token number">5</span> days ago          <span class="token number">183</span> MB
nginx               latest              05a60462f8ba        <span class="token number">5</span> days ago          <span class="token number">181</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p><p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">label</span><span class="token operator">=</span>com.example.version<span class="token operator">=</span><span class="token number">0.1</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>定制格式展示</p></blockquote><p>默认情况下，<code>docker image ls</code> 会输出一个完整的表格， <code>-q</code> 参数可以只展示镜像的 ID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span>
5f515359c7f8
05a60462f8ba
fe9198c04d62
00285df0df87
329ed837d508
329ed837d508
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，各个命令中都有这类搭配以完成很强大的功能。</p>`,29),Le={href:"https://gohugo.io/templates/introduction/",target:"_blank",rel:"noopener noreferrer"},Ue=o(`<p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;{{.ID}}: {{.Repository}}&quot;</span>
5f515359c7f8: redis
05a60462f8ba: nginx
fe9198c04d62: mongo
00285df0df87: <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
329ed837d508: ubuntu
329ed837d508: ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Repository}}<span class="token entity" title="\\t">\\t</span>{{.Tag}}&quot;</span>
IMAGE ID            REPOSITORY          TAG
5f515359c7f8        redis               latest
05a60462f8ba        nginx               latest
fe9198c04d62        mongo               <span class="token number">3.2</span>
00285df0df87        <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
329ed837d508        ubuntu              <span class="token number">18.04</span>
329ed837d508        ubuntu              bionic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除本地镜像" tabindex="-1"><a class="header-anchor" href="#删除本地镜像" aria-hidden="true">#</a> 删除本地镜像</h3><p>如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>用 ID、镜像名、摘要删除镜像</p></blockquote><p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p><p>比如有这么一些镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
centos                      latest              0584b3d2cf6d        <span class="token number">3</span> weeks ago         <span class="token number">196.5</span> MB
redis                       alpine              501ad78535f0        <span class="token number">3</span> weeks ago         <span class="token number">21.03</span> MB
<span class="token function">docker</span>                      latest              cf693ec9b5c7        <span class="token number">3</span> weeks ago         <span class="token number">105.1</span> MB
nginx                       latest              e43d811ce2f4        <span class="token number">5</span> weeks ago         <span class="token number">181.5</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用镜像的完整 ID，也称为 <code>长 ID</code>，来删除镜像。使用脚本的时候可能会用长 ID，更多的时候是用 <code>短 ID</code> 来删除镜像。<code>docker image ls</code> 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><p>比如这里，要删除 <code>redis:alpine</code> 镜像，可以执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token number">501</span>
Untagged: redis:alpine
Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d
Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7
Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b
Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23
Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa
Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3
Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">rm</span> centos
Untagged: centos:latest
Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c
Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a
Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，更精确的是使用 <code>镜像摘要</code> 删除镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--digests</span>
REPOSITORY     TAG     DIGEST    IMAGE ID            CREATED             SIZE
<span class="token function">node</span>           slim    sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        <span class="token number">3</span> weeks ago         <span class="token number">214</span> MB

$ <span class="token function">docker</span> image <span class="token function">rm</span> node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Untagged 和 Deleted</p></blockquote><p>删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。</p><p>因此当使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足要求的所有镜像标签都取消，这就是 <code>Untagged</code> 的信息。因为一个镜像可以对应多个标签，因此当删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><p>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变得非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的原因。</p><p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><blockquote><p>用 docker image ls 命令来配合</p></blockquote><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。</p><p>比如，需要删除所有仓库名为 <code>redis</code> 的镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span> redis<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">before</span><span class="token operator">=</span>mongo:3.2<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器组件" tabindex="-1"><a class="header-anchor" href="#容器组件" aria-hidden="true">#</a> 容器组件</h2><p>简单的说，<strong>容器是独立运行的一个或一组应用，以及它们的运行态环境</strong>。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（<code>exited</code>）的容器重新启动。</p><p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><blockquote><p>新建并启动</p></blockquote><p>所需要的命令主要为 <code>docker run</code>。</p><p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run ubuntu:18.04 /bin/echo <span class="token string">&#39;Hello world&#39;</span>
Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这跟在本地直接执行 <code>/bin/echo &#39;hello world&#39;</code> 几乎感觉不出任何区别。</p><p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> ubuntu:18.04 /bin/bash
root@af8bae53bdd3:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开。</p><p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@af8bae53bdd3:/<span class="token comment"># pwd</span>
/
root@af8bae53bdd3:/<span class="token comment"># ls</span>
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>`,45),He={href:"https://docker-practice.github.io/zh-cn/repository/",target:"_blank",rel:"noopener noreferrer"},ze=n("li",null,"利用镜像创建并启动一个容器",-1),Ye=n("li",null,"分配一个文件系统，并在只读的镜像层外面挂载一层可读写层",-1),Fe=n("li",null,"从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去",-1),Ve=n("li",null,"从地址池配置一个 ip 地址给容器",-1),Ze=n("li",null,"执行用户指定的应用程序",-1),je=n("li",null,"执行完毕后容器被终止",-1),Ke=o(`<blockquote><p>启动已终止容器</p></blockquote><p>可以利用 <code>docker container start</code> 命令，直接将一个已经终止（<code>exited</code>）的容器启动运行。</p><p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 <code>ps</code> 或 <code>top</code> 来查看进程信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@ba267838cc1b:/<span class="token comment"># ps</span>
  PID TTY          TIME CMD
    <span class="token number">1</span> ?        00:00:00 <span class="token function">bash</span>
   <span class="token number">11</span> ?        00:00:00 <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p><h3 id="后台-守护态-运行" tabindex="-1"><a class="header-anchor" href="#后台-守护态-运行" aria-hidden="true">#</a> 后台（守护态）运行</h3><p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p><p>如果不使用 <code>-d</code> 参数运行容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run ubuntu:18.04 /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do echo hello world; sleep 1; done&quot;</span>
hello world
hello world
hello world
hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器会把输出的结果 (STDOUT) 打印到宿主机上面</p><p>如果使用了 <code>-d</code> 参数运行容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> ubuntu:18.04 /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do echo hello world; sleep 1; done&quot;</span>
77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 <code>docker logs</code> 查看)。</p><p>使用 <code>-d</code> 参数启动后会返回一个唯一的容器 id，可以通过 <code>docker container ls</code> 命令来查看容器信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker container ls
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
77b2dc01fe0f  ubuntu:18.04  /bin/sh -c &#39;while tr  2 minutes ago  Up 1 minute        agitated_wright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要获取容器的输出信息，可以通过 <code>docker container logs</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container logs <span class="token punctuation">[</span>container ID or NAMES<span class="token punctuation">]</span>
hello world
hello world
hello world
<span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="终止容器" tabindex="-1"><a class="header-anchor" href="#终止容器" aria-hidden="true">#</a> 终止容器</h3><p>可以使用 <code>docker container stop</code> 来终止一个运行中的容器（也可以省略 container 关键字，直接docker stop xxx）。</p><p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p><p>例如对于上一章节中只启动了一个终端的容器，用户通过 <code>exit</code> 命令或 <code>Ctrl+d</code> 来退出终端时，所创建的容器立刻终止。</p><p>终止状态的容器可以用 <code>docker container ls -a</code> 命令看到。例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>
CONTAINER ID    IMAGE          COMMAND         CREATED    STATUS    PORTS               NAMES
ba267838cc1b    ubuntu:18.04  <span class="token string">&quot;/bin/bash&quot;</span>   <span class="token number">30</span> minutes ago Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> About a minute ago trusting_newton
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。</p><p>此外，<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h3 id="进入容器" tabindex="-1"><a class="header-anchor" href="#进入容器" aria-hidden="true">#</a> 进入容器</h3><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。</p><p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐使用 <code>docker exec</code> 命令</p><blockquote><p><code>attach</code> 命令</p></blockquote><p>下面示例如何使用 <code>docker attach</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-dit</span> ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550

$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID   IMAGE         COMMAND      CREATED       STATUS              PORTS               NAMES
243c32535da7  ubuntu:latest <span class="token string">&quot;/bin/bash&quot;</span>  <span class="token number">18</span> seconds ago  Up <span class="token number">17</span> seconds                 nostalgic_hypatia

$ <span class="token function">docker</span> attach 243c
root@243c32535da7:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注意：</em> 如果从这个 stdin 中 exit，<strong>会导致容器的停止</strong>。</p><blockquote><p><code>exec</code> 命令</p></blockquote><p><code>-i</code> <code>-t</code> 参数</p><p><code>docker exec</code> 后边可以跟多个参数，这里主要说明 <code>-i</code> <code>-t</code> 参数。</p><p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到 Linux 命令提示符。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-dit</span> ubuntu
69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6

$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID    IMAGE         COMMAND        CREATED        STATUS        PORTS               NAMES
69d137adef7a  ubuntu:latest <span class="token string">&quot;/bin/bash&quot;</span>  <span class="token number">18</span> seconds ago    Up <span class="token number">17</span> seconds             zealous_swirles

$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> 69d1 <span class="token function">bash</span>
<span class="token function">ls</span>
bin
boot
dev
<span class="token punctuation">..</span>.

$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 69d1 <span class="token function">bash</span>
root@69d137adef7a:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果从这个 stdin 中 exit，<strong>不会导致容器的停止</strong>。</p><h3 id="导出和导入" tabindex="-1"><a class="header-anchor" href="#导出和导入" aria-hidden="true">#</a> 导出和导入</h3><blockquote><p>导出</p></blockquote><p>如果要导出本地某个容器，可以使用 <code>docker export</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token builtin class-name">export</span> 7691a814370e <span class="token operator">&gt;</span> ubuntu.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样将导出容器快照到本地文件。</p><blockquote><p>导入容器快照</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用 <code>docker import</code> 从容器快照文件中再导入为镜像，例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ubuntu.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - test/ubuntu:v1.0
$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
test/ubuntu         v1.0                9d37a6082e97        About a minute ago   <span class="token number">171.3</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token function">import</span> http://example.com/exampleimage.tgz example/imagerepo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>注：用户既可以使用 <code>docker load</code> 来导入镜像存储文件到本地镜像库，也可以使用 <code>docker import</code> 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</em></p><h3 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h3><p>可以使用 <code>docker container rm</code> 来删除一个处于终止状态的容器。例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">rm</span> trusting_newton
trusting_newton
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p><blockquote><p>清理所有处于终止状态的容器</p></blockquote><p>用 <code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="仓库组件" tabindex="-1"><a class="header-anchor" href="#仓库组件" aria-hidden="true">#</a> 仓库组件</h2><p>仓库（<code>Repository</code>）是集中存放镜像的地方。</p><p>一个容易混淆的概念是注册服务器（<code>Registry</code>）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 <code>docker.io/ubuntu</code> 来说，<code>docker.io</code> 是注册服务器地址，<code>ubuntu</code> 是仓库名。</p><h3 id="docker-hub" tabindex="-1"><a class="header-anchor" href="#docker-hub" aria-hidden="true">#</a> Docker Hub</h3><blockquote><p>登录</p></blockquote><p>可以通过执行 <code>docker login</code> 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p><p>可以通过 <code>docker logout</code> 退出登录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>liushun@liushun ~ % docker login
Authenticating with existing credentials...
Login Succeeded
liushun@liushun ~ % docker logout
Removing login credentials for https://index.docker.io/v1/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查找镜像</p></blockquote><p>可以通过 <code>docker search</code> 命令来查找官方仓库中的镜像，并利用 <code>docker pull</code> 命令来将它下载到本地。</p><p>例如以 <code>centos</code> 为关键词进行搜索：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>liushun@liushun ~ % <span class="token function">docker</span> search centos
NAME                                   DESCRIPTION                                      STARS     OFFICIAL
centos                                 DEPRECATED<span class="token punctuation">;</span> The official build of CentOS.        <span class="token number">7745</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>
kasmweb/centos-7-desktop               CentOS <span class="token number">7</span> desktop <span class="token keyword">for</span> Kasm Workspaces             <span class="token number">45</span>        
rancher/os-centosconsole                                                                <span class="token number">0</span>         
bellsoft/liberica-openjdk-centos       Liberica is a <span class="token number">100</span>% open-source Java implemen…   <span class="token number">4</span>         
bellsoft/liberica-openjre-centos       Liberica is a <span class="token number">100</span>% open-source Java implemen…   <span class="token number">3</span>         
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建（<code>OFFICIAL</code>）。</p><p>根据是否是官方提供，可将镜像分为两类。</p><ul><li>一种是类似 <code>centos</code> 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。</li><li>还有一种类型，比如 <code>bellsoft/liberica-openjdk-centos</code> 镜像，它是由 Docker Hub 的注册用户创建并维护的，往往带有用户名称前缀。可以通过前缀 <code>username/</code> 来指定使用某个用户提供的镜像，比如 bellsoft 用户。</li></ul><p>另外，在查找的时候通过 <code>--filter=stars=N</code> 参数可以指定仅显示收藏数量为 <code>N</code> 以上的镜像。</p><blockquote><p>推送镜像</p></blockquote><p>可以在登录后通过 <code>docker push</code> 命令来将自己的镜像推送到 Docker Hub。</p><p>以下命令中的 <code>username</code> 替换为自己 Docker 账号用户名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> tag ubuntu:18.04 username/ubuntu:18.04

$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY             TAG                    IMAGE ID            CREATED             SIZE
ubuntu                 <span class="token number">18.04</span>                  275d79972a86        <span class="token number">6</span> days ago          <span class="token number">94</span>.6MB
username/ubuntu        <span class="token number">18.04</span>                  275d79972a86        <span class="token number">6</span> days ago          <span class="token number">94</span>.6MB

$ <span class="token function">docker</span> push username/ubuntu:18.04

$ <span class="token function">docker</span> search username
NAME                      DESCRIPTION                      STARS               OFFICIAL
username/ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据管理" tabindex="-1"><a class="header-anchor" href="#数据管理" aria-hidden="true">#</a> 数据管理</h2><p>介绍如何在 Docker 内部以及容器之间管理数据，在容器中管理数据主要有两种方式：</p><ul><li>数据卷（Volumes）</li><li>挂载主机目录 (Bind mounts)</li></ul><img src="`+p+`" alt="screenshot2024-07-22 15.34.52" style="zoom:50%;"><h3 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷" aria-hidden="true">#</a> 数据卷</h3><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><blockquote><p>创建一个数据卷</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> volume create my-vol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看所有的 <code>数据卷</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>liushun@liushun ~ % <span class="token function">docker</span> volume <span class="token function">ls</span>
DRIVER    VOLUME NAME
<span class="token builtin class-name">local</span>     my-vol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>liushun@liushun ~ % <span class="token function">docker</span> volume inspect my-vol
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;CreatedAt&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2024-07-22T07:47:50Z&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Mountpoint&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my-vol&quot;</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动一个挂载数据卷的容器</p></blockquote><p>在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p><p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/usr/share/nginx/html</code> 目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">--mount</span> <span class="token assign-left variable">source</span><span class="token operator">=</span>my-vol,target<span class="token operator">=</span>/usr/share/nginx/html nginx 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>查看数据卷的具体信息</p></blockquote><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> inspect web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>数据卷</code> 信息在 &quot;Mounts&quot; Key 下面</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;Mounts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
      <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-vol&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/usr/share/nginx/html&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;RW&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Propagation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>删除数据卷</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> volume <span class="token function">rm</span> my-vol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>数据卷</code> 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p><p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> volume prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="挂在主机目录" tabindex="-1"><a class="header-anchor" href="#挂在主机目录" aria-hidden="true">#</a> 挂在主机目录</h3><blockquote><p>挂载一个主机目录作为数据卷</p></blockquote><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/src/webapp,target<span class="token operator">=</span>/usr/share/nginx/html nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令加载主机的 <code>/src/webapp</code> 目录到容器的 <code>/usr/share/nginx/html</code>目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径<strong>必须是绝对路径</strong>，以前使用 <code>-v</code> 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 <code>--mount</code> 参数时如果本地目录不存在，Docker 会报错。</p><p>Docker 挂载主机目录的默认权限是 <code>读写</code>，用户也可以通过增加 <code>readonly</code> 指定为 <code>只读</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/src/webapp,target<span class="token operator">=</span>/usr/share/nginx/html,readonly  nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加了 <code>readonly</code> 之后，就挂载为 <code>只读</code> 了。如果你在容器内 <code>/usr/share/nginx/html</code> 目录新建文件，会显示如下错误</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/share/nginx/html <span class="token comment"># touch new.txt</span>
touch: new.txt: Read-only <span class="token function">file</span> system
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查看数据卷的具体信息</p></blockquote><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> inspect web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>挂载主机目录</code> 的配置信息在 &quot;Mounts&quot; Key 下面</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;Mounts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bind&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/src/webapp&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/usr/share/nginx/html&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;RW&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Propagation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rprivate&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>挂载一个本地主机文件作为数据卷</p></blockquote><p><code>--mount</code> 标记也可以从主机挂载单个文件到容器中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span><span class="token environment constant">$HOME</span>/.bash_history,target<span class="token operator">=</span>/root/.bash_history ubuntu:18.04 <span class="token function">bash</span>

root@2affd44b4667:/<span class="token comment"># history</span>
<span class="token number">1</span>  <span class="token function">ls</span>
<span class="token number">2</span>  diskutil list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以记录在容器输入过的命令了。</p><h2 id="使用网络" tabindex="-1"><a class="header-anchor" href="#使用网络" aria-hidden="true">#</a> 使用网络</h2><p>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。</p><h3 id="外部访问容器" tabindex="-1"><a class="header-anchor" href="#外部访问容器" aria-hidden="true">#</a> 外部访问容器</h3><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><p><strong>当使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口</strong>（需要自定义映射是小写 p，自随机映射是大写 P）。</p><p>使用 <code>docker container ls</code> 可以看到，本地主机的 32768 被映射到了容器的 80 端口。此时访问本机的 32768 端口即可访问容器内 NGINX 默认页面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> nginx

liushun@liushun ~ % <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-l</span>
CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS         PORTS                   NAMES
080a11c13d02   nginx     <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">10</span> seconds ago   Up <span class="token number">9</span> seconds   <span class="token number">0.0</span>.0.0:55000-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp   sharp_hopper

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，可以通过 <code>docker logs</code> 命令来查看访问记录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> logs 080
<span class="token number">192.168</span>.65.1 - - <span class="token punctuation">[</span><span class="token number">22</span>/Jul/2024:08:19:43 +0000<span class="token punctuation">]</span> <span class="token string">&quot;GET / HTTP/1.1&quot;</span> <span class="token number">200</span> <span class="token number">615</span> <span class="token string">&quot;-&quot;</span> <span class="token string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36&quot;</span> <span class="token string">&quot;-&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code>。</p><blockquote><p>1、映射所有接口地址</p></blockquote><p>使用 <code>hostPort:containerPort</code> 格式本地的 80 端口映射到容器的 80 端口，可以执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时默认会绑定本地所有接口上的所有地址。</p><blockquote><p>2、映射到指定地址的指定端口</p></blockquote><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:80:80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>3、映射到指定地址的任意端口</p></blockquote><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 80 端口，本地主机会<strong>自动分配一个端口</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1::80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:80:80/udp nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>查看映射端口配置</p></blockquote><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>liushun@liushun ~ % <span class="token function">docker</span> port 08 <span class="token number">80</span>
<span class="token number">0.0</span>.0.0:55000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 查看，Docker 还可以有一个可变的网络配置。）</li><li><code>-p</code> 标记可以多次使用来绑定多个端口</li></ul><p>例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="容器互联" tabindex="-1"><a class="header-anchor" href="#容器互联" aria-hidden="true">#</a> 容器互联</h3><p>随着 Docker 网络的完善，强烈建议将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 <code>--link</code> 参数。</p><blockquote><p>新建网络</p></blockquote><p>下面先创建一个新的 Docker 网络。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> network create <span class="token parameter variable">-d</span> bridge my-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,158),We=n("code",null,"-d",-1),Xe=n("code",null,"bridge",-1),Je=n("code",null,"overlay",-1),Qe=n("code",null,"overlay",-1),en={href:"https://docker-practice.github.io/zh-cn/swarm_mode",target:"_blank",rel:"noopener noreferrer"},nn=o(`<blockquote><p>连接容器</p></blockquote><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> busybox1 <span class="token parameter variable">--network</span> my-net busybox <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> busybox2 <span class="token parameter variable">--network</span> my-net busybox <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再打开一个新的终端查看容器信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>liushun@liushun ~ % <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID   IMAGE     COMMAND   CREATED              STATUS              PORTS     NAMES
35ed82b24bc1   busybox   <span class="token string">&quot;sh&quot;</span>      <span class="token number">20</span> seconds ago       Up <span class="token number">19</span> seconds                 busybox2
131409f5b8f0   busybox   <span class="token string">&quot;sh&quot;</span>      About a minute ago   Up About a minute             busybox1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><p>在 <code>busybox1</code> 容器输入以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/ <span class="token comment"># ping busybox2</span>
PING busybox2 <span class="token punctuation">(</span><span class="token number">172.18</span>.0.3<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.390</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.160</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.175</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.170</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 172.18.0.3。</p><p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/ <span class="token comment"># ping busybox1</span>
PING busybox1 <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.106</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.253</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.18</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.271</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><blockquote><p>Docker Compose</p></blockquote><p>如果有多个容器之间需要互相连接，推荐使用 Docker Compose。</p>`,16);function sn(an,on){const s=t("ExternalLinkIcon");return l(),i("div",null,[b,v,n("p",null,[m,e(" 使用 "),k,e(" 公司推出的 Go 语言进行开发实现，基于 "),h,e(" 内核的 "),n("a",g,[e("cgroup"),a(s)]),e("，"),n("a",f,[e("namespace"),a(s)]),e("，以及 "),n("a",_,[e("OverlayFS"),a(s)]),e(" 类的 "),n("a",x,[e("Union FS"),a(s)]),e(" 等技术，对进程进行封装隔离，属于 "),n("a",q,[e("操作系统层面的虚拟化技术"),a(s)]),e("。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 "),n("a",D,[e("LXC"),a(s)]),e("，从 "),y,e(" 版本以后开始去除 "),I,e("，转而使用自行开发的 "),n("a",E,[e("libcontainer"),a(s)]),e("，从 "),T,e(" 版本开始，则进一步演进为使用 "),n("a",A,[e("runC"),a(s)]),e(" 和 "),n("a",R,[e("containerd"),a(s)]),e("。")]),n("blockquote",null,[n("p",null,[w,e(" 是一个 Linux 命令行工具，用于根据 "),n("a",M,[e("OCI容器运行时规范"),a(s)]),e(" 创建和运行容器。")]),S]),O,n("p",null,[e("对开发和运维（"),n("a",C,[e("DevOps"),a(s)]),e("）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。")]),n("p",null,[e("使用 "),$,e(" 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 "),n("a",P,[e("Dockerfile"),a(s)]),e(" 来进行镜像构建，并结合 "),n("a",N,[e("持续集成(Continuous Integration)"),a(s)]),e(" 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 "),n("a",B,[e("持续部署(Continuous Delivery/Deployment)"),a(s)]),e(" 系统进行自动部署。")]),n("p",null,[e("而且使用 "),n("a",G,[L,a(s)]),e(" 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。")]),U,H,z,n("p",null,[Y,e(" 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，"),F,e(" 团队同各个开源项目团队一起维护了一大批高质量的 "),n("a",V,[e("官方镜像"),a(s)]),e("，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。")]),Z,n("p",null,[e("因为镜像包含操作系统完整的 "),j,e(" 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 "),n("a",K,[e("Union FS"),a(s)]),e(" 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 "),W,e(" 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。")]),X,n("p",null,[e("容器的实质是"),J,e("，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 "),n("a",Q,[e("命名空间"),a(s)]),e("。因此容器可以拥有自己的 "),ee,e(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。"),ne,e("，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。")]),se,ae,n("p",null,[e("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 "),n("a",oe,[e("数据卷（Volume）"),a(s)]),e("、或者 "),n("a",ce,[e("绑定宿主目录"),a(s)]),e("，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")]),te,le,n("p",null,[e("镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，就需要一个集中的存储、分发镜像的服务，"),n("a",ie,[e("Docker Registry"),a(s)]),e(" 就是这样的服务。")]),de,n("p",null,[e("以 "),n("a",re,[e("Ubuntu 镜像"),a(s)]),e(" 为例，"),pe,e(" 是仓库的名字，其内包含有不同的版本标签，如，"),ue,e(", "),be,e("。可以通过 "),ve,e("，或者 "),me,e(" 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 "),ke,e("，那将视为 "),he,e("。")]),ge,fe,_e,n("p",null,[e("最常使用的 Registry 公开服务是官方的 "),n("a",xe,[e("Docker Hub"),a(s)]),e("，这也是默认的 Registry，并拥有大量的高质量的 "),n("a",qe,[e("官方镜像"),a(s)]),e("。")]),n("p",null,[e("国内的一些云服务商提供了针对 Docker Hub 的镜像服务（"),De,e("），这些镜像服务被称为 "),ye,e("。常见的有 "),n("a",Ie,[e("阿里云加速器"),a(s)]),e("、"),n("a",Ee,[e("DaoCloud 加速器"),a(s)]),e(" 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。")]),n("p",null,[e("国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "),n("a",Te,[e("网易云镜像服务"),a(s)]),e("、"),n("a",Ae,[e("DaoCloud 镜像市场"),a(s)]),e("、"),n("a",Re,[e("阿里云镜像库"),a(s)]),e(" 等。")]),we,n("p",null,[e("除了使用公开服务外，还可以在本地搭建私有 Docker Registry。Docker 官方提供了 "),n("a",Me,[e("Docker Registry"),a(s)]),e(" 镜像，可以直接使用做为私有 Registry 服务。")]),Se,n("p",null,[e("打印的镜像的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，"),Oe,e(" 镜像大小，在这里是 "),Ce,e("，但是在 "),n("a",$e,[e("Docker Hub"),a(s)]),e(" 显示的却是 "),Pe,e("。"),Ne,e("。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 "),Be,e(" 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。")]),Ge,n("p",null,[e("另外一些时候，可以自定义表格的结构，用 "),n("a",Le,[e("Go 的模板语法"),a(s)]),e("。")]),Ue,n("ul",null,[n("li",null,[e("检查本地是否存在指定的镜像，不存在就从 "),n("a",He,[e("registry"),a(s)]),e(" 下载")]),ze,Ye,Fe,Ve,Ze,je]),Ke,n("p",null,[We,e(" 参数指定 Docker 网络类型，有 "),Xe,e(),Je,e("。其中 "),Qe,e(" 网络类型用于 "),n("a",en,[e("Swarm mode"),a(s)]),e("。")]),nn])}const tn=c(u,[["render",sn],["__file","intro.html.vue"]]);export{tn as default};
