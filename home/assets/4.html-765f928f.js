import{_ as n,o as a,c as s,a as t}from"./app-4722fb10.js";const e={},p=t(`<h1 id="react案例练习" tabindex="-1"><a class="header-anchor" href="#react案例练习" aria-hidden="true">#</a> React案例练习</h1><h2 id="todolist案例" tabindex="-1"><a class="header-anchor" href="#todolist案例" aria-hidden="true">#</a> TodoList案例</h2><h3 id="相关知识点" tabindex="-1"><a class="header-anchor" href="#相关知识点" aria-hidden="true">#</a> 相关知识点</h3><p>1.拆分组件、实现静态组件，注意: className、style的写法</p><p>2.动态初始化列表，如何确定将数据放在哪个组件的state中?</p><ul><li>某个组件使用:放在其自身的state中</li><li>某些组件使用:放在他们<strong>共同的父组件state</strong>中(官方称此操作为:状态提升)</li></ul><p>3.关于父子之间通信:</p><ul><li>1.【父组件】给【子组件】传递数据:通过props传递</li><li>2.【子组件】给【父组件】传递数据:通过props传递，要求<strong>父提前给子传递一个函数</strong></li></ul><p>4.注意defaultchecked 和 checked的区别，类似的还有: defaultValue 和 value</p><ul><li>defaultchecked只能是第一次赋值起作用，之后如果变量值更新了，不会对元素进行更新</li><li>checked可以随时根据绑定的变量的值更新元素显示，但是必须绑定onChange函数，否则点击事件不会生效的</li></ul><p>5.状态在哪里，操作状态的方法就在哪里</p><h2 id="github搜索案例" tabindex="-1"><a class="header-anchor" href="#github搜索案例" aria-hidden="true">#</a> github搜索案例</h2><h3 id="相关知识点-1" tabindex="-1"><a class="header-anchor" href="#相关知识点-1" aria-hidden="true">#</a> 相关知识点</h3><p>1.设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。</p><p>2.ES6小知识点:解构赋值+重命名</p><ul><li>let obj = {a:{b:1}}</li><li>const {a} = obj; //传统解构赋值</li><li>const {a:{b}} = obj; //连续解构赋值</li><li>const {a:{ b:value}} = obj;//连续解构赋值+重命名</li></ul><p>3.消息订阅与发布机制</p><ul><li>先订阅，再发布(理解:有一种隔空对话的感觉)</li><li>适用于任意组件间通信</li><li>要在组件的componentwi11Unmount中取消订阅</li></ul><p>4.fetch发送请求（关注分离的设计思想)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response<span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api1/search/users2?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求出错&#39;</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码及过程" tabindex="-1"><a class="header-anchor" href="#代码及过程" aria-hidden="true">#</a> 代码及过程</h2><p>还有一些教程中的案例，访问github</p><p>https://github.com/liushun-ing/start_react_app</p>`,23),o=[p];function i(c,l){return a(),s("div",null,o)}const r=n(e,[["render",i],["__file","4.html.vue"]]);export{r as default};
