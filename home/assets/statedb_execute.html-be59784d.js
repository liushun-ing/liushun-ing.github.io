import{_ as n,o as s,c as a,a as t}from"./app-4044199c.js";const e={},p=t(`<h1 id="statedb" tabindex="-1"><a class="header-anchor" href="#statedb" aria-hidden="true">#</a> StateDB</h1><p><strong><code>core.state.statedb.go</code></strong></p><h2 id="交易执行的statedb" tabindex="-1"><a class="header-anchor" href="#交易执行的statedb" aria-hidden="true">#</a> 交易执行的StateDB</h2><p>这里主要是因为项目开发过程中需要拿到一条合约交易的内部交易的细节，也就是这些内部交易的转账情况。浏览器上提供了查看内部交易的选项，但是目前的 geth 却没有现成接口可以获取这部分数据，debug.traceTransaction返回的是交易执行过程中的堆栈信息，并不能直观的获取到内部交易的细节，因此需要分析交易执行过程中 stateDB 的执行逻辑，以及该交易执行的结果是如何保存的。</p><p>==先知==</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StateDB <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db             Database
	prefetcherLock sync<span class="token punctuation">.</span>Mutex
	prefetcher     <span class="token operator">*</span>triePrefetcher
	trie           Trie
	noTrie         <span class="token builtin">bool</span>
	hasher         crypto<span class="token punctuation">.</span>KeccakState
	snaps          <span class="token operator">*</span>snapshot<span class="token punctuation">.</span>Tree    <span class="token comment">// Nil if snapshot is not available</span>
	snap           snapshot<span class="token punctuation">.</span>Snapshot <span class="token comment">// Nil if snapshot is not available</span>

	<span class="token comment">// originalRoot is the pre-state root, before any changes were made.</span>
	<span class="token comment">// It will be updated when the Commit is called.</span>
	originalRoot common<span class="token punctuation">.</span>Hash
	expectedRoot common<span class="token punctuation">.</span>Hash <span class="token comment">// The state root in the block header</span>
	stateRoot    common<span class="token punctuation">.</span>Hash <span class="token comment">// The calculation result of IntermediateRoot</span>

	<span class="token comment">// These maps hold the state changes (including the corresponding</span>
	<span class="token comment">// original value) that occurred in this **block**.</span>
  <span class="token comment">// 第一部分</span>
	AccountMux     sync<span class="token punctuation">.</span>Mutex                                <span class="token comment">// Mutex for accounts access</span>
	StorageMux     sync<span class="token punctuation">.</span>Mutex                                <span class="token comment">// Mutex for storages access</span>
	accounts       <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>                    <span class="token comment">// The mutated accounts in &#39;slim RLP&#39; encoding</span>
	storages       <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token comment">// The mutated slots in prefix-zero trimmed rlp format</span>
	accountsOrigin <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>                 <span class="token comment">// The original value of mutated accounts in &#39;slim RLP&#39; encoding</span>
	storagesOrigin <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// The original value of mutated slots in prefix-zero trimmed rlp format</span>

	<span class="token comment">// This map holds &#39;live&#39; objects, which will get modified while processing</span>
	<span class="token comment">// a state transition.</span>
  <span class="token comment">// 第二部分</span>
	stateObjects         <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>stateObject
	stateObjectsPending  <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment">// State objects finalized but not yet written to the trie</span>
	stateObjectsDirty    <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment">// State objects modified in the current execution</span>
	stateObjectsDestruct <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>StateAccount <span class="token comment">// State objects destructed in the block along with its previous value</span>

	<span class="token comment">// The refund counter, also used by state transitioning.</span>
	refund <span class="token builtin">uint64</span> <span class="token comment">// gas 返利的统计，这个在之前提到过，释放内存是奖励 gas。</span>

	<span class="token comment">// The tx context and all occurred logs in the scope of transaction.</span>
  <span class="token comment">// 第三部分</span>
	thash   common<span class="token punctuation">.</span>Hash
	txIndex <span class="token builtin">int</span>
	logs    <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Log
	logSize <span class="token builtin">uint</span>

	<span class="token comment">// Journal of state modifications. This is the backbone of</span>
	<span class="token comment">// Snapshot and RevertToSnapshot.</span>
  <span class="token comment">// 第四部分</span>
	journal        <span class="token operator">*</span>journal
	validRevisions <span class="token punctuation">[</span><span class="token punctuation">]</span>revision
	nextRevisionId <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StateDB对象比较重要的属性如上。主要可以分为四部分</p><p>第一部分：账户和合约存储的相关数据，这些数据是编码之后字节数据，并且可以看到 accounts 和 storages 的类型是 common.Hash，而 common.Hash一般用于 trie 层的数据表示，是树中节点的 key 和 value 的存储了，我们一般用不到，他其实是用作缓存使用。</p><p>第二部分：stateObjects 开头的数据，这部分是保存了当前 StateDB 相关联的stateObjects 的数据，这部分和我们常使用的数据是相关的。</p><p>第三部分：是在执行交易时，记录的当前交易的序号，日志等等</p><p>第四部分：记录的是执行某个交易是记录的变化，以及生成的快照的序号和版本等信息，他只是 id，真正的快照是 snap 相关字段存储的。</p><p>总结：stateDB 管理了当前区块状态相关的 stateObjects 的数据，以及交易执行的各种信息。</p><p>重要的是：stateDB 提供了诸如GetRoot, GetCodeSize, GetCodeHash, AddBalance, SetBalance, SetNonce等等方法，这些方法回去修改某个common.Address对象的账户的信息，这也说明了，交易执行过程中对某个账户信息的更新都是通过 StateDB 暴露的这些方法实现的。</p><p>==接下来，我们先来看 StateDB 与区块构建之间的配合。这里很重要==</p><ol><li>我们知道，Worker 通过 commitWork 函数提交从 builder 提供的Bid中竞价胜出的区块，在这个函数内部，有如下语句<code>bestBid := w.bidFetcher.GetBestBid(bestWork.header.ParentHash)</code>，这就是获取价值最高的Bid，然后构造成 bestWork 后（这个 bestWork 其实已经执行完所有用户交易了），使用<code>w.commit(bestWork, w.fullTaskHook, true, start)</code>提交。</li><li>最终，在完成区块收益分配后，提交 task：<code>case w.taskCh &lt;- &amp;task{receipts: receipts, state: env.state, block: block, createdAt: time.Now()}</code>，也就是构建 task，然后添加到 taskCh 管道中。</li><li>然后 worker 的 taskLoop 函数中，会从该通道取出 task，然后调用<code>w.engine.Seal(w.chain, task.block, w.resultCh, stopCh)</code>，Engine 尝试在该方法中使用本地签名凭证创建密封块。完成密封后，<code>case results &lt;- block.WithSeal(header):</code>加入到 worker 的 <code>resultCh</code> 中。</li><li>然后再 worker 的 resultLoop 函数中，会取出该通道的 result，进行各种处理，并最终<code>status, err := w.chain.WriteBlockAndSetHead(block, receipts, logs, task.state, true)</code>将该区块写入区块链，最终发布新区块生成事件<code>w.mux.Post(core.NewMinedBlockEvent{Block: block})</code>。</li><li>然后继续深入，会调用<code>(bc *BlockChain) writeBlockWithState</code>函数，这个函数里面，就是调用 rawdb写数据库，然后也会调用<code>triedb.commit</code>函数提交 triedb 的改动，也会调用 <code>_, diffLayer, err := state.Commit(block.NumberU64(), bc.tryRewindBadBlocks, tryCommitTrieDB)</code> 函数提交 StateDB 的改动，最后会有<code>go bc.cacheDiffLayer(diffLayer, diffLayerCh)</code>将 diffLayer 缓存（他这里的缓存机制，以后在了解吧）。</li></ol><p>==接下来就是 StateDB.Commit函数了==，这个函数里面内容有点多，先只能大致了解一下。</p><p>主要分为三部分：commitTrie，commitFunc，reset</p><ul><li>commitTrie：一是调用<code>StateIntermediateRoot</code>函数，遍历<code>stateObjectsPending</code>，提交到 Trie 中，然后得到新的状态树的 stateRoot；而是调用<code>handleDestruction</code>函数，遍历<code>stateObjectsDestruct</code>，删除需要销毁的账户；三是遍历<code>stateObjectsDirty</code>，依次调用 <code>stateObject.commit</code> 提交所有的账户修改。</li><li>commitFunc：一是遍历<code>stateObjectsDirty</code>中的所有<code>dirtyCode</code>，提交所有改动的合约代码，而是调用<code>diffLayer.Destructs, diffLayer.Accounts, diffLayer.Storages = s.SnapToDiffLayer()</code>将所有<code>accounts和storages</code>的账户写到 diffLayer 中供 blockchain 做缓存。然后调用<code>s.snaps.Cap(s.expectedRoot, s.snaps.CapLimit())</code>，Keep n diff layers in the memory。这个 n 一般是 128。也就是快照只保存 128 个区块的。</li><li>reset：会清空 StateDB 中保存的所有状态数据，为下一个区块的生产做准备。</li></ul><p>==现在知道了 StateDB 提交区块的基本逻辑了，也知道所有修改的数据基本都保存在 StateObject开头的属性中，现在的问题就是这些数据怎么来的？所以接下来，就是分析交易的执行过程了，这些数据肯定是交易执行过程中不断更新的。==</p><p>一条交易的提交都是调用<code>core.ApplyMessage</code>完成的，该方法调用<code>NewStateTransition(evm, msg, gp).TransitionDb()</code>（需要注意的是 evm 中就有 stateDB 对象）。</p><p><code>TransitionDb</code>函数，我在另一篇已经分析过，我们直接进入到他是怎么修改交易影响的账户的信息的，交易转账是调用该函数完成的<code>evm.Context.Transfer(evm.StateDB, caller.Address(), addr, value)</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Transfer subtracts amount from sender and adds amount to recipient using the given Db</span>
<span class="token keyword">func</span> <span class="token function">Transfer</span><span class="token punctuation">(</span>db vm<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> recipient common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> amount <span class="token operator">*</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">.</span><span class="token function">SubBalance</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
	db<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>recipient<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，该函数是调用的 vm.StateDB完成的，而vm.StateDB只有一个实现类，就是<code>core.state.StateDB</code>也就是，我们一直在分析的 StateDB。所以最终对账户状态的修改，都是调用StateDB 提供的函数。下面，我们以 AddBalance 为例，继续往下看。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// AddBalance adds amount to the account associated with addr.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">AddBalance</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> amount <span class="token operator">*</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stateObject <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">getOrNewStateObject</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> 
  <span class="token comment">// 最终是if obj := s.stateObjects[addr]; obj != nil {return obj }</span>
	<span class="token keyword">if</span> stateObject <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		stateObject<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// AddBalance adds amount to s&#39;s balance.</span>
<span class="token comment">// It is used to add funds to the destination account of a transfer.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">AddBalance</span><span class="token punctuation">(</span>amount <span class="token operator">*</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// EIP161: We must check emptiness for the objects such that the account</span>
	<span class="token comment">// clearing (0,0,0 objects) can take effect.</span>
	<span class="token keyword">if</span> amount<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span><span class="token function">SetBalance</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">SetBalance</span><span class="token punctuation">(</span>amount <span class="token operator">*</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>db<span class="token punctuation">.</span>journal<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>balanceChange<span class="token punctuation">{</span>
		account<span class="token punctuation">:</span> <span class="token operator">&amp;</span>s<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
		prev<span class="token punctuation">:</span>    <span class="token function">new</span><span class="token punctuation">(</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Balance<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">setBalance</span><span class="token punctuation">(</span>amount <span class="token operator">*</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Balance <span class="token operator">=</span> amount
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里就清楚的知道了，对账户的修改，是从<code>stateObjects</code>中拿到账户，如果没有就创建一个，然后修改他的状态，并往 journal 中添加一条 balanceChange 修改记录。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// journal contains the list of state modifications applied since the last state</span>
<span class="token comment">// commit. These are tracked to be able to be reverted in the case of an execution</span>
<span class="token comment">// exception or request for reversal.</span>
<span class="token keyword">type</span> journal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	entries <span class="token punctuation">[</span><span class="token punctuation">]</span>journalEntry         <span class="token comment">// Current changes tracked by the journal</span>
	dirties <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// Dirty accounts and the number of changes</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 journal 就是记录了交易执行过程中的所有状态的修改信息。然后他提供了 revert 函数，可以支持回滚。</p><p>==journal==</p><p>那journal 中的信息又是怎么到 stateObjectsDirty 中的呢。我们去到打包区块时，提交所有交易时，看他是怎么执行的。也就是<code>(w *worker) commitTransactions</code>函数，它里面是依次使用 <code>core.ApplyTransaction</code> 函数提交每一条交易。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Apply the transaction to the current state (included in the env).</span>
result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ApplyMessage</span><span class="token punctuation">(</span>evm<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> gp<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token comment">// Update the state with pending changes.</span>
<span class="token keyword">var</span> root <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token keyword">if</span> config<span class="token punctuation">.</span><span class="token function">IsByzantium</span><span class="token punctuation">(</span>blockNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  statedb<span class="token punctuation">.</span><span class="token function">Finalise</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  root <span class="token operator">=</span> statedb<span class="token punctuation">.</span><span class="token function">IntermediateRoot</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>blockNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终使用 ApplyMessage执行交易后，调用了 <code>statedb.Finalise</code> 函数，<code>IntermediateRoot</code>函数中调用了<code>statedb.Finalise</code>函数。我们就可以看到，在 Finalise 函数中，他遍历了 journal.dirties，将当前交易的改动全部提交到了<code>stateObjectsPending</code>和<code>stateObjectsDirty</code>中，然后调用<code>s.clearJournalAndRefund()</code>将当前的 journal 清空。</p><p>到这里就全明白了。=_=</p><blockquote><p>总结：打包区块时，是从上一个区块的状态开始，依次执行每一条交易，每条交易的执行信息都会记录在journal 中，在交易执行完后，提交到 stateObjectsDirty 中，然后再所有交易执行完后，打包区块时，一次性进行提交。</p><p>==由此我们也可以知道，区块链中只保存某个区块的状态信息，是不会保存每条交易执行的临时信息，他的状态数据是以块为单位的。所以我们要拿到一条交易的执行信息是，只能从上一个块的状态开始，依次执行该块中在他之前的所有交易才能拿到。==</p></blockquote><h2 id="debug-tracetransaction" tabindex="-1"><a class="header-anchor" href="#debug-tracetransaction" aria-hidden="true">#</a> debug.traceTransaction</h2><p>其实上面的总结就概括了该 API 的原理。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// TraceTransaction returns the structured logs created during the execution of EVM</span>
<span class="token comment">// and returns them as a JSON object.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>API<span class="token punctuation">)</span> <span class="token function">TraceTransaction</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> config <span class="token operator">*</span>TraceConfig<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	found<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> blockHash<span class="token punctuation">,</span> blockNumber<span class="token punctuation">,</span> index<span class="token punctuation">,</span> err <span class="token operator">:=</span> api<span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">GetTransaction</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
	block<span class="token punctuation">,</span> err <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">blockByNumberAndHash</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> rpc<span class="token punctuation">.</span><span class="token function">BlockNumber</span><span class="token punctuation">(</span>blockNumber<span class="token punctuation">)</span><span class="token punctuation">,</span> blockHash<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
	msg<span class="token punctuation">,</span> vmctx<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> release<span class="token punctuation">,</span> err <span class="token operator">:=</span> api<span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">StateAtTransaction</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> reexec<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
	txctx <span class="token operator">:=</span> <span class="token operator">&amp;</span>Context<span class="token punctuation">{</span>
		BlockHash<span class="token punctuation">:</span>   blockHash<span class="token punctuation">,</span>
		BlockNumber<span class="token punctuation">:</span> block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		TxIndex<span class="token punctuation">:</span>     <span class="token function">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
		TxHash<span class="token punctuation">:</span>      hash<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">traceTx</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> txctx<span class="token punctuation">,</span> vmctx<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> config<span class="token punctuation">,</span> isSystemTx<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// traceTx configures a new tracer according to the provided configuration, and</span>
<span class="token comment">// executes the given message in the provided environment. The return value will</span>
<span class="token comment">// be tracer dependent.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>API<span class="token punctuation">)</span> <span class="token function">traceTx</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> message <span class="token operator">*</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> txctx <span class="token operator">*</span>Context<span class="token punctuation">,</span> vmctx vm<span class="token punctuation">.</span>BlockContext<span class="token punctuation">,</span> statedb <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> config <span class="token operator">*</span>TraceConfig<span class="token punctuation">,</span> isSystemTx <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Default tracer is the struct logger</span>
	tracer <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">NewStructLogger</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
	vmenv <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">NewEVM</span><span class="token punctuation">(</span>vmctx<span class="token punctuation">,</span> txContext<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> api<span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>Tracer<span class="token punctuation">:</span> tracer<span class="token punctuation">,</span> NoBaseFee<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Call Prepare to clear out the statedb access list</span>
	statedb<span class="token punctuation">.</span><span class="token function">SetTxContext</span><span class="token punctuation">(</span>txctx<span class="token punctuation">.</span>TxHash<span class="token punctuation">,</span> txctx<span class="token punctuation">.</span>TxIndex<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> core<span class="token punctuation">.</span><span class="token function">ApplyMessage</span><span class="token punctuation">(</span>vmenv<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>core<span class="token punctuation">.</span>GasPool<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddGas</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>GasLimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;tracing failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	tracer<span class="token punctuation">.</span><span class="token function">CaptureSystemTxEnd</span><span class="token punctuation">(</span>intrinsicGas<span class="token punctuation">)</span>
	<span class="token keyword">return</span> tracer<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行一个交易要先拿到 StateDB，<code> api.backend.StateAtTransaction(ctx, block, int(index), reexec)</code>，然后再调用 <code>core.ApplyMessage</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// stateAtTransaction returns the execution environment of a certain transaction.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>eth <span class="token operator">*</span>Ethereum<span class="token punctuation">)</span> <span class="token function">stateAtTransaction</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> txIndex <span class="token builtin">int</span><span class="token punctuation">,</span> reexec <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>BlockContext<span class="token punctuation">,</span> <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> tracers<span class="token punctuation">.</span>StateReleaseFunc<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Create the parent state database</span>
	parent <span class="token operator">:=</span> eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">GetBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>BlockContext<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parent %#x not found&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Lookup the statedb of parent block from the live database,</span>
	<span class="token comment">// otherwise regenerate it on the flight.</span>
	statedb<span class="token punctuation">,</span> release<span class="token punctuation">,</span> err <span class="token operator">:=</span> eth<span class="token punctuation">.</span><span class="token function">stateAtBlock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> reexec<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>BlockContext<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	
	<span class="token keyword">for</span> idx<span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> block<span class="token punctuation">.</span><span class="token function">Transactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
		<span class="token comment">// Assemble the transaction call message and return if the requested offset</span>
		msg<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">TransactionToMessage</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> signer<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BaseFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		txContext <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">NewEVMTxContext</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
		context <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">NewEVMBlockContext</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> idx <span class="token operator">==</span> txIndex <span class="token punctuation">{</span>
			<span class="token keyword">return</span> msg<span class="token punctuation">,</span> context<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> release<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// Not yet the searched for transaction, execute on top of the current state</span>
		vmenv <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">NewEVM</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> txContext<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		statedb<span class="token punctuation">.</span><span class="token function">SetTxContext</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">ApplyMessage</span><span class="token punctuation">(</span>vmenv<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>core<span class="token punctuation">.</span>GasPool<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddGas</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Gas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>BlockContext<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;transaction %#x failed: %v&quot;</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// Ensure any modifications are committed to the state</span>
		<span class="token comment">// Only delete empty objects if EIP158/161 (a.k.a Spurious Dragon) is in effect</span>
		statedb<span class="token punctuation">.</span><span class="token function">Finalise</span><span class="token punctuation">(</span>vmenv<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>BlockContext<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;transaction index %d out of range for block %#x&quot;</span><span class="token punctuation">,</span> txIndex<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，他就是拿到上一个区块的状态，然后依次执行完该条交易之前的所有交易，才能拿到该交易执行前的 StateDB 状态。</p><p><strong>所以，我们如果要拿到一条合约交易的内部交易的信息时，我们在调用 core.ApplyMessage之后，不能使用 Finalise 方法提交，直接去拿 journal 中的数据即可。</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> core<span class="token punctuation">.</span><span class="token function">ApplyMessage</span><span class="token punctuation">(</span>vmenv<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>core<span class="token punctuation">.</span>GasPool<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddGas</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>GasLimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;tracing failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
accounts <span class="token operator">:=</span> statedb<span class="token punctuation">.</span><span class="token function">GetRpcAccountChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  BalanceChanges <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>state<span class="token punctuation">.</span>RpcChangedAccount
<span class="token punctuation">}</span><span class="token punctuation">{</span>
  BalanceChanges<span class="token punctuation">:</span> accounts<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//resultJson := json.Marshal(result)</span>
<span class="token keyword">return</span> <span class="token operator">&amp;</span>txTraceResult<span class="token punctuation">{</span>
  TxHash<span class="token punctuation">:</span> txctx<span class="token punctuation">.</span>TxHash<span class="token punctuation">,</span>
  Result<span class="token punctuation">:</span> result<span class="token punctuation">,</span>
  Error<span class="token punctuation">:</span>  <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 journal 不是public的，所以需要自己在 stateDB 中写一个暴露函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">GetRpcAccountChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>RpcChangedAccount <span class="token punctuation">{</span>
	<span class="token keyword">var</span> accounts <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>RpcChangedAccount<span class="token punctuation">)</span>
	<span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>journal<span class="token punctuation">.</span>dirties <span class="token punctuation">{</span>
		obj<span class="token punctuation">,</span> exist <span class="token operator">:=</span> s<span class="token punctuation">.</span>stateObjects<span class="token punctuation">[</span>addr<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		rca <span class="token operator">:=</span> <span class="token operator">&amp;</span>RpcChangedAccount<span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">if</span> obj<span class="token punctuation">.</span>origin <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			rca<span class="token punctuation">.</span>BeforeNonce <span class="token operator">=</span> obj<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>Nonce
			rca<span class="token punctuation">.</span>BeforeBalance <span class="token operator">=</span> obj<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>Balance
		<span class="token punctuation">}</span>
		rca<span class="token punctuation">.</span>AfterNonce <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Nonce
		rca<span class="token punctuation">.</span>AfterBalance <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Balance
		accounts<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> rca
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> accounts
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，拿到内部交易的信息的目的就达到了。我们可以清楚的知道一条合约交易内部影响的各个账号的余额变化情况。</p><p>下面是一个例子</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> debug.traceTransaction<span class="token punctuation">(</span><span class="token string">&quot;0x55074ba3b2f162a515eec3c8ea31bba4b7be80aeae3e1b052f1c3a46910f676a&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  result: <span class="token punctuation">{</span>
    BalanceChanges: <span class="token punctuation">{</span>
      0x1bc0631e1d71ff2571a559374ad98f9f3860a271: <span class="token punctuation">{</span>
        AfterBalance: <span class="token string">&quot;1935374000000106&quot;</span>,
        AfterNonce: <span class="token number">4</span>,
        BeforeBalance: <span class="token string">&quot;1895374000000106&quot;</span>,
        BeforeNonce: <span class="token number">4</span>
      <span class="token punctuation">}</span>,
      0x2ee393c739036a7660ec11bf2101d537eb52f3ac: <span class="token punctuation">{</span>
        AfterBalance: <span class="token string">&quot;17582841999999972&quot;</span>,
        AfterNonce: <span class="token number">79</span>,
        BeforeBalance: <span class="token string">&quot;18066852999999972&quot;</span>,
        BeforeNonce: <span class="token number">78</span>
      <span class="token punctuation">}</span>,
      0x9abae1b279a4be25aeae49a33e807cdd3ccffa0c: <span class="token punctuation">{</span>
        AfterBalance: <span class="token string">&quot;1469977999999213&quot;</span>,
        AfterNonce: <span class="token number">26</span>,
        BeforeBalance: <span class="token string">&quot;1145977999999213&quot;</span>,
        BeforeNonce: <span class="token number">26</span>
      <span class="token punctuation">}</span>,
      0xbd268b9e9836aa1ae0806c6a89019aead5b825bc: <span class="token punctuation">{</span>
        AfterBalance: <span class="token string">&quot;0&quot;</span>,
        AfterNonce: <span class="token number">1</span>,
        BeforeBalance: <span class="token string">&quot;0&quot;</span>,
        BeforeNonce: <span class="token number">1</span>
      <span class="token punctuation">}</span>,
      0xfffffffffffffffffffffffffffffffffffffffe: <span class="token punctuation">{</span>
        AfterBalance: <span class="token string">&quot;120011000000000&quot;</span>,
        AfterNonce: <span class="token number">0</span>,
        BeforeBalance: null,
        BeforeNonce: <span class="token number">0</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>,
  txHash: <span class="token string">&quot;0x55074ba3b2f162a515eec3c8ea31bba4b7be80aeae3e1b052f1c3a46910f676a&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),o=[p];function c(i,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","statedb_execute.html.vue"]]);export{k as default};
