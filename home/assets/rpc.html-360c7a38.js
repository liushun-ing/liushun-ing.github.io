import{_ as e,r as o,o as c,c as l,b as n,d as s,e as t,a as p}from"./app-00b5ba62.js";const i="/home/assets/arch_grpc-a135c46c.png",u="/home/assets/decode-664f622c.png",r="/home/assets/gateway-96f164a8.png",k={},d=p(`<h1 id="go-rpc" tabindex="-1"><a class="header-anchor" href="#go-rpc" aria-hidden="true">#</a> Go-RPC</h1><p>RPC是远程过程调用的缩写（Remote Procedure Call），通俗地说就是调用远处的一个函数。远处到底有多远呢？可能是同一个文件内的不同函数，也可能是同一个机器的另一个进程的函数，还可能是远在火星好奇号上面的某个秘密方法。因为RPC涉及的函数可能非常之远，远到它们之间说着完全不同的语言，语言就成了两边的沟通障碍。而Protobuf因为支持多种不同的语言（甚至不支持的语言也可以扩展支持），其本身特性也非常方便描述服务的接口（也就是方法列表），因此非常适合作为RPC世界的接口交流语言。</p><h2 id="rpc-入门" tabindex="-1"><a class="header-anchor" href="#rpc-入门" aria-hidden="true">#</a> RPC 入门</h2><p>RPC是远程过程调用的简称，是分布式系统中不同节点间流行的通信方式。</p><h3 id="rpc版-hello-world" tabindex="-1"><a class="header-anchor" href="#rpc版-hello-world" aria-hidden="true">#</a> RPC版 hello world</h3><p>Go语言的RPC包的路径为net/rpc，也就是放在了net包目录下面。先构造一个HelloService类型，其中的Hello方法用于实现打印功能：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token string">&quot;hello:&quot;</span> <span class="token operator">+</span> request
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中Hello方法必须满足Go语言的RPC规则：<strong>==方法只能有两个可序列化的参数，其中第二个参数是指针类型，并且返回一个error类型，同时必须是公开的方法。==</strong></p><p>然后就可以将HelloService类型的对象注册为一个RPC服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService&quot;</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>

    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ListenTCP error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Accept error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<strong>rpc.Register函数调用会将对象类型中所有满足RPC规则的对象方法注册为RPC函数，所有注册的方法会放在“HelloService”服务空间之下</strong>。然后建立一个唯一的TCP链接，并且通过rpc.ServeConn函数在该TCP链接上为对方提供RPC服务。</p><p>下面是客户端请求HelloService服务的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;dialing:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> reply <span class="token builtin">string</span>
    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// liushun@liushun rpc % go run HelloClient.go </span>
<span class="token comment">// hello:hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是通过rpc.Dial拨号RPC服务，然后通过client.Call调用具体的RPC方法。在调用client.Call时，<strong>第一个参数是用点号链接的RPC服务名字和方法名字，第二和第三个参数分别我们定义RPC方法的两个参数。</strong></p><h3 id="更安全的rpc接口" tabindex="-1"><a class="header-anchor" href="#更安全的rpc接口" aria-hidden="true">#</a> 更安全的RPC接口</h3><p>在涉及RPC的应用中，作为开发人员一般至少有三种角色：<strong>首先是服务端实现RPC方法的开发人员，其次是客户端调用RPC方法的人员，最后也是最重要的是制定服务端和客户端RPC接口规范的设计人员</strong>。在前面的例子中为了简化将以上几种角色的工作全部放到了一起，虽然看似实现简单，但是不利于后期的维护和工作的切割。</p><p>如果要重构HelloService服务，第一步需要明确服务的名字和接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> HelloServiceName <span class="token operator">=</span> <span class="token string">&quot;path/to/pkg.HelloService&quot;</span>

<span class="token keyword">type</span> HelloServiceInterface <span class="token operator">=</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">RegisterHelloService</span><span class="token punctuation">(</span>svc HelloServiceInterface<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span>HelloServiceName<span class="token punctuation">,</span> svc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将RPC服务的接口规范分为三个部分：<strong>首先是服务的名字，然后是服务要实现的详细方法列表，最后是注册该类型服务的函数</strong>。为了避免名字冲突，我们在RPC服务的名字中增加了包路径前缀（这个是RPC服务抽象的包路径，并非完全等价Go语言的包路径）。RegisterHelloService注册服务时，编译器会要求传入的对象满足HelloServiceInterface接口。</p><p>在定义了RPC服务接口规范之后，客户端就可以根据规范编写RPC调用的代码了：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>HelloServiceName<span class="token operator">+</span><span class="token string">&quot;.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中唯一的变化是client.Call的第一个参数用HelloServiceName+&quot;.Hello&quot;代替了&quot;HelloService.Hello&quot;。然而通过client.Call函数调用RPC方法依然比较繁琐，同时参数的类型依然无法得到编译器提供的安全保障。</p><p>为了简化客户端用户调用RPC函数，可以在接口规范部分增加对客户端的简单包装：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloServiceClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>

<span class="token comment">// 这行代码的作用是为了保证 HelloServiceClient 实现了 HelloServiceInterface 接口，在编译期间保证</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> HelloServiceInterface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>HelloServiceClient<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">DialHelloService</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>HelloServiceClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    c<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>HelloServiceClient<span class="token punctuation">{</span>Client<span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloServiceClient<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>HelloServiceName<span class="token operator">+</span><span class="token string">&quot;.Hello&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口规范中针对客户端新增加了HelloServiceClient类型，该类型也必须满足HelloServiceInterface接口，这样客户端用户就可以直接通过接口对应的方法调用RPC函数。同时提供了一个DialHelloService方法，直接拨号HelloService服务。</p><p>基于新的客户端接口，简化客户端用户的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DialHelloService</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">//...</span>
    <span class="token keyword">var</span> reply <span class="token builtin">string</span>
    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在客户端用户不用再担心RPC方法名字或参数类型不匹配等低级错误的发生。</p><p>最后是基于RPC接口规范编写真实的服务端代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token string">&quot;hello:&quot;</span> <span class="token operator">+</span> request
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">RegisterHelloService</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>

    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ListenTCP error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">{</span> <span class="token comment">// 循环监听</span>
        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Accept error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token comment">// 创建 goroutine</span>
        <span class="token keyword">go</span> rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新的RPC服务端实现中，用RegisterHelloService函数来注册函数，这样不仅可以避免命名服务名称的工作，同时也保证了传入的服务对象满足了RPC接口的定义。最后新的服务改为支持多个TCP链接，然后为每个TCP链接提供RPC服务。</p><h3 id="跨语言的rpc" tabindex="-1"><a class="header-anchor" href="#跨语言的rpc" aria-hidden="true">#</a> 跨语言的RPC</h3><p>标准库的RPC默认采用Go语言特有的gob编码，因此从其它语言调用Go语言实现的RPC服务将比较困难。在互联网的微服务时代，每个RPC以及服务的使用者都可能采用不同的编程语言，因此跨语言是互联网时代RPC的一个首要条件。得益于RPC的框架设计，Go语言的RPC其实也是很容易实现跨语言支持的。</p><p>Go语言的RPC框架有两个比较有特色的设计：<strong>一个是RPC数据打包时可以通过插件实现自定义的编码和解码</strong>；另一个是<strong>RPC建立在抽象的io.ReadWriteCloser接口之上的，可以将RPC架设在不同的通讯协议之上</strong>。这里尝试通过官方自带的net/rpc/jsonrpc扩展实现一个跨语言的RPC。(这里其实就是将原本的使用 go 语言的消息编码系统，改成使用 json 消息格式进行通信。)</p><p>首先是基于json编码重新实现RPC服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService&quot;</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// handle error</span>

    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// handle error</span>
        <span class="token keyword">go</span> rpc<span class="token punctuation">.</span><span class="token function">ServeCodec</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewServerCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中<strong>最大的变化是用rpc.ServeCodec函数替代了rpc.ServeConn函数，传入的参数是针对服务端的json编解码器</strong>。</p><p>然后是实现json版本的客户端：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// handle error</span>
    client <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">NewClientWithCodec</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewClientCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> reply <span class="token builtin">string</span>
    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
    <span class="token comment">// handle error</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先手工调用net.Dial函数建立TCP链接，然后<strong>基于该链接建立针对客户端的json编解码器</strong>。</p><p>在确保客户端可以正常调用RPC服务的方法之后，用一个普通的TCP服务代替Go语言版本的RPC服务，这样可以查看客户端调用时发送的数据格式。比如通过nc命令<code>nc -l 1234</code>在同样的端口启动一个TCP服务。然后再次执行一次RPC调用将会发现nc输出了以下的信息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;method&quot;</span><span class="token operator">:</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;params&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是一个json编码的数据，其中method部分对应要调用的rpc服务和方法组合成的名字，params部分的第一个元素为参数，id是由调用端维护的一个唯一的调用编号。</p><p>请求的json数据对象在内部对应两个结构体：客户端是clientRequest，服务端是serverRequest。clientRequest和serverRequest结构体的内容基本是一致的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> clientRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Method <span class="token builtin">string</span> <span class="token string">\`json:&quot;method&quot;\`</span>
	Params <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>any <span class="token string">\`json:&quot;params&quot;\`</span>
	Id     <span class="token builtin">uint64</span> <span class="token string">\`json:&quot;id&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> serverRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Method <span class="token builtin">string</span>           <span class="token string">\`json:&quot;method&quot;\`</span>
	Params <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;params&quot;\`</span>
	Id     <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;id&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在获取到RPC调用对应的json数据后，可以通过直接向架设了RPC服务的TCP服务器发送json数据模拟RPC方法调用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ echo -e &#39;{&quot;method&quot;:&quot;HelloService.Hello&quot;,&quot;params&quot;:[&quot;hello&quot;],&quot;id&quot;:1}&#39; | nc localhost 1234
1.	输出一个 JSON-RPC 请求字符串，-e 完成字符转义。
2.	通过管道将该字符串传递给 nc 命令，| 将前一个命令的输出作为后一个命令的输入。
3.	使用 nc 将请求发送到本地计算机的 1234 端口。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的结果也是一个json格式的数据：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">&quot;result&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello:hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;error&quot;</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中id对应输入的id参数，result为返回的结果，error部分在出问题时表示错误信息。对于顺序调用来说，id不是必须的。但是Go语言的RPC框架支持异步调用，当返回结果的顺序和调用的顺序不一致时，可以通过id来识别对应的调用。</p><p>返回的json数据也是对应内部的两个结构体：客户端是clientResponse，服务端是serverResponse。两个结构体的内容同样也是类似的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> clientResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id     <span class="token builtin">uint64</span>           <span class="token string">\`json:&quot;id&quot;\`</span>
	Result <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;result&quot;\`</span>
	Error  any              <span class="token string">\`json:&quot;error&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> serverResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id     <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;id&quot;\`</span>
	Result any              <span class="token string">\`json:&quot;result&quot;\`</span>
	Error  any              <span class="token string">\`json:&quot;error&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此无论采用何种语言，只要遵循同样的json结构，以同样的流程就可以和Go语言编写的RPC服务进行通信。这样就实现了跨语言的RPC。</p><h3 id="http上的rpc" tabindex="-1"><a class="header-anchor" href="#http上的rpc" aria-hidden="true">#</a> Http上的RPC</h3><p>Go语言内在的RPC框架已经支持在Http协议上提供RPC服务。但是框架的http服务同样采用了内置的gob协议，并且没有提供采用其它协议的接口，因此从其它语言依然无法访问的。在前面的例子中，已经实现了在TCP协议之上运行jsonrpc服务，并且通过nc命令行工具成功实现了RPC方法调用。现在尝试在http协议上提供jsonrpc服务。</p><p>新的RPC服务其实是一个类似REST规范的接口，接收请求并采用相应处理流程：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService&quot;</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>

  	<span class="token comment">// 设置处理器</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/jsonrpc&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> conn io<span class="token punctuation">.</span>ReadWriteCloser <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            io<span class="token punctuation">.</span>Writer
            io<span class="token punctuation">.</span>ReadCloser
        <span class="token punctuation">}</span><span class="token punctuation">{</span>
            ReadCloser<span class="token punctuation">:</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>
            Writer<span class="token punctuation">:</span>     w<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        rpc<span class="token punctuation">.</span><span class="token function">ServeRequest</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewServerCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:1234&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RPC的服务架设在“/jsonrpc”路径，在处理函数中基于http.ResponseWriter和http.Request类型的参数构造一个io.ReadWriteCloser类型的conn通道。然后基于conn构建针对服务端的json编码解码器。最后通过rpc.ServeRequest函数为每次请求处理一次RPC方法调用。</p><p>模拟一次RPC调用的过程就是向该链接发送一个json字符串：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ curl localhost:1234/jsonrpc -X POST --data &#39;{&quot;method&quot;:&quot;HelloService.Hello&quot;,&quot;params&quot;:[&quot;hello&quot;],&quot;id&quot;:0}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回的结果依然是json字符串：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">&quot;result&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello:hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;error&quot;</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就可以很方便地从不同语言中访问RPC服务了。</p><h2 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf" aria-hidden="true">#</a> Protobuf</h2><p>Protobuf是Protocol Buffers的简称，它是Google公司开发的一种数据描述语言，并于2008年对外开源。Protobuf刚开源时的定位类似于XML、JSON等数据描述语言，通过附带工具生成代码并实现将结构化数据序列化的功能，有proto.Marshal和 Unmarshal 方法。但是更关注的是Protobuf作为接口规范的描述语言，可以作为设计安全的跨语言PRC接口的基础工具。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">service</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>
    <span class="token keyword">rpc</span> <span class="token function">Hello</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 protoc 中有 service 服务的情况，运行<code>protoc --go_out=. hello.proto</code>指令并不会对 service 进行处理，这是因为世界上的RPC实现有千万种，protoc编译器并不知道该如何为HelloService服务生成代码。其中<code>go_out</code>参数告知protoc编译器去加载对应的protoc-gen-go工具，然后通过该工具生成代码，生成代码放到当前目录。最后是一系列要处理的protobuf文件的列表。</p><p>不过在protoc-gen-go内部已经集成了一个名字为<code>grpc</code>的插件，可以针对gRPC生成代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ protoc --go_out=plugins=grpc:. hello.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在生成的代码中多了一些类似HelloServiceServer、HelloServiceClient的新类型。这些类型是为gRPC服务的，并不符合上述的 RPC 要求。</p><blockquote><p>不过gRPC插件提供了改进的思路，下面将探索如何为我们的RPC生成安全的代码。----&gt; 自己写插件</p></blockquote><h3 id="定制代码生成器" tabindex="-1"><a class="header-anchor" href="#定制代码生成器" aria-hidden="true">#</a> 定制代码生成器</h3>`,72),v=n("p",null,"[!IMPORTANT]",-1),m={href:"https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch4-rpc/ch4-03-netrpc-hack.html",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>Protobuf的protoc编译器是通过插件机制实现对不同语言的支持。比如protoc命令出现<code>--xxx_out</code>格式的参数，那么protoc将首先查询是否有内置的xxx插件，如果没有内置的xxx插件那么将继续查询当前系统中是否存在protoc-gen-xxx命名的可执行程序，最终通过查询到的插件生成代码。对于Go语言的protoc-gen-go插件来说，里面又实现了一层静态插件系统。比如protoc-gen-go内置了一个gRPC插件，用户可以通过<code>--go_out=plugins=grpc</code>参数来生成gRPC相关代码，否则只会针对message生成相关代码。</p><h2 id="玩转-rpc" tabindex="-1"><a class="header-anchor" href="#玩转-rpc" aria-hidden="true">#</a> 玩转 RPC</h2><p>在不同的场景中RPC有着不同的需求，因此开源的社区就诞生了各种RPC框架。这里尝试Go内置RPC框架在一些比较特殊场景的用法。</p><h3 id="客户端-rpc-实现原理" tabindex="-1"><a class="header-anchor" href="#客户端-rpc-实现原理" aria-hidden="true">#</a> 客户端 RPC 实现原理</h3><p>Go语言的RPC库最简单的使用方式是通过<code>Client.Call</code>方法进行同步阻塞调用，该方法的实现如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Call invokes the named function, waits for it to complete, and returns its error status.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args any<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	call <span class="token operator">:=</span> <span class="token operator">&lt;-</span>client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Done
	<span class="token keyword">return</span> call<span class="token punctuation">.</span>Error
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>首先通过<code>Client.Go</code>方法进行一次异步调用，返回一个表示这次调用的<code>Call</code>结构体。然后等待<code>Call</code>结构体的Done管道返回调用结果。</strong></p><p>也可以通过<code>Client.Go</code>方法异步调用前面的HelloService服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>client <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	helloCall <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// 这里传 nil 会自动创建</span>

	<span class="token comment">// do some thing</span>

	helloCall <span class="token operator">=</span> <span class="token operator">&lt;-</span>helloCall<span class="token punctuation">.</span>Done
	<span class="token keyword">if</span> err <span class="token operator">:=</span> helloCall<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	args <span class="token operator">:=</span> helloCall<span class="token punctuation">.</span>Args<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	reply <span class="token operator">:=</span> helloCall<span class="token punctuation">.</span>Reply<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token operator">*</span>reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在异步调用命令发出后，一般会执行其他的任务，因此异步调用的输入参数和返回值可以通过返回的Call变量进行获取。</p><p>执行异步调用的<code>Client.Go</code>方法实现如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args any<span class="token punctuation">,</span> reply any<span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>
	call <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Call<span class="token punctuation">)</span>
	call<span class="token punctuation">.</span>ServiceMethod <span class="token operator">=</span> serviceMethod
	call<span class="token punctuation">.</span>Args <span class="token operator">=</span> args
	call<span class="token punctuation">.</span>Reply <span class="token operator">=</span> reply
	<span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// buffered.</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// If caller passes done != nil, it must arrange that</span>
		<span class="token comment">// done has enough buffer for the number of simultaneous</span>
		<span class="token comment">// RPCs that will be using that channel. If the channel</span>
		<span class="token comment">// is totally unbuffered, it&#39;s best not to run at all.</span>
		<span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">&quot;rpc: done channel is unbuffered&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	call<span class="token punctuation">.</span>Done <span class="token operator">=</span> done
	client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	<span class="token keyword">return</span> call
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是构造一个表示当前调用的call变量，然后通过<code>client.send</code>将call的完整参数发送到RPC框架。<code>client.send</code>方法调用是线程安全的，因此可以从多个Goroutine同时向同一个RPC链接发送调用指令。</p><p>当调用完成或者发生错误时，将调用<code>call.done</code>方法通知完成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> call<span class="token punctuation">.</span>Done <span class="token operator">&lt;-</span> call<span class="token punctuation">:</span>
        <span class="token comment">// ok</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token comment">// We don&#39;t want to block here. It is the caller&#39;s responsibility to make</span>
        <span class="token comment">// sure the channel has enough buffer space. See comment in Go().</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从<code>Call.done</code>方法的实现可以得知<code>call.Done</code>管道会将处理后的call返回。</p><blockquote><p>总的来说，就是通过管道机制，除法异步调用，在异步调用完成之后，将数据通过管道返回给客户端</p></blockquote><h3 id="基于rpc实现watch功能" tabindex="-1"><a class="header-anchor" href="#基于rpc实现watch功能" aria-hidden="true">#</a> 基于RPC实现Watch功能</h3><blockquote><p>[!NOTE]</p><p><strong>这里指的是服务端提供 watch 函数，客户端调用这个函数，服务端开启监控，但是这时候客户端会阻塞，直到服务端监听到了某个值变化，给客户端返回了某个值。</strong></p></blockquote><p>在很多系统中都提供了Watch监视功能的接口，当系统满足某种条件时Watch方法返回监控的结果。在这里尝试通过RPC框架实现一个基本的Watch功能。如前文所描述，因为<code>client.send</code>是线程安全的，可以通过在不同的Goroutine中同时并发阻塞调用RPC方法。通过在一个独立的Goroutine中调用Watch函数进行监控。</p><p>为了便于演示，计划通过RPC构造一个简单的内存KV数据库。首先定义服务如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> KVStoreService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    m      <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
    filter <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span>
    mu     sync<span class="token punctuation">.</span>Mutex
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewKVStoreService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>KVStoreService <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>KVStoreService<span class="token punctuation">{</span>
        m<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        filter<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>m</code>成员是一个map类型，用于存储KV数据。<code>filter</code>成员对应每个Watch调用时定义的过滤器函数列表。而<code>mu</code>成员为互斥锁，用于在多个Goroutine访问或修改时对其它成员提供保护。</p><p>然后就是Get和Set方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> p<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
        <span class="token operator">*</span>value <span class="token operator">=</span> v
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;not found&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>kv <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    key<span class="token punctuation">,</span> value <span class="token operator">:=</span> kv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> oldValue <span class="token operator">:=</span> p<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> oldValue <span class="token operator">!=</span> value <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fn <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>filter <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    p<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Set方法中，输入参数是key和value组成的数组，用一个匿名的空结构体表示忽略了输出参数。当修改某个key对应的值时会调用每一个过滤器函数。</p><p>而过滤器列表在Watch方法中提供：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span> <span class="token function">Watch</span><span class="token punctuation">(</span>timeoutSecond <span class="token builtin">int</span><span class="token punctuation">,</span> keyChanged <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    id <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;watch-%s-%03d&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// buffered</span>

    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>filter<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ch <span class="token operator">&lt;-</span> key <span class="token punctuation">}</span>
    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>timeoutSecond<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> key <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
        <span class="token operator">*</span>keyChanged <span class="token operator">=</span> key
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Watch方法的输入参数是超时的秒数。当有key变化时将key作为返回值返回。如果超过时间后依然没有key被修改，则返回超时的错误。Watch的实现中，用唯一的id表示每个Watch调用，然后根据id将自身对应的过滤器函数注册到<code>p.filter</code>列表。</p><p>注册并启动KVStoreService服务。然后在客户端使用Watch方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>client <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyChanged <span class="token builtin">string</span>
      	<span class="token comment">// 这里会阻塞，直到调用 set 方法改变了某个 key。</span>
        err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;KVStoreService.Watch&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>keyChanged<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;watch:&quot;</span><span class="token punctuation">,</span> keyChanged<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  	<span class="token comment">// 在这里最好停一下，保证 Watch 一定在 Set 之前调用</span>
  	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>

    err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>
        <span class="token string">&quot;KVStoreService.Set&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc-value&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先启动一个独立的Goroutine监控key的变化。同步的watch调用会阻塞，直到有key发生变化或者超时。然后在通过Set方法修改KV值时，服务器会将变化的key通过Watch方法返回。这样就可以实现对某些状态的监控。</p><h3 id="反向rpc" tabindex="-1"><a class="header-anchor" href="#反向rpc" aria-hidden="true">#</a> 反向RPC</h3><p>通常的RPC是基于C/S结构，RPC的服务端对应网络的服务器，RPC的客户端也对应网络客户端。但是对于一些特殊场景，比如在公司内网提供一个RPC服务，但是在外网无法链接到内网的服务器。这种时候可以参考类似反向代理的技术，首先从内网主动链接到外网的TCP服务器，然后基于TCP链接向外网提供RPC服务。</p><p>以下是启动反向RPC服务的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>

  	<span class="token comment">// 反复去连接</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
     		<span class="token comment">// 充当客户端，去连接外网</span>
        conn<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:1234&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> conn <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>

        rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
        conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反向RPC的内网服务将不再主动提供TCP监听服务，而是首先主动链接到对方的TCP服务器。然后基于每个建立的TCP链接向对方提供RPC服务。</p><p>而RPC客户端则需要在一个公共的地址提供一个TCP服务，用于接受RPC服务器的链接请求：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 监听，等待客户端连接</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ListenTCP error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    clientChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>

    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">{</span>
            conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Accept error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            clientChan <span class="token operator">&lt;-</span> rpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">doClientWork</span><span class="token punctuation">(</span>clientChan<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当每个链接建立后，基于网络链接构造RPC客户端对象并发送到clientChan管道。</p><p>客户端执行RPC调用的操作在doClientWork函数完成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>clientChan <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client <span class="token operator">:=</span> <span class="token operator">&lt;-</span>clientChan
    <span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用完了之后，就会关闭当前程序，等下次需要再次调用 rpc 的服务时，需要重启进程</span>

  	<span class="token comment">// 反过来去调用客户端的 rpc 服务</span>
    <span class="token keyword">var</span> reply <span class="token builtin">string</span>
    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先从管道去取一个RPC客户端对象，并且通过defer语句指定在函数退出前关闭客户端。然后是执行正常的RPC调用。</p><h3 id="上下文信息" tabindex="-1"><a class="header-anchor" href="#上下文信息" aria-hidden="true">#</a> 上下文信息</h3><p>基于上下文可以针对不同客户端提供定制化的RPC服务。可以通过为每个链接提供独立的RPC服务来实现对上下文特性的支持。</p><p>首先改造HelloService，里面增加了对应链接的conn成员：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    conn    net<span class="token punctuation">.</span>Conn
    isLogin <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Login</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> request <span class="token operator">!=</span> <span class="token string">&quot;user:password&quot;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;auth failed&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;login ok&quot;</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>isLogin <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;please login&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token string">&quot;hello:&quot;</span> <span class="token operator">+</span> request <span class="token operator">+</span> <span class="token string">&quot;, from&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后为每个链接启动独立的RPC服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;ListenTCP error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Accept error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

            p <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            p<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>HelloService<span class="token punctuation">{</span>conn<span class="token punctuation">:</span> conn<span class="token punctuation">}</span><span class="token punctuation">)</span>
            p<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可以要求在客户端链接RPC服务时，首先要执行登陆操作，登陆成功后才能正常执行其他的服务。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// client</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:1234&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;net.Dial:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	client <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	<span class="token keyword">var</span> reply <span class="token builtin">string</span>
	err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Login&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user:password&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user:password&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="grpc入门" tabindex="-1"><a class="header-anchor" href="#grpc入门" aria-hidden="true">#</a> gRPC入门</h2><p>gRPC是Google公司基于Protobuf开发的跨语言的开源RPC框架。gRPC基于HTTP/2协议设计，可以基于一个HTTP/2链接提供多个服务，对于移动设备更加友好。</p><img src="`+i+`" alt="screenshot2024-07-24 09.27.44" style="zoom:33%;"><p><strong>最底层为TCP或Unix Socket协议，在此之上是HTTP/2协议的实现，然后在HTTP/2协议之上又构建了针对Go语言的gRPC核心库。应用程序通过gRPC插件生产的Stub代码和gRPC核心库通信，也可以直接和gRPC核心库通信。</strong></p><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h3><p>如果从Protobuf的角度看，gRPC只不过是一个针对service接口生成代码的生成器。</p><p>创建hello.proto文件，定义HelloService接口：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> main<span class="token punctuation">;</span>

<span class="token comment">// 高版本的 protoc-gen-go 需要指明包路径和包名</span>
<span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">&quot;.;test4&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">service</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>
    <span class="token keyword">rpc</span> <span class="token function">Hello</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用protoc-gen-go内置的gRPC插件生成gRPC代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>protoc <span class="token parameter variable">--go_out</span><span class="token operator">=</span>plugins<span class="token operator">=</span>grpc:. hello.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>gRPC插件会为服务端和客户端生成不同的接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// HelloServiceServer is the server API for HelloService service.</span>
<span class="token keyword">type</span> HelloServiceServer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// HelloServiceClient is the client API for HelloService service.</span>
<span class="token comment">//</span>
<span class="token comment">// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.</span>
<span class="token keyword">type</span> HelloServiceClient <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>String<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gRPC通过context.Context参数，为每个方法调用提供了上下文支持。客户端在调用方法的时候，可以通过可选的grpc.CallOption类型的参数提供额外的上下文信息。</p><p>基于服务端的HelloServiceServer接口可以重新实现HelloService服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloServiceImpl <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloServiceImpl<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>
    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> args <span class="token operator">*</span>String<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    reply <span class="token operator">:=</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;hello:&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> reply<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gRPC服务的启动流程和标准库的RPC服务启动流程类似：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    grpcServer <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">RegisterHelloServiceServer</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloServiceImpl<span class="token punctuation">)</span><span class="token punctuation">)</span>

    lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    grpcServer<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是通过<code>grpc.NewServer()</code>构造一个gRPC服务对象，然后通过gRPC插件生成的RegisterHelloServiceServer函数注册实现的HelloServiceImpl服务。然后通过<code>grpcServer.Serve(lis)</code>在一个监听端口上提供gRPC服务。</p><p>然后就可以通过客户端链接gRPC服务了：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Dial 方法已经被废弃了</span>
	clientConn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:1234&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">defer</span> clientConn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	client <span class="token operator">:=</span> <span class="token function">NewHelloServiceClient</span><span class="token punctuation">(</span>clientConn<span class="token punctuation">)</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;hello yeah&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中grpc.NewClient负责和gRPC服务建立链接，然后NewHelloServiceClient函数基于已经建立的链接构造HelloServiceClient对象。返回的client其实是一个HelloServiceClient接口对象，通过接口定义的方法就可以调用服务端对应的gRPC服务提供的方法。</p><p>gRPC和标准库的RPC框架有一个区别，gRPC生成的接口并不支持异步调用。不过可以在多个Goroutine之间安全地共享gRPC底层的HTTP/2链接，因此可以通过在另一个Goroutine阻塞调用的方式模拟异步调用（看不懂=_=）。</p><h3 id="grpc流" tabindex="-1"><a class="header-anchor" href="#grpc流" aria-hidden="true">#</a> gRPC流</h3><p>RPC是远程函数调用，因此每次调用的函数参数和返回值不能太大，否则将严重影响每次调用的响应时间。因此传统的RPC方法调用对于上传和下载较大数据量场景并不适合。同时传统RPC模式也不适用于对时间不确定的订阅和发布模式。为此，gRPC框架针对服务器端和客户端分别提供了流特性。</p><p>服务端或客户端的单向流是双向流的特例，在HelloService增加一个支持双向流的Channel方法：</p><div class="language-proto line-numbers-mode" data-ext="proto"><pre class="language-proto"><code>service HelloService {
    rpc Hello (String) returns (String);

    rpc Channel (stream String) returns (stream String);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键字stream指定启用流特性，参数部分是接收客户端参数的流，返回值是返回给客户端的流。</p><p>重新生成代码可以看到接口中新增加的Channel方法的定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// HelloServiceServer is the server API for HelloService service.</span>
<span class="token keyword">type</span> HelloServiceServer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">Channel</span><span class="token punctuation">(</span>HelloService_ChannelServer<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
<span class="token comment">// HelloServiceClient is the client API for HelloService service.</span>
<span class="token comment">//</span>
<span class="token comment">// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.</span>
<span class="token keyword">type</span> HelloServiceClient <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>String<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">Channel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span>HelloService_ChannelClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务端的Channel方法参数是一个新的HelloService_ChannelServer类型的参数，可以用于和客户端双向通信。客户端的Channel方法返回一个HelloService_ChannelClient类型的返回值，可以用于和服务端进行双向通信。</p><p>HelloService_ChannelServer和HelloService_ChannelClient均为接口类型：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloService_ChannelServer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	grpc<span class="token punctuation">.</span>ServerStream
<span class="token punctuation">}</span>

<span class="token keyword">type</span> HelloService_ChannelClient <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	grpc<span class="token punctuation">.</span>ClientStream
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现服务端和客户端的流辅助接口均定义了Send和Recv方法用于流数据的双向通信。</p><p>现在可以实现流服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloServiceImpl<span class="token punctuation">)</span> <span class="token function">Channel</span><span class="token punctuation">(</span>stream HelloService_ChannelServer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        args<span class="token punctuation">,</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">nil</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>

        reply <span class="token operator">:=</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;hello:&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

        err <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端在循环中接收客户端发来的数据，如果<strong>遇到io.EOF表示客户端流被关闭</strong>，如果函数退出表示服务端流关闭。生成返回的数据通过流发送给客户端，双向流数据的发送和接收都是完全独立的行为。需要注意的是，发送和接收的操作并不需要一一对应，用户可以根据真实场景进行组织代码。</p><p>客户端代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	clientConn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:1234&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> clientConn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	client <span class="token operator">:=</span> <span class="token function">NewHelloServiceClient</span><span class="token punctuation">(</span>clientConn<span class="token punctuation">)</span>

  <span class="token comment">// 获取流对象</span>
	stream<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 新建 goroutine 不断发消息</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 主 goroutine 接收消息并打印</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		reply<span class="token punctuation">,</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h3><p>在前一节中，基于Go内置的RPC库实现了一个简化版的Watch方法。基于Watch的思路虽然也可以构造发布和订阅系统，但是因为RPC缺乏流机制导致<strong>每次只能返回一个结果</strong>。在<strong>发布和订阅模式中，由调用者主动发起的发布行为类似一个普通函数调用，而被动的订阅者则类似gRPC客户端单向流中的接收者</strong>。现在可以尝试基于gRPC的流特性构造一个发布和订阅系统。</p><p>发布订阅是一个常见的设计模式，开源社区中已经存在很多该模式的实现。其中docker项目中提供了一个pubsub的极简实现，下面是基于pubsub包实现的本地发布订阅代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;github.com/moby/pubsub&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p <span class="token operator">:=</span> pubsub<span class="token punctuation">.</span><span class="token function">NewPublisher</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

  	<span class="token comment">// 实现上就是 p 这个结构体上维护了一个 map 对象，subscribers map[subscriber]topicFunc</span>
  	<span class="token comment">// subscriber 是一个管道，然后 topicFunc 要求是一个函数，返回值是 bool，这是决定当前这个消息需不需要交给这个订阅者处理的条件</span>
    golang <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">SubscribeTopic</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> key<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;golang:&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    docker <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">SubscribeTopic</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> key<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;docker:&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

  	<span class="token comment">// 每次发布消息时，就会根据订阅者的函数结果，然后朝管道里写入信息。</span>
  	<span class="token comment">// 这个和之前接触到的发布订阅有点差异，java 中发布订阅是一般是维护了一个回调函数列表，当符合订阅者条件时，就调用回调函数。go 得益于有 channel，就不需要有回调函数了，可以将函数处理逻辑交给自己处理。</span>
    <span class="token keyword">go</span> p<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> p<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;golang: https://golang.org&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> p<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;docker: https://www.docker.com/&quot;</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;golang topic:&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>golang<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;docker topic:&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>docker<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token operator">&lt;-</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>pubsub.NewPublisher</code>构造一个发布对象，<code>p.SubscribeTopic()</code>可以通过函数筛选感兴趣的主题进行订阅。</p><p>现在尝试基于gRPC和pubsub包，提供一个跨网络的发布和订阅系统。首先通过Protobuf定义一个发布订阅服务接口：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">service</span> <span class="token class-name">PubsubService</span> <span class="token punctuation">{</span>
    <span class="token keyword">rpc</span> <span class="token function">Publish</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">rpc</span> <span class="token function">Subscribe</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里返回值中是 stream 代表流向: 服务端（有发送函数） --&gt; 客户端（有接收函数）</span>
    <span class="token comment">// 如果参数中是 stream 则代表流向: 服务端（有接收函数） &lt;-- 客户端（有发送函数）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中Publish是普通的RPC方法，Subscribe则是一个单向的流服务。然后gRPC插件会为服务端和客户端生成对应的接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> PubsubServiceServer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Publish</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> PubsubService_SubscribeServer<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> PubsubServiceClient <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Publish</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">Subscribe</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span>
        PubsubService_SubscribeClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> PubsubService_SubscribeServer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span> <span class="token builtin">error</span>
    grpc<span class="token punctuation">.</span>ServerStream
<span class="token punctuation">}</span>
<span class="token keyword">type</span> PubsubService_SubscribeClient <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	grpc<span class="token punctuation">.</span>ClientStream
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为Subscribe是服务端的单向流，因此生成的HelloService_SubscribeServer接口中只有Send方法。</p><p>然后是实现发布方法和订阅方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 自定义 server，实现两个方法</span>
<span class="token keyword">type</span> PubsubService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pub <span class="token operator">*</span>pubsub<span class="token punctuation">.</span>Publisher
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewPubsubService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>PubsubService <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>PubsubService<span class="token punctuation">{</span>
		pub<span class="token punctuation">:</span> pubsub<span class="token punctuation">.</span><span class="token function">NewPublisher</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在两个方法中可以使用自己的实现方式。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>PubsubService<span class="token punctuation">)</span> <span class="token function">Publish</span><span class="token punctuation">(</span>
    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> arg <span class="token operator">*</span>String<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>pub<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>PubsubService<span class="token punctuation">)</span> <span class="token function">Subscribe</span><span class="token punctuation">(</span>
    arg <span class="token operator">*</span>String<span class="token punctuation">,</span> stream PubsubService_SubscribeServer<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    ch <span class="token operator">:=</span> p<span class="token punctuation">.</span>pub<span class="token punctuation">.</span><span class="token function">SubscribeTopic</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> key<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>arg<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  	<span class="token comment">// 这里就会一直卡着，直到 ch 关闭或者读取 ch 异常。</span>
    <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span>
        <span class="token keyword">if</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	grpcServer <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">RegisterPubsubServiceServer</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">,</span> <span class="token function">NewPubsubService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">=</span> grpcServer<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listen<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以从客户端向服务器发布信息了：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>clientConn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:1234&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// error handle</span>

<span class="token keyword">defer</span> clientConn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

client <span class="token operator">:=</span> <span class="token function">NewPubsubServiceClient</span><span class="token punctuation">(</span>clientConn<span class="token punctuation">)</span>

<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>
  context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;golang: hello Go&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// error handle</span>
<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>
  context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;docker: hello Docker&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// error handle</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以在另一个客户端进行订阅信息了（记住要先订阅消息，然后在发布消息）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>clientConn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:1234&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// error handle</span>

<span class="token keyword">defer</span> clientConn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

client <span class="token operator">:=</span> <span class="token function">NewPubsubServiceClient</span><span class="token punctuation">(</span>clientConn<span class="token punctuation">)</span>

stream<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>
  context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;golang:&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// error handle</span>

<span class="token comment">// 循环读取，保证只要有人发布消息，就能接收到</span>
<span class="token keyword">for</span> <span class="token punctuation">{</span>
  reply<span class="token punctuation">,</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此就基于gRPC简单实现了一个跨网络的发布和订阅服务。</p><h2 id="grpc-进阶" tabindex="-1"><a class="header-anchor" href="#grpc-进阶" aria-hidden="true">#</a> gRPC 进阶</h2><p>作为一个基础的RPC框架，安全和扩展是经常遇到的问题。下面简单介绍如何对gRPC进行安全认证。然后通过gRPC的截取器特性，以及如何通过截取器优雅地实现Token认证、调用跟踪以及Panic捕获等特性。最后介绍gRPC服务如何和其他Web服务共存。</p><h3 id="tsl证书认证-todo" tabindex="-1"><a class="header-anchor" href="#tsl证书认证-todo" aria-hidden="true">#</a> TSL证书认证（todo）</h3>`,109),g={href:"https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch4-rpc/ch4-05-grpc-hack.html",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="token认证" tabindex="-1"><a class="header-anchor" href="#token认证" aria-hidden="true">#</a> Token认证</h3><p>基于证书的认证是针对每个gRPC链接的认证。gRPC还为每个gRPC方法调用提供了认证支持，这样就基于用户Token对不同的方法访问进行权限管理。</p><p>要实现对每个gRPC方法进行认证，需要实现grpc.PerRPCCredentials接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// PerRPCCredentials defines the common interface for the credentials which need to</span>
<span class="token comment">// attach security information to every RPC (e.g., oauth2).</span>
<span class="token keyword">type</span> PerRPCCredentials <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token comment">// GetRequestMetadata gets the current request metadata, refreshing tokens</span>
    <span class="token comment">// if required. This should be called by the transport layer on each</span>
    <span class="token comment">// request, and the data should be populated in headers or other</span>
    <span class="token comment">// context. If a status code is returned, it will be used as the status for</span>
    <span class="token comment">// the RPC (restricted to an allowable set of codes as defined by gRFC</span>
    <span class="token comment">// A54). uri is the URI of the entry point for the request.  When supported</span>
    <span class="token comment">// by the underlying implementation, ctx can be used for timeout and</span>
    <span class="token comment">// cancellation. Additionally, RequestInfo data will be available via ctx</span>
    <span class="token comment">// to this call.  TODO(zhaoq): Define the set of the qualified keys instead</span>
    <span class="token comment">// of leaving it as an arbitrary string.</span>
    <span class="token function">GetRequestMetadata</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> uri <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token comment">// RequireTransportSecurity indicates whether the credentials requires</span>
    <span class="token comment">// transport security.</span>
    <span class="token function">RequireTransportSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在GetRequestMetadata方法中返回认证需要的必要信息。RequireTransportSecurity方法表示是否要求底层使用安全链接。在真实的环境中建议必须要求底层启用安全的链接，否则认证信息有泄露和被篡改的风险。</p><p>创建一个Authentication类型，用于实现用户名和密码的认证：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Authentication <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    User     <span class="token builtin">string</span>
    Password <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Authentication<span class="token punctuation">)</span> <span class="token function">GetRequestMetadata</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>
    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">:</span>a<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>Password<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Authentication<span class="token punctuation">)</span> <span class="token function">RequireTransportSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在GetRequestMetadata方法中，返回认证信息包装login和password两个信息。为了演示代码简单，RequireTransportSecurity方法表示不要求底层使用安全链接。</p><p>然后在每次请求gRPC服务时就可以将Token信息作为参数选项传人：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>auth <span class="token operator">:=</span> Authentication<span class="token punctuation">{</span>
  User<span class="token punctuation">:</span>     <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
  Password<span class="token punctuation">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 如果使用 token 认证，是需要手动设置不使用 tsl 加密的。</span>
clientConn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token string">&quot;:1234&quot;</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithPerRPCCredentials</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">defer</span> clientConn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

client <span class="token operator">:=</span> <span class="token function">NewHelloServiceClient</span><span class="token punctuation">(</span>clientConn<span class="token punctuation">)</span>
res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;hello yeah&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过grpc.WithTransportCredentials(insecure.NewCredentials())设置不启用安全链接</p><ul><li>WithTransportCredentials：gRPC 提供的一个选项，用于配置客户端或服务器的传输层安全性（TLS/SSL）。</li><li>insecure.NewCredentials()：一个 gRPC 包中的函数，生成一个不安全的传输凭据，这意味着通信不会加密。</li></ul><p>然后在gRPC服务端的每个方法中通过Authentication类型的Auth方法进行身份认证：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloServiceImpl <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	auth Authentication
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HelloServiceImpl<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>
	ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> args <span class="token operator">*</span>String<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;--------&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">Auth</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	reply <span class="token operator">:=</span> <span class="token operator">&amp;</span>String<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token keyword">return</span> reply<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Authentication<span class="token punctuation">)</span> <span class="token function">Auth</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    md<span class="token punctuation">,</span> ok <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">FromIncomingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;missing credentials&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> appid <span class="token builtin">string</span>
    <span class="token keyword">var</span> appkey <span class="token builtin">string</span>

    <span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> md<span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span> appid <span class="token operator">=</span> val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> md<span class="token punctuation">[</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span> appkey <span class="token operator">=</span> val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

    <span class="token keyword">if</span> appid <span class="token operator">!=</span> a<span class="token punctuation">.</span>User <span class="token operator">||</span> appkey <span class="token operator">!=</span> a<span class="token punctuation">.</span>Password <span class="token punctuation">{</span>
        <span class="token keyword">return</span> grpc<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>codes<span class="token punctuation">.</span>Unauthenticated<span class="token punctuation">,</span> <span class="token string">&quot;invalid token&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	grpcServer <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 在这里需要设置可通过的认证名单</span>
	<span class="token function">RegisterHelloServiceServer</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>HelloServiceImpl<span class="token punctuation">{</span>
		auth<span class="token punctuation">:</span> Authentication<span class="token punctuation">{</span>
			User<span class="token punctuation">:</span>     <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
			Password<span class="token punctuation">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:1234&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">=</span> grpcServer<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listen<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细地认证工作主要在Authentication.Auth方法中完成。首先通过metadata.FromIncomingContext从ctx上下文中获取元信息（这个是客户端穿过来的数据），然后取出相应的认证信息进行认证（a 对象是服务端设置的数据）。如果认证失败，则返回一个codes.Unauthenticated类型地错误。</p><h3 id="截取器-拦截器" tabindex="-1"><a class="header-anchor" href="#截取器-拦截器" aria-hidden="true">#</a> 截取器（拦截器）</h3><p>gRPC中的grpc.UnaryInterceptor和grpc.StreamInterceptor分别对普通方法和流方法提供了截取器的支持。<strong>截取器就是拦截器，或者可以说是代理。可以在 rpc 调用之前或者调用之后对进行一些自己的处理。</strong></p><p>要实现普通方法的截取器，需要为 grpc.UnaryInterceptor 的参数实现一个函数：<strong>写一个拦截器就是写一个方法</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">filter</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>
    req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> info <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span>
    handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span>resp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;filter:&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数的ctx和req参数就是每个普通的RPC方法的前两个参数。第三个info参数表示当前是对应的那个gRPC方法，第四个handler参数对应当前的gRPC方法函数。上面的函数中首先是日志输出info参数，然后调用handler对应的gRPC方法函数。</p><p>要使用filter截取器函数，只需要在启动gRPC服务时作为参数输入即可：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>server <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">UnaryInterceptor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后服务器在收到每个gRPC方法调用之前，会首先输出一行日志，然后再调用对方的方法。</p><p>如果截取器函数返回了错误，那么该次gRPC方法调用将被视作失败处理。因此，可以在截取器中对输入的参数做一些简单的验证工作。同样，也可以对handler返回的结果做一些验证工作。截取器也非常适合前面对Token认证工作。</p><p>下面是截取器增加了对gRPC方法异常的捕获：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">filter</span><span class="token punctuation">(</span>
    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    info <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span>
    handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span>resp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;filter:&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span>

    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;panic: %v&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过gRPC框架中只能为每个服务设置一个截取器，因此所有的截取工作只能在一个函数中完成(==现在有了grpc.ChainUnaryInterceptor（），可以支持链式拦截了，直接写多个 filter 函数，丢进这个函数的参数就行，拦截器会依次执行，执行过程类比 spring 拦截器就行==)。开源的grpc-ecosystem项目中的go-grpc-middleware包已经基于gRPC对截取器实现了链式截取器的支持。</p><p>以下是go-grpc-middleware包中链式截取器的简单用法，可以去看他的源码。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/grpc-ecosystem/go-grpc-middleware&quot;</span>

myServer <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>
    grpc<span class="token punctuation">.</span><span class="token function">UnaryInterceptor</span><span class="token punctuation">(</span>grpc_middleware<span class="token punctuation">.</span><span class="token function">ChainUnaryServer</span><span class="token punctuation">(</span>
        filter1<span class="token punctuation">,</span> filter2<span class="token punctuation">,</span> <span class="token operator">...</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    grpc<span class="token punctuation">.</span><span class="token function">StreamInterceptor</span><span class="token punctuation">(</span>grpc_middleware<span class="token punctuation">.</span><span class="token function">ChainStreamServer</span><span class="token punctuation">(</span>
        filter1<span class="token punctuation">,</span> filter2<span class="token punctuation">,</span> <span class="token operator">...</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// 第一个拦截器：日志记录</span>
<span class="token keyword">func</span> <span class="token function">loggingInterceptor</span><span class="token punctuation">(</span>
    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>
    req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    info <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span>
    handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received request: %v&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>FullMethod<span class="token punctuation">)</span>
    <span class="token comment">// 调用下一个拦截器或实际的处理器</span>
    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error handling request: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Successfully handled request&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> resp<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token comment">// 第二个拦截器：错误处理</span>
<span class="token keyword">func</span> <span class="token function">errorHandlingInterceptor</span><span class="token punctuation">(</span>
    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>
    req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    info <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span>
    handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用下一个拦截器或实际的处理器</span>
    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> status<span class="token punctuation">.</span><span class="token function">FromError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Handling error: %v, Code: %v&quot;</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 你可以在这里处理错误，例如转换错误或记录错误等</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> resp<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
server <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>
    grpc<span class="token punctuation">.</span><span class="token function">ChainUnaryInterceptor</span><span class="token punctuation">(</span>
        loggingInterceptor<span class="token punctuation">,</span>
        errorHandlingInterceptor<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与-web-共存-todo" tabindex="-1"><a class="header-anchor" href="#与-web-共存-todo" aria-hidden="true">#</a> 与 web 共存（todo）</h3>`,30),h={href:"https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch4-rpc/ch4-05-grpc-hack.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="grpc-扩展" tabindex="-1"><a class="header-anchor" href="#grpc-扩展" aria-hidden="true">#</a> gRPC 扩展</h2><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><p>上面全部是第三版的Protobuf语法。第二版的Protobuf有个默认值特性，可以为字符串或数值类型的成员定义默认值。</p><p>采用第二版的Protobuf语法创建文件：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto2&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> main<span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
    <span class="token keyword">optional</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token annotation">default</span> <span class="token operator">=</span> <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">optional</span> <span class="token builtin">int32</span> age <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">[</span><span class="token annotation">default</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内置的默认值语法其实是通过Protobuf的扩展选项特性实现。在第三版的Protobuf中不再支持默认值特性，但是可以通过扩展选项自己模拟默认值特性。</p><p>下面是用proto3语法的扩展特性重新改写上述的proto文件：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> main<span class="token punctuation">;</span>

<span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">&quot;.;main&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/descriptor.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">extend</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>FieldOptions <span class="token punctuation">{</span>
  <span class="token builtin">string</span> default_string <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>
  <span class="token builtin">int32</span> default_int <span class="token operator">=</span> <span class="token number">50001</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>default_string<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token builtin">int32</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span><span class="token punctuation">(</span>default_int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中成员后面的方括号内部的就是扩展语法。重新生成Go语言代码，里面会包含扩展选项相关的元信息：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> file_test_proto_extTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>protoimpl<span class="token punctuation">.</span>ExtensionInfo<span class="token punctuation">{</span>
	<span class="token punctuation">{</span>
		ExtendedType<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token operator">*</span>descriptorpb<span class="token punctuation">.</span>FieldOptions<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		ExtensionType<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Field<span class="token punctuation">:</span>         <span class="token number">50000</span><span class="token punctuation">,</span>
		Name<span class="token punctuation">:</span>          <span class="token string">&quot;main.default_string&quot;</span><span class="token punctuation">,</span>
		Tag<span class="token punctuation">:</span>           <span class="token string">&quot;bytes,50000,opt,name=default_string&quot;</span><span class="token punctuation">,</span>
		Filename<span class="token punctuation">:</span>      <span class="token string">&quot;test.proto&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span>
		ExtendedType<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token operator">*</span>descriptorpb<span class="token punctuation">.</span>FieldOptions<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		ExtensionType<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Field<span class="token punctuation">:</span>         <span class="token number">50001</span><span class="token punctuation">,</span>
		Name<span class="token punctuation">:</span>          <span class="token string">&quot;main.default_int&quot;</span><span class="token punctuation">,</span>
		Tag<span class="token punctuation">:</span>           <span class="token string">&quot;varint,50001,opt,name=default_int&quot;</span><span class="token punctuation">,</span>
		Filename<span class="token punctuation">:</span>      <span class="token string">&quot;test.proto&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在 go 文件中并没有显示的指明默认值，可以在运行时通过类似反射的技术解析出Message每个成员定义的扩展选项，然后从每个扩展的相关联的信息中解析出定义的默认值。</p><p>在 Protocol Buffers 中，默认值的处理机制是在编译器生成代码和反序列化消息时自动处理的。在 Go 中，Protocol Buffers 使用插件 protoc-gen-go 生成的代码会在反序列化消息时为字段设置默认值。在 go 文件中会有一串字节码，那个就是 proto 文件的编码，在使用时会反序列化，就能拿到具体的默认值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
使用https://protogen.marcgravell.com/decode反序列化
可以看到和 proto 文件类似的内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+u+`" alt="screenshot2024-07-24 17.09.58" style="zoom:33%;"><h3 id="验证器" tabindex="-1"><a class="header-anchor" href="#验证器" aria-hidden="true">#</a> 验证器</h3><p>在开源社区中，github.com/mwitkow/go-proto-validators 已经基于Protobuf的扩展特性实现了功能较为强大的验证器功能。要使用该验证器首先需要下载其提供的代码生成插件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get github.com/mwitkow/go-proto-validators/protoc-gen-govalidators
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后基于go-proto-validators验证器的规则为Message成员增加验证规则：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> main<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;github.com/mwitkow/go-proto-validators/validator.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> important_string <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span>validator<span class="token punctuation">.</span>field<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>regex<span class="token punctuation">:</span> <span class="token string">&quot;^[a-z]{2,5}$&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token builtin">int32</span> age <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span>validator<span class="token punctuation">.</span>field<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>int_gt<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> int_lt<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在方括弧表示的成员扩展中，validator.field表示扩展是validator包中定义的名为field扩展选项。validator.field的类型是FieldValidator结构体，在导入的validator.proto文件中定义。</p><p>所有的验证规则都由validator.proto文件中的FieldValidator定义：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">extend</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>FieldOptions <span class="token punctuation">{</span>
  <span class="token keyword">optional</span> <span class="token positional-class-name class-name">FieldValidator</span> field <span class="token operator">=</span> <span class="token number">65020</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">extend</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>OneofOptions <span class="token punctuation">{</span>
  <span class="token keyword">optional</span> <span class="token positional-class-name class-name">OneofValidator</span> oneof <span class="token operator">=</span> <span class="token number">65021</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">FieldValidator</span> <span class="token punctuation">{</span>
  <span class="token comment">// Uses a Golang RE2-syntax regex to match the field contents.</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> regex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// Field value of integer strictly greater than this value.</span>
  <span class="token keyword">optional</span> <span class="token builtin">int64</span> int_gt <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">// Field value of integer strictly smaller than this value.</span>
  <span class="token keyword">optional</span> <span class="token builtin">int64</span> int_lt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从FieldValidator定义的注释中可以看到验证器扩展的一些语法：其中regex表示用于字符串验证的正则表达式，int_gt和int_lt表示数值的范围。</p><p>然后采用以下的命令生成验证函数代码：==他妈的，这里就不是整不出来，路径不对，找不到包和工具，一直失败==</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>protoc  \\
    --proto_path=\${GOPATH}/src \\
    --proto_path=\${GOPATH}/src/github.com/google/protobuf/src \\
    --proto_path=. \\
    --govalidators_out=. --go_out=plugins=grpc:.\\
    hello.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的命令会调用protoc-gen-govalidators程序，生成一个独立的名为hello.validator.pb.go的文件：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> _regex_Message_ImportantString <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-z]{2,5}$&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>_regex_Message_ImportantString<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>ImportantString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> go_proto_validators<span class="token punctuation">.</span><span class="token function">FieldError</span><span class="token punctuation">(</span><span class="token string">&quot;ImportantString&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>
            <span class="token string">\`value &#39;%v&#39; must be a string conforming to regex &quot;^[a-z]{2,5}$&quot;\`</span><span class="token punctuation">,</span>
            this<span class="token punctuation">.</span>ImportantString<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> go_proto_validators<span class="token punctuation">.</span><span class="token function">FieldError</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>
            <span class="token string">\`value &#39;%v&#39; must be greater than &#39;0&#39;\`</span><span class="token punctuation">,</span> this<span class="token punctuation">.</span>Age<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> go_proto_validators<span class="token punctuation">.</span><span class="token function">FieldError</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>
            <span class="token string">\`value &#39;%v&#39; must be less than &#39;100&#39;\`</span><span class="token punctuation">,</span> this<span class="token punctuation">.</span>Age<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的代码为Message结构体增加了一个Validate方法，用于验证该成员是否满足Protobuf中定义的条件约束。无论采用何种类型，所有的Validate方法都用相同的签名，因此可以满足相同的验证接口。</p><p>通过生成的验证函数，并结合gRPC的截取器，可以很容易为每个方法的输入参数和返回值进行验证。</p><h3 id="rest-接口" tabindex="-1"><a class="header-anchor" href="#rest-接口" aria-hidden="true">#</a> REST 接口</h3><p>gRPC服务一般用于集群内部通信，如果需要对外暴露服务一般会提供等价的REST接口。通过REST接口比较方便前端JavaScript和后端交互。开源社区中的grpc-gateway项目就实现了将gRPC服务转为REST服务的能力。</p><p>grpc-gateway的工作原理如下图：</p><img src="`+r+`" alt="screenshot2024-07-24 18.50.12" style="zoom:50%;"><p>通过在Protobuf文件中添加路由相关的元信息，通过自定义的代码插件生成路由相关的处理代码，最终将REST请求转给更后端的gRPC服务处理。</p><p>路由扩展元信息也是通过Protobuf的元数据扩展用法提供：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> main<span class="token punctuation">;</span>

<span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">&quot;.;main&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;google/api/annotations.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">StringMessage</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">service</span> <span class="token class-name">RestService</span> <span class="token punctuation">{</span>
  <span class="token keyword">rpc</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">StringMessage</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">StringMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">option</span> <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      get<span class="token punctuation">:</span> <span class="token string">&quot;/get/{value}&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">rpc</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token class-name">StringMessage</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">StringMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">option</span> <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      post<span class="token punctuation">:</span> <span class="token string">&quot;/post&quot;</span>
      body<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先为gRPC定义了Get和Post方法，然后通过元扩展语法在对应的方法后添加路由信息。其中“/get/{value}”路径对应的是Get方法，<code>{value}</code>部分对应参数中的value成员，结果通过json格式返回。Post方法对应“/post”路径，body中包含json格式的请求信息。</p><p>然后通过以下命令安装protoc-gen-grpc-gateway插件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再通过插件生成grpc-gateway必须的路由处理代码：==tmd，这里也一样，就是不对==</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ protoc -I/usr/local/include -I. \\
    -I$GOPATH/src \\
    -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\
    --grpc-gateway_out=. --go_out=plugins=grpc:.\\
    hello.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件会为RestService服务生成对应的RegisterRestServiceHandlerFromEndpoint函数：==这没看到啊，不知道再哪里==</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">RegisterRestServiceHandlerFromEndpoint</span><span class="token punctuation">(</span>
    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> mux <span class="token operator">*</span>runtime<span class="token punctuation">.</span>ServeMux<span class="token punctuation">,</span> endpoint <span class="token builtin">string</span><span class="token punctuation">,</span>
    opts <span class="token punctuation">[</span><span class="token punctuation">]</span>grpc<span class="token punctuation">.</span>DialOption<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RegisterRestServiceHandlerFromEndpoint函数用于将定义了Rest接口的请求转发到真正的gRPC服务。</p>`,44),w={href:"https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch4-rpc/ch4-06-grpc-ext.html",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"grpcurl工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grpcurl工具","aria-hidden":"true"},"#"),s(" grpcurl工具")],-1),C=n("p",null,"通过 reflection 包注册到反射服务，然后通过该工具可以在没有客户端代码的情况下，通过命令行查询和调用 rpc 服务",-1),S={href:"https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch4-rpc/ch4-08-grpcurl.html",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"不想操作了，还要安装一个工具，浪费我内存",-1),x=n("h2",{id:"大佬劝诫",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#大佬劝诫","aria-hidden":"true"},"#"),s(" 大佬劝诫")],-1),R=n("p",null,"现代的软件工程是离不开Web的，广义地来讲，Web甚至可以不用非得基于http协议。只要是CS或者BS架构，都可以认为是Web系统。",-1),H=n("p",null,"即使是在看起来非常封闭的游戏系统里，因为玩家们与日俱增的联机需求，也同样会涉及到远程通信，这里面也会涉及到很多Web方面的技术。",-1),_=n("p",null,"所以这个时代，Web编程是一个程序员所必须接触的知识领域。无论你的目标是成为架构师，是去创业，或是去当技术顾问。Web方面的知识都会成为你的硬通货。",-1);function T(G,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,n("blockquote",null,[v,n("p",null,[s("不知道怎么定制的，麻了，以后"),n("a",m,[s("在看吧"),t(a)])])]),b,n("p",null,[n("a",g,[s("先不做"),t(a)])]),f,n("p",null,[n("a",h,[s("todo"),t(a)])]),y,n("blockquote",null,[n("p",null,[s("啊啊啊啊啊啊，不知道在说什么了，也弄不出来，就这样吧。。。。。。。"),n("a",w,[s("网址"),t(a)])])]),q,C,n("p",null,[s("这个也挺有用，可以"),n("a",S,[s("看一下"),t(a)])]),P,x,R,H,_])}const F=e(k,[["render",T],["__file","rpc.html.vue"]]);export{F as default};
