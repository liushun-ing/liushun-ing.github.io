import{_ as n,o as s,c as a,a as e}from"./app-0703cef9.js";const t="/home/assets/servicediscovery-14b6c8c8.png",l="/home/assets/filediscovery-590bb512.png",p="/home/assets/consul-9e0e0304.png",o="/home/assets/labels-b5ad2883.png",c="/home/assets/LABELTIME-93bfaf00.png",i={},u=e('<h1 id="prometheus服务发现" tabindex="-1"><a class="header-anchor" href="#prometheus服务发现" aria-hidden="true">#</a> Prometheus服务发现</h1><p>作为下一代监控系统的首选解决方案，Prometheus对云以及容器环境下的监控场景提供了完善的支持。</p><h2 id="云场景" tabindex="-1"><a class="header-anchor" href="#云场景" aria-hidden="true">#</a> 云场景</h2><p>在基于云(IaaS或者CaaS)的基础设施环境中用户可以像使用水、电一样按需使用各种资源（计算、网络、存储）。按需使用就意味着资源的动态性，这些资源可以随着需求规模的变化而变化。例如在AWS中就提供了专门的AutoScall服务，可以根据用户定义的规则动态地创建或者销毁EC2实例，从而使用户部署在AWS上的应用可以自动的适应访问规模的变化。</p><p>这种按需的资源使用方式对于监控系统而言就意味着没有了一个固定的监控目标，所有的监控对象(基础设施、应用、服务)都在动态的变化。对于Nagias这类基于Push模式传统监控软件就意味着必须在每一个节点上安装相应的Agent程序，并且通过配置指向中心的Nagias服务，受监控的资源与中心监控服务器之间是一个强耦合的关系，要么直接将Agent构建到基础设施镜像当中，要么使用一些自动化配置管理工具(如Ansible、Chef)动态的配置这些节点。当然实际场景下除了基础设施的监控需求以外，还需要监控在云上部署的应用，中间件等等各种各样的服务。要搭建起这样一套中心化的监控系统实施成本和难度是显而易见的。</p><p>而对于Prometheus这一类基于Pull模式的监控系统，显然也无法继续使用的static_configs的方式静态的定义监控目标。而对于Prometheus而言其解决方案就是引入一个中间的代理人（服务注册中心），这个代理人掌握着当前所有监控目标的访问信息，Prometheus只需要向这个代理人询问有哪些监控目标控即可， 这种模式被称为服务发现。</p><img src="'+t+`" alt="screenshot2024-08-10 14.53.36" style="zoom:50%;"><p>在不同的场景下，会有不同的东西扮演者代理人（服务发现与注册中心）这一角色。比如在AWS公有云平台或者OpenStack的私有云平台中，由于这些平台自身掌握着所有资源的信息，此时这些云平台自身就扮演了代理人的角色。Prometheus通过使用平台提供的API就可以找到所有需要监控的云主机。**在Kubernetes这类容器管理平台中，Kubernetes掌握并管理着所有的容器以及服务信息，那此时Prometheus只需要与Kubernetes打交道就可以找到所有需要监控的容器以及服务对象。**Prometheus还可以直接与一些开源的服务发现工具进行集成，例如在微服务架构的应用程序中，经常会使用到例如Consul这样的服务发现注册软件，Promethues也可以与其集成从而动态的发现需要监控的应用服务实例。除了与这些平台级的公有云、私有云、容器云以及专门的服务发现注册中心集成以外，Prometheus还支持基于DNS以及文件的方式动态发现监控目标，从而大大的减少了在云原生，微服务以及云模式下监控实施难度。</p><p>相较于Push模式，Pull模式的优点可以简单总结为以下几点：</p><ul><li>只要Exporter在运行，可以在任何地方（比如在本地），搭建监控系统；</li><li>可以更容易的查看监控目标实例的健康状态，并且可以快速定位故障；</li><li>更利于构建DevOps文化的团队；</li><li>松耦合的架构模式更适合于云原生的部署环境。</li></ul><h2 id="基于文件的服务发现" tabindex="-1"><a class="header-anchor" href="#基于文件的服务发现" aria-hidden="true">#</a> 基于文件的服务发现</h2><p><strong>在Prometheus支持的众多服务发现的实现方式中，基于文件的服务发现是最通用的方式</strong>。这种方式不需要依赖于任何的平台或者第三方服务。对于Prometheus而言也不可能支持所有的平台或者环境。通过基于文件的服务发现方式下，Prometheus会定时从文件中读取最新的Target信息，因此，可以通过任意的方式将监控Target的信息写入即可。</p><p>用户可以通过JSON或者YAML格式的文件，定义所有的监控目标。例如，在下面的JSON文件中分别定义了3个采集任务，以及每个任务对应的Target列表：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;localhost:8080&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;labels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;job&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cadvisor&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;localhost:9104&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;labels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prod&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;job&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mysqld&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;localhost:9100&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;labels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prod&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;job&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时还可以通过为这些实例添加一些额外的标签信息，例如使用env标签标示当前节点所在的环境，这样从这些实例中采集到的样本信息将包含这些标签信息，从而可以通过该标签按照环境对数据进行统计。</p><p>Prometheus配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">global</span><span class="token punctuation">:</span>
  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 15s
  <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> 10s
  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;file_ds&#39;</span>
  <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> target.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了一个基于file_sd_configs的监控采集任务，其中模式的任务名称为file_ds。在JSON文件中可以使用job标签覆盖默认的job名称，此时启动Prometheus服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 记得把 target 文件拷贝到相同的路径下</span>
<span class="token function">docker</span> <span class="token function">cp</span> <span class="token environment constant">$PWD</span>/Documents/docker/prometheus/target.json prometheus:/etc/prometheus/target.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在Prometheus UI的Targets下就可以看到当前从targets.json文件中动态获取到的Target实例信息以及监控任务的采集状态，同时在Labels列下会包含用户添加的自定义标签:</p><img src="`+l+`" alt="screenshot2024-08-10 15.03.21" style="zoom:67%;"><p>Prometheus默认每5m重新读取一次文件内容，当需要修改时，可以通过refresh_interval进行设置，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;file_ds&#39;</span>
  <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">refresh_interval</span><span class="token punctuation">:</span> 1m
      <span class="token key atrule">files</span><span class="token punctuation">:</span>
      	<span class="token punctuation">-</span> target.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，Prometheus会自动的周期性读取文件中的内容。当文件中定义的内容发生变化时，不需要对Prometheus进行任何的重启操作。</p><p>这种通用的方式可以衍生了很多不同的玩法，比如与自动化配置管理工具(Ansible)结合、与Cron Job结合等等。 对于一些Prometheus还不支持的云环境，比如国内的阿里云、腾讯云等也可以使用这种方式通过一些自定义程序与平台进行交互自动生成监控Target文件，从而实现对这些云环境中基础设施的自动化监控支持。</p><blockquote><p>此外，可以基于一些服务注册与发现的软件来与 prometheus 集成，这里不尝试了</p></blockquote><h2 id="服务发现与relabeling" tabindex="-1"><a class="header-anchor" href="#服务发现与relabeling" aria-hidden="true">#</a> 服务发现与Relabeling</h2><p>通过服务发现的方式，管理员可以在不重启Prometheus服务的情况下动态的发现需要监控的Target实例信息。</p><img src="`+p+'" alt="screenshot2024-08-10 15.09.02" style="zoom:50%;"><p>如上图所示，对于线上环境可能会划分为:dev, stage, prod不同的集群。每一个集群运行多个主机节点，每个服务器节点上运行一个Node Exporter实例。Node Exporter实例会自动注册到Consul中，而Prometheus则根据Consul返回的Node Exporter实例信息动态的维护Target列表，从而向这些Target轮询监控数据。</p><p>然而，如果可能还需要：</p><ul><li>按照不同的环境dev, stage, prod聚合监控数据？</li><li>对于研发团队而言，可能只关心dev环境的监控数据，如何处理？</li><li>如果为每一个团队单独搭建一个Prometheus Server。那么如何让不同团队的Prometheus Server采集不同的环境监控数据？</li></ul><p>面对以上这些场景下的需求时，实际上是希望Prometheus Server能够按照某些规则（比如标签）从服务发现注册中心返回的Target实例中有选择性的采集某些Exporter实例的监控数据。</p><p>Prometheus强大的Relabel机制上场！！！</p><h3 id="relabeling机制" tabindex="-1"><a class="header-anchor" href="#relabeling机制" aria-hidden="true">#</a> Relabeling机制</h3><p>在Prometheus所有的Target实例中，都包含一些默认的Metadata标签信息。可以通过Prometheus UI的Targets页面中查看这些实例的Metadata标签的内容：</p><img src="'+o+`" alt="screenshot2024-08-10 15.11.44" style="zoom:50%;"><p>默认情况下，当Prometheus加载Target实例完成后，这些Target时候都会包含一些默认的标签：</p><ul><li><code>__address__</code>：当前Target实例的访问地址<code>&lt;host&gt;:&lt;port&gt;</code></li><li><code>__scheme__</code>：采集目标服务访问地址的HTTP Scheme，HTTP或者HTTPS</li><li><code>__metrics_path__</code>：采集目标服务访问地址的访问路径</li><li><code>__param_&lt;name&gt;</code>：采集任务目标服务的中包含的请求参数</li></ul><p>上面这些标签将会告诉Prometheus如何从该Target实例中获取监控数据。除了这些默认的标签以外，还可以为Target添加自定义的标签，例如，在“基于文件的服务发现”中，通过JSON配置文件，为Target实例添加了自定义标签env，如下所示该标签最终也会保存到从该实例采集的样本数据中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_cpu_seconds_total{cpu=&quot;0&quot;, env=&quot;prod&quot;, instance=&quot;host.docker.internal:9100&quot;, job=&quot;node&quot;, mode=&quot;idle&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般来说，Target以<code>__</code>作为前置的标签是在系统内部使用的，因此这些标签不会被写入到样本数据中。不过这里有一些例外，例如，所有通过Prometheus采集的样本数据中都会包含一个名为instance的标签，该标签的内容对应到Target实例的<code>__address__</code>。 这里实际上是发生了一次标签的重写处理。</p><p>这种发生在采集样本数据之前，对Target实例的标签进行重写的机制在Prometheus被称为Relabeling。</p><img src="`+c+`" alt="screenshot2024-08-10 15.15.19" style="zoom:50%;"><p>Prometheus允许用户在采集任务设置中通过relabel_configs来添加自定义的Relabeling过程。</p><h3 id="使用replace-labelmap重写标签" tabindex="-1"><a class="header-anchor" href="#使用replace-labelmap重写标签" aria-hidden="true">#</a> 使用replace/labelmap重写标签</h3><p>Relabeling最基本的应用场景就是基于Target实例中包含的metadata标签，动态的添加或者覆盖标签。例如，通过Consul动态发现的服务实例还会包含以下Metadata标签信息：</p><ul><li>__meta_consul_address：consul地址</li><li>__meta_consul_dc：consul中服务所在的数据中心</li><li>__meta_consulmetadata：服务的metadata</li><li>__meta_consul_node：服务所在consul节点的信息</li><li>__meta_consul_service_address：服务访问地址</li><li>__meta_consul_service_id：服务ID</li><li>__meta_consul_service_port：服务端口</li><li>__meta_consul_service：服务名称</li><li>__meta_consul_tags：服务包含的标签信息</li></ul><p>在默认情况下，从Node Exporter实例采集上来的样本数据如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_cpu_seconds_total{cpu=&quot;cpu0&quot;,instance=&quot;localhost:9100&quot;,job=&quot;node&quot;,mode=&quot;idle&quot;} 93970.8203125
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们希望能有一个额外的标签dc可以表示该样本所属的数据中心：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_cpu_seconds_total{cpu=&quot;cpu0&quot;,instance=&quot;localhost:9100&quot;,job=&quot;node&quot;,mode=&quot;idle&quot;, dc=&quot;dc1&quot;} 93970.8203125
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在每一个采集任务的配置中可以添加多个relabel_config配置，一个最简单的relabel配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> node_exporter
    <span class="token key atrule">consul_sd_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8500</span>
        <span class="token key atrule">services</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> node_exporter
    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">&quot;__meta_consul_dc&quot;</span><span class="token punctuation">]</span>
        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> <span class="token string">&quot;dc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的relabel_config配置如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># The source labels select values from existing labels. Their content is concatenated</span>
<span class="token comment"># using the configured separator and matched against the configured regular expression</span>
<span class="token comment"># for the replace, keep, and drop actions.</span>
<span class="token punctuation">[</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> &#39;<span class="token punctuation">[</span><span class="token string">&#39; &lt;labelname&gt; [, ...] &#39;</span><span class="token punctuation">]</span>&#39; <span class="token punctuation">]</span>

<span class="token comment"># Separator placed between concatenated source label values.</span>
<span class="token punctuation">[</span> <span class="token key atrule">separator</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">&gt;</span> <span class="token punctuation">|</span> default = ; <span class="token punctuation">]</span>

<span class="token comment"># Label to which the resulting value is written in a replace action.</span>
<span class="token comment"># It is mandatory for replace actions. Regex capture groups are available.</span>
<span class="token punctuation">[</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> &lt;labelname<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>

<span class="token comment"># Regular expression against which the extracted value is matched.</span>
<span class="token punctuation">[</span> <span class="token key atrule">regex</span><span class="token punctuation">:</span> &lt;regex<span class="token punctuation">&gt;</span> <span class="token punctuation">|</span> default = (.<span class="token important">*)</span> <span class="token punctuation">]</span>

<span class="token comment"># Modulus to take of the hash of the source label values.</span>
<span class="token punctuation">[</span> <span class="token key atrule">modulus</span><span class="token punctuation">:</span> &lt;uint64<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>

<span class="token comment"># Replacement value against which a regex replace is performed if the</span>
<span class="token comment"># regular expression matches. Regex capture groups are available.</span>
<span class="token punctuation">[</span> <span class="token key atrule">replacement</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">&gt;</span> <span class="token punctuation">|</span> default = $1 <span class="token punctuation">]</span>

<span class="token comment"># Action to perform based on regex matching.</span>
<span class="token punctuation">[</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> &lt;relabel_action<span class="token punctuation">&gt;</span> <span class="token punctuation">|</span> default = replace <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中action定义了当前relabel_config对Metadata标签的处理方式，<strong>默认的action行为为replace。</strong> replace行为会根据regex的配置匹配source_labels标签的值（多个source_label的值会按照separator进行拼接），并且将匹配到的值写入到target_label当中，如果有多个匹配组，则可以使用 <code>\${1}</code>, <code>\${2}</code>确定写入的内容。如果没匹配到任何内容则不对target_label进行重新。</p><p>repalce操作允许用户根据Target的Metadata标签重写或者写入新的标签键值对，在多环境的场景下，可以帮助用户添加与环境相关的特征维度，从而可以更好的对数据进行聚合。</p><p>除了使用replace以外，还可以定义action的配置为labelmap。与replace不同的是，labelmap会根据regex的定义去匹配Target实例所有标签的名称，并且以匹配到的内容为新的标签名称，其值作为新标签的值。</p><p>例如，在监控Kubernetes下所有的主机节点时，为将这些节点上定义的标签写入到样本中时，可以使用如下relabel_config配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;kubernetes-nodes&#39;</span>
  <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> node
    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap
        <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_node_label_(.+)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用labelkeep或者labeldrop则可以对Target标签进行过滤，仅保留符合过滤条件的标签，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">regex</span><span class="token punctuation">:</span> label_should_drop_(.+)
    <span class="token key atrule">action</span><span class="token punctuation">:</span> labeldrop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置会使用regex匹配当前Target实例的所有标签，并将符合regex规则的标签从Target实例中移除。labelkeep正好相反，会移除那些不匹配regex定义的所有标签。</p><h3 id="使用keep-drop过滤target实例" tabindex="-1"><a class="header-anchor" href="#使用keep-drop过滤target实例" aria-hidden="true">#</a> 使用keep/drop过滤Target实例</h3><p>现在看第二个问题，使用中心化的服务发现注册中心时，所有环境的Exporter实例都会注册到该服务发现注册中心中。而不同职能（开发、测试、运维）的人员可能只关心其中一部分的监控数据，他们可能各自部署的自己的Prometheus Server用于监控自己关心的指标数据，如果让这些Prometheus Server采集所有环境中的所有Exporter数据显然会存在大量的资源浪费。如何让这些不同的Prometheus Server采集各自关心的内容？答案还是Relabeling，relabel_config的action除了默认的replace以外，还支持keep/drop行为。例如，如果只希望采集数据中心dc1中的Node Exporter实例的样本数据，那么可以使用如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> node_exporter
    <span class="token key atrule">consul_sd_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8500</span>
        <span class="token key atrule">services</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> node_exporter
    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">&quot;__meta_consul_dc&quot;</span><span class="token punctuation">]</span>
        <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token string">&quot;dc1&quot;</span>
        <span class="token key atrule">action</span><span class="token punctuation">:</span> keep
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当action设置为keep时，Prometheus会丢弃source_labels的值中没有匹配到regex正则表达式内容的Target实例，而当action设置为drop时，则会丢弃那些source_labels的值匹配到regex正则表达式内容的Target实例。可以简单理解为keep用于选择，而drop用于排除。</p><h3 id="使用hashmod计算source-labels的hash值" tabindex="-1"><a class="header-anchor" href="#使用hashmod计算source-labels的hash值" aria-hidden="true">#</a> 使用hashmod计算source_labels的Hash值</h3><p>当relabel_config设置为hashmod时，Prometheus会根据modulus的值作为系数，计算source_labels值的hash值。例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>scrape_configs
<span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;file_ds&#39;</span>
  <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>
      <span class="token key atrule">modulus</span><span class="token punctuation">:</span>       <span class="token number">4</span>
      <span class="token key atrule">target_label</span><span class="token punctuation">:</span>  tmp_hash
      <span class="token key atrule">action</span><span class="token punctuation">:</span>        hashmod
  <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> targets.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据当前Target实例<code>__address__</code>的值以4作为系数，这样每个Target实例都会包含一个新的标签tmp_hash，并且该值的范围在1~4之间，每一个Target实例都包含了一个新的tmp_hash值。</p><p>在“Prometheus高可用”小节中，正是利用了Hashmod的能力在Target实例级别实现对采集任务的功能分区的:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> some_job
    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>
      <span class="token key atrule">modulus</span><span class="token punctuation">:</span>       <span class="token number">4</span>
      <span class="token key atrule">target_label</span><span class="token punctuation">:</span>  __tmp_hash
      <span class="token key atrule">action</span><span class="token punctuation">:</span>        hashmod
    <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__tmp_hash<span class="token punctuation">]</span>
      <span class="token key atrule">regex</span><span class="token punctuation">:</span>         ^1$
      <span class="token key atrule">action</span><span class="token punctuation">:</span>        keep
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，如果relabel的操作只是为了产生一个临时变量，以作为下一个relabel操作的输入，那么可以使用<code>__tmp</code>作为标签名的前缀，通过该前缀定义的标签就不会写入到Target或者采集到的样本的标签中。</p>`,75),r=[u];function d(k,m){return s(),a("div",null,r)}const b=n(i,[["render",d],["__file","servicediscovery.html.vue"]]);export{b as default};
