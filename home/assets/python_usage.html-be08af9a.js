import{_ as e,o as a,c as n,a as s}from"./app-69b48761.js";const d={},i=s(`<h1 id="python-usage" tabindex="-1"><a class="header-anchor" href="#python-usage" aria-hidden="true">#</a> Python Usage</h1><p>记录ubuntu中如何运行python项目，非root用户最好使用anaconda管理python虚拟环境，而且anaconda很方便，推荐使用。</p><h2 id="anaconda基本操作" tabindex="-1"><a class="header-anchor" href="#anaconda基本操作" aria-hidden="true">#</a> anaconda基本操作</h2><p>Conda 是一个强大的包管理器和环境管理器，用于管理和分发软件包、库和环境。以下是一些基本的 Conda 命令：</p><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> python</h3><p>在 Conda 中安装 Python 可以使用以下命令。请注意，如果您已经使用 Conda 安装了某个环境，通常无需单独安装 Python，因为创建环境时会自动包含 Python。</p><p><strong>安装最新版本的 Python（默认环境）：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">install</span> python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将安装最新版本的 Python。</p><p><strong>安装特定版本的 Python：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">install</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>替换 <code>3.8</code> 为安装的特定 Python 版本。</p><p><strong>创建新的环境并安装 Python：</strong></p><p>在新的 Conda 环境中安装 Python，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">--name</span> myenv <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个名为 <code>myenv</code> 的新环境，并安装 Python 3.8。</p><h3 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h3><p><strong>创建环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">--name</span> myenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个名为 <code>myenv</code> 的新环境。您可以通过添加包名指定要在环境中安装的软件包，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">--name</span> myenv numpy pandas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>激活环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda activate myenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将激活名为 <code>myenv</code> 的环境。请注意，Windows 用户可能需要使用 <code>activate</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>activate myenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>列出所有环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda info <span class="token parameter variable">--envs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">env</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将显示所有已安装的 Conda 环境。</p><p><strong>导出环境配置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">&gt;</span> environment.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将当前环境的配置导出到一个 YAML 文件中，以便将来可以通过该文件重新创建相同的环境。</p><p><strong>创建环境（从配置文件）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">env</span> create <span class="token parameter variable">-f</span> environment.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将使用之前导出的环境配置文件创建一个新环境。</p><p><strong>更新 Conda</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda update conda
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将更新 Conda 到最新版本。</p><h3 id="包" tabindex="-1"><a class="header-anchor" href="#包" aria-hidden="true">#</a> 包</h3><p><strong>安装软件包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">install</span> package_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将在当前激活的环境中安装指定的软件包。您还可以指定软件包的版本号。</p><p><strong>列出已安装的软件包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将显示当前环境中安装的所有软件包和它们的版本。</p><p><strong>升级软件包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda update package_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将升级指定的软件包到最新版本。</p><p><strong>移除软件包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda remove package_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将从当前环境中移除指定的软件包。</p><p><strong>使用 <code>pip</code> 安装依赖项</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple/ requirements.txt
// 直接设置安装源
pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将从 <code>requirements.txt</code> 文件中读取依赖项并使用 <code>pip</code> 安装它们。</p><h3 id="conda-config" tabindex="-1"><a class="header-anchor" href="#conda-config" aria-hidden="true">#</a> conda config</h3><p>对于 Conda，可以使用 <code>conda config</code> 命令来设置配置项，而无需手动编辑配置文件。以下是一些示例：</p><p><strong>设置默认安装源：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用了清华大学的 Conda 镜像源，可以根据需要选择其他镜像。使用 <code>--add channels</code> 添加一个新的频道。</p><p><strong>设置默认环境：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--set</span> env_prompt <span class="token string">&#39;({name}) &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将设置 Conda 环境名称在命令提示符中显示。</p><h2 id="venv虚拟环境" tabindex="-1"><a class="header-anchor" href="#venv虚拟环境" aria-hidden="true">#</a> venv虚拟环境</h2><p>为 Python 项目创建虚拟环境是一种良好的实践，它可以帮助隔离项目的依赖关系，使得不同项目可以使用不同版本的库和工具。以下是在项目中创建虚拟环境的步骤：</p><p><strong>使用 <code>venv</code> （Python 3.3及更高版本）</strong></p><ol><li><p>打开终端，并导航到你的项目目录。</p></li><li><p>运行以下命令来创建虚拟环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> venv venv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会在项目目录中创建一个名为 <code>venv</code> 的虚拟环境。</p></li><li><p>激活虚拟环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> venv/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当虚拟环境激活时，终端提示符应该会显示虚拟环境的名称。</p></li><li><p>安装项目依赖：</p><p>在虚拟环境激活状态下，使用 <code>pip</code> 安装项目所需的依赖项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> package_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或从 <code>requirements.txt</code> 安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>当完成项目工作后，可以使用以下命令退出虚拟环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="requirements-txt" tabindex="-1"><a class="header-anchor" href="#requirements-txt" aria-hidden="true">#</a> requirements.txt</h2><p><code>requirements.txt</code> 是一个文本文件，用于列出项目的依赖项及其版本。这个文件通常用于与版本控制系统一起管理项目的依赖关系，以确保在不同环境中能够重现相同的依赖项。</p><p>以下是编写 <code>requirements.txt</code> 的一些建议：</p><ol><li><p><strong>列出每个依赖项和版本号：</strong></p><p>在 <code>requirements.txt</code> 中，每行包含一个依赖项和它的版本号。例如：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Flask==2.0.1
requests&gt;=2.26.0,&lt;3.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述例子中，<code>Flask</code> 的版本被指定为 <code>2.0.1</code>，而 <code>requests</code> 的版本被指定为大于等于 <code>2.26.0</code> 且小于 <code>3.0.0</code>。</p></li><li><p><strong>使用适当的运算符：</strong></p><ul><li><code>==</code> 表示精确的版本匹配。</li><li><code>&gt;=</code> 和 <code>&lt;</code> 表示版本的最小和最大范围。</li></ul><p>选择适当的运算符，以确保你的项目在不同环境中能够正常工作。</p></li><li><p><strong>包含必要的依赖项：</strong></p><p>列出你的项目运行所需的所有依赖项。如果你的项目依赖于数据库、缓存系统等，也应该将它们包含在 <code>requirements.txt</code> 中。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Flask==2.0.1
SQLAlchemy==1.4.25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>注释依赖项：</strong></p><p>可以在 <code>requirements.txt</code> 文件中添加注释，以提供更多信息或理由。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code># 项目依赖项
Flask==2.0.1
SQLAlchemy==1.4.25

# 可选依赖项，仅在开发时需要
pytest==7.4.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用 <code>pip freeze</code> 自动生成：</strong></p><p>你还可以使用 <code>pip freeze</code> 命令来生成当前环境的依赖项列表，并将其保存到 <code>requirements.txt</code> 文件中。这是一种更自动化的方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个包含当前环境所有依赖项及其精确版本的 <code>requirements.txt</code> 文件。</p></li></ol>`,71),r=[i];function l(c,t){return a(),n("div",null,r)}const p=e(d,[["render",l],["__file","python_usage.html.vue"]]);export{p as default};
