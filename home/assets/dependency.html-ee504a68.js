import{_ as a,r as n,o as l,c as s,b as d,d as e,e as i,a as o}from"./app-79248646.js";const r="/home/assets/gomodule_indirect_01-61e8c559.png",t="/home/assets/gomodule_indirect_02-08800260.png",u="/home/assets/gomodule_minimal_version-21178845.png",g={},m=o(`<h1 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理" aria-hidden="true">#</a> 依赖管理</h1><p>Go语言依赖管理经历了三个重要的阶段：</p><ul><li>GOPATH；</li><li>vendor；</li><li>Go Module；</li></ul><p>早期Go语言单纯使用GOPATH管理依赖，但GOPATH不方便管理依赖的多个版本，后来增加了vendor，允许把项目依赖连同项目源码一同管理。 自从Go 1.11版本引入了全新的依赖管理工具Go module，直到Go 1.14版本 Go module才走向成熟。</p><h2 id="gopath" tabindex="-1"><a class="header-anchor" href="#gopath" aria-hidden="true">#</a> GOPATH</h2><h3 id="goroot" tabindex="-1"><a class="header-anchor" href="#goroot" aria-hidden="true">#</a> GOROOT</h3><p>通常说安装Go语言，实际上安装的是Go编译器和Go标准库，二者位于同一个安装包中。</p><p>Go语言安装的目录即GOROOT目录，里面保存了开发GO程序所需要的所有组件，比如编译器、标准库和文档等等。通常会把这个加入环境变量。</p><p>此外，通常还会把<code>$GOROOT/bin</code>添加到环境变量中，该目录主要是GO语言开发包中提供的二进程可执行程序。</p><p>所以，GOROOT实际上是指示GO语言安装目录的环境变量，属于GO语言顶级目录。</p><h3 id="gopath-1" tabindex="-1"><a class="header-anchor" href="#gopath-1" aria-hidden="true">#</a> GOPATH</h3><p>Go语言项目是由一个或多个package组成的，这些package按照来源分为以下几种：</p><ul><li>标准库</li><li>第三方库</li><li>项目私有库</li></ul><p>其中标准库的package全部位于GOROOT环境变量指示的目录中，而第三方库和项目私有库都位于GOPATH环境变量所指示的目录中。</p><p>实际上，安装GO语言时，安装程序会设置一个<strong>默认</strong>的GOPATH环境变量，与GOROOT不同的是，GOPATH环境变量位于用户域，因为每个用户都可以创建自己的工作空间而互不干扰。 用户的项目需要位于<code>GOPATH</code>下的<code>src/</code>目录中。</p><p>所以GOPATH指示用户工作空间目录的环境变量，它属于用户域范畴的。</p><h3 id="依赖查找" tabindex="-1"><a class="header-anchor" href="#依赖查找" aria-hidden="true">#</a> 依赖查找</h3><p>当某个package需要引用其他包时，编译器就会依次从<code>GOROOT/src/</code>和<code>GOPATH/src/</code>中去查找，如果某个包从GOROOT下找到的话，就不再到GOPATH目录下查找，所以如果项目中开发的包名与标准库相同的话，将会被自动忽略。</p><h3 id="gopath的缺点" tabindex="-1"><a class="header-anchor" href="#gopath的缺点" aria-hidden="true">#</a> GOPATH的缺点</h3><p>GOPATH的优点是足够简单，但它不能很好的满足实际项目的工程需求。</p><p>比如，有两个项目A和B，他们都引用某个第三方库T，但这两个项目使用了不同的T版本，即：</p><ul><li>项目A 使用T v1.0</li><li>项目B 使用T v2.0</li></ul><p>由于编译器依赖查找固定从GOPATH/src下查找<code>GOPATH/src/T</code>，所以，无法在同一个GOPATH目录下保存第三方库T的两个版本。所以项目A、B无法共享同一个GOPATH，需要各自维护一个。</p><h2 id="vendor" tabindex="-1"><a class="header-anchor" href="#vendor" aria-hidden="true">#</a> Vendor</h2><p>针对GOPATH的缺点：多项目无法共享同一个GOPATH。 vendor机制也没有彻底解决这个痛点，但是它提供了一个机制让项目的依赖隔离而不互相干扰。</p><p>自Go 1.6版本起，vendor机制正式启用，它允许把项目的依赖全部放到一个位于本项目的vendor目录中，这个vendor目录可以简单理解成私有的GOPATH目录。即编译时，优先从vendor中寻找依赖包，如果vendor中找不到再到GOPATH中寻找。</p><h3 id="vendor目录位置" tabindex="-1"><a class="header-anchor" href="#vendor目录位置" aria-hidden="true">#</a> vendor目录位置</h3><p>一个项目可以有多个vendor目录，分别位于不同的目录级别，但建议每个项目只在根目录放置一个vendor目录。</p><p>假如有一个<code>github.com/constabulary/example-gsftp</code>项目， <code>main.go</code>中依赖如下几个包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import (
    &quot;golang.org/x/crypto/ssh&quot;
    &quot;github.com/pkg/sftp&quot;
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有使用vendor目录时，若想编译这个项目，那么GOPATH目录结构应该是如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$GOPATH
|    src/
|    |    github.com/constabulary/example-gsftp/
|    |    golang.org/x/crypto/ssh
|    |    github.com/pkg/sftp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于vendor机制，则如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$GOPATH
|    src/
|    |    github.com/constabulary/example-gsftp/
|    |    |    cmd/
|    |    |    |    gsftp/
|    |    |    |    |    main.go
|    |    |    vendor/
|    |    |    |    github.com/pkg/sftp/
|    |    |    |    golang.org/x/crypto/ssh/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="搜索顺序" tabindex="-1"><a class="header-anchor" href="#搜索顺序" aria-hidden="true">#</a> 搜索顺序</h3><p>上面的例子中，在编译main.go时，编译器搜索依赖包顺序为：</p><ol><li>从<code>github.com/constabulary/example-gsftp/cmd/gsftp/</code>下寻找vendor目录，没有找到，继续从上层查找；</li><li>从<code>github.com/constabulary/example-gsftp/cmd/</code>下寻找vendor目录，没有找到，继续从上层查找；</li><li>从<code>github.com/constabulary/example-gsftp/</code>下寻找vendor目录，从vendor目录中查找依赖包，结束；</li></ol><p>如果<code>github.com/constabulary/example-gsftp/</code>下的vendor目录中没有依赖包，则返回到GOPATH目录继续查找，这就是GOPATH机制了。</p><p>从上面的搜索顺序可以看出，实际上vendor目录可以存在于项目的任意目录的。但非常不推荐这么做，因为如果vendor目录过于分散，很可能会出现同一个依赖包，在项目的多个vendor中出现多次，这样依赖包会多次编译进二进制文件，从而造成二进制大小急剧变大。同时，也很可能出现一个项目中使用同一个依赖包的多个版本的情况，这种情况往往应该避免。</p><h3 id="vendor存在的问题" tabindex="-1"><a class="header-anchor" href="#vendor存在的问题" aria-hidden="true">#</a> vendor存在的问题</h3><p>vendor很好的解决了多项目间的隔离问题，但是位于vendor中的依赖包无法指定版本，某个依赖包，在把它放入vendor的那刻起，它就固定在当时版本，项目的使用者很难识别出所使用的依赖版本。</p><p>比起这个，更严重的问题是二进制急剧扩大问题，比如你依赖某个开源包A和B，但A中也有一个vendor目录，其中也放了B，那么项目中将会出现两个开源包B。再进一步，如果这两个开源包B版本不一致呢？如果二者不兼容，那后果将是灾难性的。</p><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> MODULE</h2><p>在Go v1.11版本中，Module特性被首次引入，这标志着Go的依赖管理开始进入第三个阶段。</p><p>Go Module更像是一种全新的依赖管理方案，它涉及一系列的特性，但究其核心，它主要解决两个重要的问题：</p><ul><li>准确的记录项目依赖；</li><li>可重复的构建；</li></ul><p>准确的记录项目依赖，是指项目依赖哪些package、以及package的版本可以非常精确。可重复的构建是指，项目无论在谁的环境中（同平台）构建，其产物都是相同的。</p><h3 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p>官方给module的定义是：<code>A module is a collection of related Go packages that are versioned together as a single unit.</code>，定义非常晰，一组package的集合，一起被标记版本，即是一个module。</p><p>通常而言，一个仓库包含一个module（虽然也可以包含多个，但不推荐），所以仓库、module和package的关系如下：</p><ul><li>一个仓库包含一个或多个Go module；</li><li>每个Go module包含一个或多个Go package；</li><li>每个package包含一个或多个Go源文件；</li></ul>`,51),p={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},v=d("code",null,"v(major).(minor).(patch)",-1),h=d("code",null,"v0.1.0",-1),b=d("code",null,"v1.2.3",-1),x=d("code",null,"v1.5.0-rc.1",-1),G=o(`<p>版本格式<code>v(major).(minor).(patch)</code>中major指的是大版本，minor指小版本，patch指补丁版本。</p><ul><li>major: 当发生不兼容的改动时才可以增加major版本；比如<code>v2.x.y</code>与<code>v1.x.y</code>是不兼容的；</li><li>minor: 当有新增特性时才可以增加该版本，比如<code>v1.17.0</code>是在<code>v1.16.0</code>基础上加了新的特性，同时兼容<code>v1.16.0</code>；</li><li>patch: 当有bug修复时才可以 增加该版本，比如<code>v1.17.1</code>修复了<code>v1.17.0</code>上的bug，没有新特性增加；</li></ul><p>语义化版本规范的好处是，用户通过版本号就能了解版本信息。</p><h3 id="init和require" tabindex="-1"><a class="header-anchor" href="#init和require" aria-hidden="true">#</a> init和require</h3><p>在Go module机制下，项目的module名字以及其依赖信息记录在一个名为<code>go.mod</code>的文件中，该文件可以手动创建，也可以使用<code>go mod init</code>命令自动生成。</p><p>完整的<code>go mod init</code>命令格式为<code>go mod init [module]</code>：其中<code>[module]</code>为module名字，如果不填，<code>go mod init</code>会尝试从版本控制系统或import的注释中猜测一个。建议明确指定。</p><p>引入依赖后，会在go.mod文件中添加引入的依赖信息，这些依赖被<code>require</code>指令标识，于此同时，还会在go.sum记录该依赖的校验和。</p><p>如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go.mod</span>
module testmodule

<span class="token keyword">go</span> <span class="token number">1.13</span>

require github<span class="token punctuation">.</span>com<span class="token operator">/</span>google<span class="token operator">/</span>uuid v1<span class="token punctuation">.</span><span class="token number">1.1</span>

<span class="token comment">// go.sum </span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>google<span class="token operator">/</span>uuid v1<span class="token punctuation">.</span><span class="token number">1.1</span> h1<span class="token punctuation">:</span>Gkbcsh<span class="token operator">/</span>GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF<span class="token operator">/</span>3gY<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>google<span class="token operator">/</span>uuid v1<span class="token punctuation">.</span><span class="token number">1.1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>TIyPZe4MgqvfeYDBFedMoGGpEw<span class="token operator">/</span>LqOeaOT<span class="token operator">+</span>nhxU<span class="token operator">+</span>yHo<span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h3><p><code>go.mod</code>文件中通过<code>指令</code>声明module信息，用于控制命令行工具进行版本选择。一共有四个指令可供使用：</p><ul><li>module： 声明module名称；</li><li>require： 声明依赖以及其版本号；</li><li>replace： 替换require中声明的依赖，使用另外的依赖及其版本号；</li><li>exclude： 禁用指定的依赖；</li></ul><h4 id="replace-工作机制" tabindex="-1"><a class="header-anchor" href="#replace-工作机制" aria-hidden="true">#</a> replace 工作机制</h4><p><code>replace</code>指替换，它指示编译工具替换<code>require</code>指定中出现的包，比如，我们在<code>require</code>中指定的依赖如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module testmodule  

go 1.13  

require github.com/google/uuid v1.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，可以使用<code>go list -m all</code>命令查看最终选定的版本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@ecs-d8b6 gomodule]# go list -m all
testmodule
github.com/google/uuid v1.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，修改<code>go.mod</code>，添加replace指令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@ecs-d8b6 gomodule]# cat go.mod 
module testmodule

go 1.13

require github.com/google/uuid v1.1.1

replace github.com/google/uuid v1.1.1 =&gt; github.com/google/uuid v1.1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>replace github.com/google/uuid v1.1.1 =&gt; github.com/google/uuid v1.1.0</code>指定表示替换uuid v1.1.1版本为 v1.1.0，此时再次使用<code>go list -m all</code>命令查看最终选定的版本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@ecs-d8b6 gomodule]# go list -m all 
github.com/renhongcai/gomodule
github.com/google/uuid v1.1.1 =&gt; github.com/google/uuid v1.1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其最终选择的uuid版本为 v1.1.0。</p><p><code>replace</code>正常工作还需要满足两个条件：</p><p>第一，<code>replace</code>仅在当前module为<code>main module</code>时有效，如果其他项目引用了<code>testmodule</code>，那么其他项目编译时，<code>replace</code>就会被自动忽略。</p><p>第二，<code>replace</code>指定中<code>=&gt;</code>前面的包及其版本号必须出现在<code>require</code>中才有效，否则指令无效，也会被忽略。</p><h4 id="replace-使用场景" tabindex="-1"><a class="header-anchor" href="#replace-使用场景" aria-hidden="true">#</a> replace 使用场景</h4><p><strong>替换无法下载的包</strong></p><p>由于中国大陆网络问题，有些包无法顺利下载，比如<code>golang.org</code>组织下的包，值得庆幸的是这些包在GitHub都有镜像，此时 就可以使用GitHub上的包来替换。</p><p>比如，项目中使用了<code>golang.org/x/text</code>包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package main

import (
    &quot;fmt&quot;

    &quot;github.com/google/uuid&quot;
    &quot;golang.org/x/text/language&quot;
    &quot;golang.org/x/text/message&quot;
)

func main() {
    id := uuid.New().String()
    fmt.Println(&quot;UUID: &quot;, id)

    p := message.NewPrinter(language.BritishEnglish)
    p.Printf(&quot;Number format: %v.\\n&quot;, 1500)

    p = message.NewPrinter(language.Greek)
    p.Printf(&quot;Number format: %v.\\n&quot;, 1500)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的简单例子，使用两种语言<code>language.BritishEnglish</code> 和<code>language.Greek</code>分别打印数字<code>1500</code>，来查看不同语言对数字格式的处理，一个是<code>1,500</code>，另一个是<code>1.500</code>。此时就会分别引入<code>&quot;golang.org/x/text/language&quot;</code> 和<code>&quot;golang.org/x/text/message&quot;</code>。</p><p>执行<code>go get</code> 或<code>go build</code>命令时会就再次分析依赖情况，并更新<code>go.mod</code>文件。网络正常情况下，<code>go.mod</code>文件将会变成下面的内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module testmodule

go 1.13

require (
    github.com/google/uuid v1.1.1
    golang.org/x/text v0.3.2
)

replace github.com/google/uuid v1.1.1 =&gt; github.com/google/uuid v1.1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有合适的网络代理情况下，<code>golang.org/x/text</code> 很可能无法下载。那么此时，就可以使用<code>replace</code>来让项目使用GitHub上相应的镜像包。可以添加一条新的<code>replace</code>条目，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>replace (
    github.com/google/uuid v1.1.1 =&gt; github.com/google/uuid v1.1.0
    golang.org/x/text v0.3.2 =&gt; github.com/golang/text v0.3.2
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，项目编译时就会从GitHub下载包。源代码中import路径 <code>golang.org/x/text/xxx</code>不需要改变。</p><p>是否可以将import路径由<code>golang.org/x/text/xxx</code>改成<code>github.com/golang/text/xxx</code>？这样一来，就不需要使用replace来替换包了。</p><p>遗憾的是，不可以。因为<code>github.com/golang/text</code>只是镜像仓库，其<code>go.mod</code>文件中定义的module还是<code>module golang.org/x/text</code>，这个module名字直接决定了import的路径。</p><p><strong>调试依赖包</strong></p><p>有时需要调试依赖包，此时就可以使用<code>replace</code>来修改依赖，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>replace (
github.com/google/uuid v1.1.1 =&gt; ../uuid
golang.org/x/text v0.3.2 =&gt; github.com/golang/text v0.3.2
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语句<code>github.com/google/uuid v1.1.1 =&gt; ../uuid</code>使用本地的uuid来替换依赖包，此时，可以任意地修改<code>../uuid</code>目录的内容来进行调试。</p><p>除了使用相对路径，还可以使用绝对路径，甚至还可以使用自已的fork仓库。</p><p><strong>使用fork仓库</strong></p><p>有时在使用开源的依赖包时发现了bug，在开源版本还未修改或者没有新的版本发布时，可以使用fork仓库，在fork仓库中进行bug fix。 可以在fork仓库上发布新的版本，并相应的修改<code>go.mod</code>来使用fork仓库。</p><p>使用fork仓库仅仅是临时的做法，一旦开源版本变得可用，需要尽快切换到开源版本。</p><p><strong>禁止被依赖</strong></p>`,47),k=d("code",null,"replace",-1),O={href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer"},f=d("code",null,"go.mod",-1),A=d("code",null,"require",-1),M=d("code",null,"v0.0.0",-1),T=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module k8s.io/kubernetes

require (
    ...
    k8s.io/api v0.0.0
    k8s.io/apiextensions-apiserver v0.0.0
    k8s.io/apimachinery v0.0.0
    k8s.io/apiserver v0.0.0
    k8s.io/cli-runtime v0.0.0
    k8s.io/client-go v0.0.0
    k8s.io/cloud-provider v0.0.0
    ...
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于上面的依赖都不存在v0.0.0版本，所以其他项目直接依赖<code>k8s.io/kubernetes</code>时会因无法找到版本而无法使用。 因为Kubernetes不希望作为module被直接使用，其他项目可以使用kubernetes其他子组件。</p><p>kubernetes 对外隐藏了依赖版本号，其真实的依赖通过<code>replace</code>指定：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>replace (
    k8s.io/api =&gt; ./staging/src/k8s.io/api
    k8s.io/apiextensions-apiserver =&gt; ./staging/src/k8s.io/apiextensions-apiserver
    k8s.io/apimachinery =&gt; ./staging/src/k8s.io/apimachinery
    k8s.io/apiserver =&gt; ./staging/src/k8s.io/apiserver
    k8s.io/cli-runtime =&gt; ./staging/src/k8s.io/cli-runtime
    k8s.io/client-go =&gt; ./staging/src/k8s.io/client-go
    k8s.io/cloud-provider =&gt; ./staging/src/k8s.io/cloud-provider
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>replace</code>指令在当前模块不是<code>main module</code>时会被自动忽略的，Kubernetes正是利用了这一特性来实现对外隐藏依赖版本号来实现禁止直接引用的目的。</p><h3 id="exclude" tabindex="-1"><a class="header-anchor" href="#exclude" aria-hidden="true">#</a> exclude</h3><p><code>go.mod</code>文件中的<code>exclude</code>指令用于排除某个包的特定版本，其与<code>replace</code>类似，也仅在当前module为<code>main module</code>时有效，其他项目引用当前项目时，<code>exclude</code>指令会被忽略。</p><h4 id="排除指定版本" tabindex="-1"><a class="header-anchor" href="#排除指定版本" aria-hidden="true">#</a> 排除指定版本</h4><p>假如，当前uuid仅有<code>v1.0.0</code> 、<code>v1.1.0</code>和<code>v1.1.1</code>三个版本可用，而且假定<code>v1.1.0</code>版本有严重bug。 此时可以使用<code>exclude</code>指令将uuid的<code>v1.1.0</code>版本排除在外，即在<code>go.mod</code>文件添加如下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>exclude github.com/google/uuid v1.1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然暂时没有使用uuid的<code>v1.1.0</code>版本，但如果将来引用了其他包，正好其他包引用了uuid的<code>v1.1.0</code>版本的话，此时添加的<code>exclude</code>指令就会跳过<code>v1.1.0</code>版本。</p><p>将来该模块引用了A模块，A模块使用了<code>v1.1.0</code>版本，那么在选择版本时，该模块发现跳过uuid <code>v1.1.0</code>版本后还有<code>v1.1.1</code>版本可用，Go 命令行工具可以自动选择<code>v1.1.1</code>版本，但如果没有更新的版本时将会报错而无法编译。</p><h3 id="indirect" tabindex="-1"><a class="header-anchor" href="#indirect" aria-hidden="true">#</a> indirect</h3><p>在使用 Go module 过程中，随着引入的依赖增多，<code>go.mod</code>文件中部分依赖包后面会出现一个<code>// indirect</code>的标识。这个标识总是出现在<code>require</code>指令中，<code>indirect</code>表示间接的依赖。</p><p>在执行命令<code>go mod tidy</code>时，Go module 会自动整理<code>go.mod 文件</code>，如果有必要会在部分依赖包的后面增加<code>// indirect</code>注释。一般而言，被添加注释的包肯定是间接依赖的包，而没有添加<code>// indirect</code>注释的包则是直接依赖的包，即明确的出现在某个<code>import</code>语句中。</p><p>然而，这里需要着重强调的是：并不是所有的间接依赖都会出现在 <code>go.mod</code>文件中。间接依赖出现在<code>go.mod</code>文件的情况，可能符合下面所列场景的一种或多种：</p><ul><li>直接依赖未启用 Go module</li><li>直接依赖go.mod 文件中缺失部分依赖</li></ul><h4 id="直接依赖未启用-go-module" tabindex="-1"><a class="header-anchor" href="#直接依赖未启用-go-module" aria-hidden="true">#</a> 直接依赖未启用 Go module</h4><p>如下图所示，Module A 依赖 B，但是 B 还未切换成 Module，也即没有<code>go.mod</code>文件，此时，当使用<code>go mod tidy</code>命令更新A的<code>go.mod</code>文件时，B的两个依赖B1和B2将会被添加到A的<code>go.mod</code>文件中（前提是A之前没有依赖B1和B2），并且B1 和B2还会被添加<code>// indirect</code>的注释。</p><p><img src="`+r+'" alt="img"></p><h4 id="直接依赖-go-mod-文件不完整" tabindex="-1"><a class="header-anchor" href="#直接依赖-go-mod-文件不完整" aria-hidden="true">#</a> 直接依赖 go.mod 文件不完整</h4><p>即便B拥有<code>go.mod</code>，如果<code>go.mod</code>文件不完整的话，Module A依然会记录部分B的依赖到<code>go.mod</code>文件中。</p><p>如下图所示，Module B虽然提供了<code>go.mod</code>文件中，但<code>go.mod</code>文件中只添加了依赖B1，那么此时A在引用B时，则会在A的<code>go.mod</code>文件中添加B2作为间接依赖，B1则不会出现在A的<code>go.mod</code>文件中。</p><p><img src="'+t+`" alt="img"></p><h4 id="如何查找间接依赖来源" tabindex="-1"><a class="header-anchor" href="#如何查找间接依赖来源" aria-hidden="true">#</a> 如何查找间接依赖来源</h4><p>Go module提供了<code>go mod why</code> 命令来解释为什么会依赖某个软件包，若要查看<code>go.mod</code>中某个间接依赖是被哪个依赖引入的，可以使用命令<code>go mod why -m &lt;pkg&gt;</code>来查看。</p><p>希望确定间接依赖<code>github.com/Rican7/retry v0.1.0 // indirect</code>是被哪个依赖引入的，则可以使用命令<code>go mod why</code>来查看：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@ecs-d8b6 gomodule]# go mod why -m github.com/Rican7/retry
# github.com/Rican7/retry
github.com/renhongcai/gomodule
github.com/renhongcai/indirect
github.com/Rican7/retry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的打印信息中<code># github.com/Rican7/retry</code> 表示当前正在分析的依赖，后面几行则表示依赖链。<code>github.com/renhongcai/gomodule</code> 依赖<code>github.com/renhongcai/indirect</code>，而<code>github.com/renhongcai/indirect</code>依赖<code>github.com/Rican7/retry</code>。由此可以判断出间接依赖<code>github.com/Rican7/retry</code>是被<code>github.com/renhongcai/indirect</code>引入的。</p><p>另外，命令<code>go mod why -m all</code>则可以分析所有依赖的依赖链。</p><h3 id="版本选择机制" tabindex="-1"><a class="header-anchor" href="#版本选择机制" aria-hidden="true">#</a> 版本选择机制</h3><p><code>go get &lt;pkg&gt;</code>来获取某个依赖，如果没有特别指定依赖的版本号，<code>go get</code>会自动选择一个最优版本，并且如果本地有<code>go.mod</code>文件的话，还会自动更新<code>go.mod</code>文件。</p><p>事实上除了<code>go get</code>，<code>go build</code>和<code>go mod tidy</code>也会自动选择依赖的版本。这些命令选择依赖版本时都遵循一些规则。</p><h4 id="依赖包版本约定" tabindex="-1"><a class="header-anchor" href="#依赖包版本约定" aria-hidden="true">#</a> 依赖包版本约定</h4><p>从Go v1.11版本开始，随着Go module特性的引入，依赖包的兼容性要求的核心内容如下：</p><ul><li>如果新package 和旧的package拥有相同的import 路径，那么新package必须兼容旧的package;</li><li>如果新的package不能兼容旧的package，那么新的package需要更换import路径；</li></ul><p>Go module 的<code>go.mod</code>中记录的module名字决定了import路径。</p><p>在Go module时代，module版本号要遵循语义化版本规范，即版本号格式为<code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>，如v1.2.3。当有不兼容的改变时，需要增加<code>major</code>版本号，如v2.1.0。</p><p>Go module规定，如果<code>major</code>版本号大于<code>1</code>，则<code>major</code>版本号需要显式地标记在module名字中，如<code>module github.com/my/mod/v2</code>。这样做的好处是Go module 会把<code>module github.com/my/mod/v2</code> 和 <code>module github.com/my/mod</code>视做两个module，他们甚至可以被同时引用。</p><h4 id="版本选择机制-1" tabindex="-1"><a class="header-anchor" href="#版本选择机制-1" aria-hidden="true">#</a> 版本选择机制</h4><p>Go 的多个命令行工具都有自动选择依赖版本的能力，如<code>go build</code> 和<code>go test</code>，当在源代码中增加了新的import，这些命令将会自动选择一个最优的版本，并更新<code>go.mod</code>文件。</p><p>需要特别说明的是，如果<code>go.mod</code>文件中已标记了某个依赖包的版本号，则这些命令不会主动更新<code>go.mod</code>中的版本号。所谓自动更新版本号只在<code>go.mod</code>中缺失某些依赖或者依赖不匹配时才会发生。</p><p><strong>最新版本选择</strong></p><p>当在源代码中新增加了一个import，比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import &quot;github.com/RainbowMango/M&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果<code>go.mod</code>的require指令中并没有包含<code>github.com/RainbowMango/M</code>这个依赖，那么<code>go build</code> 或<code>go test</code>命令则会去<code>github.com/RainbowMango/M</code>仓库寻找最新的符合语义化版本规范的版本，这里，由于import路径里没有类似于<code>v2</code>或更高的版本号，所以版本选择时只会选择v1.x.x的版本，不会去选择v2.x.x或更高的版本。</p><p><strong>最小版本选择</strong></p><p>有时记录在<code>go.mod</code>文件中的依赖包版本会随着引入其他依赖包而发生变化。</p><p>如下图所示：</p><img src="`+u+`" alt="img" style="zoom:67%;"><p>Module A 依赖 Module M的v1.0.0版本，但之后 Module A 引入了 Module D，而Module D 依赖 Module M的v1.1.1版本，此时，由于依赖的传递，Module A也会选择v1.1.1版本。</p><p>需要注意的是，此时会自动选择最小可用的版本，而不是最新的tag版本。</p><h3 id="incompatible" tabindex="-1"><a class="header-anchor" href="#incompatible" aria-hidden="true">#</a> incompatible</h3><p>Module的版本号需要遵循<code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>的格式，此外，如果<code>major</code>版本号大于1时，其版本号还需要体现在Module名字中。</p><p>那么如果Module的<code>major</code>版本号虽然变成了<code>v2.x.x</code>，但Module名字仍保持原样会怎么样呢？ 其他项目是否还可以引用呢？其他项目引用时有没有风险呢？</p><h4 id="能否引用不兼容的包" tabindex="-1"><a class="header-anchor" href="#能否引用不兼容的包" aria-hidden="true">#</a> 能否引用不兼容的包</h4><p>假如 <code>github.com/RainbowMango/m</code> 当前版本为<code>v3.6.0</code>，因为其Module名字未遵循Golang所推荐的风格，即Module名中附带版本信息，称这个Module为不规范的Module。</p><p>不规范的Module还是可以引用的，但跟引用规范的Module略有差别。</p><p>如果在项目A中引用了该module，使用命令<code>go mod tidy</code>，go 命令会自动查找Module m的最新版本，即<code>v3.6.0</code>。 由于Module为不规范的Module，为了加以区分，go 命令会在<code>go.mod</code>中增加<code>+incompatible</code> 标识。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>require (
    github.com/RainbowMango/m v3.6.0+incompatible
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了增加<code>+incompatible</code>（不兼容）标识外，在其使用上没有区别。</p><h4 id="如何处理incompatible" tabindex="-1"><a class="header-anchor" href="#如何处理incompatible" aria-hidden="true">#</a> 如何处理incompatible</h4><p>困扰在于，比如 <code>github.com/blang/semver</code>发布了新版本<code>v4.0.0</code>，但不幸的是Module名字仍然为<code>github.com/blang/semver</code>。那么，升级这个Module的版本将会变得困难。因为<code>v3.6.0</code>到<code>v4.0.0</code>跨越了大版本，按照语义化版本规范来解释说明发生了不兼容的改变，即然不兼容，项目维护者有必须对升级持谨慎态度，甚至放弃升级。</p><h3 id="伪版本" tabindex="-1"><a class="header-anchor" href="#伪版本" aria-hidden="true">#</a> 伪版本</h3><p>在<code>go.mod</code>中通常使用语义化版本来标记依赖，比如<code>v1.2.3</code>、<code>v0.1.5</code>等。因为<code>go.mod</code>文件通常是<code>go</code>命令自动生成并修改的，所以实际上是<code>go</code>命令习惯使用语义化版本。</p><p>诸如<code>v1.2.3</code>和<code>v0.1.5</code>这样的语义化版本，实际是某个commit ID的标记，真正的版本还是commit ID。</p><p>由于语义化版本比<code>commit ID</code>更直观（方便交流与比较版本大小），所以一般情况下使用语义化版本。</p><h4 id="什么是伪版本" tabindex="-1"><a class="header-anchor" href="#什么是伪版本" aria-hidden="true">#</a> 什么是伪版本</h4><p>在实际项目中，有时不得不直接使用一个<code>commit ID</code>，比如某项目发布了<code>v1.5.0</code>版本，但随即又修复了一个bug（引入一个新的commit ID），而且没有发布新的版本。此时，如果希望使用最新的版本，就需要直接引用最新的<code>commit ID</code>，而不是之前的语义化版本<code>v1.5.0</code>。 使用<code>commit ID</code>的版本在Go语言中称为<code>pseudo-version</code>，可译为&quot;伪版本&quot;。</p><p>伪版本的版本号通常会使用<code>vx.y.z-yyyymmddhhmmss-abcdefabcdef</code>格式，其中<code>vx.y.z</code>看上去像是一个真实的语义化版本，但通常并不存在该版本，所以称为伪版本。另外<code>abcdefabcdef</code>表示某个commit ID的前12位，而<code>yyyymmddhhmmss</code>则表示该commit的提交时间，方便做版本比较。</p><p>使用伪版本的<code>go.mod</code>举例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...
require (
    go.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738
)
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何获取伪版本" tabindex="-1"><a class="header-anchor" href="#如何获取伪版本" aria-hidden="true">#</a> 如何获取伪版本</h4><p>使用<code>go get github.com/renhongcai/gomodule@6eb27062747a458a27fb05fceff6e3175e5eca95</code>命令（可以使用完整的commit id，也可以只使用前12位）：</p><p>此时，可以看到生成的伪版本号为<code>v1.5.1-0.20200203082525-6eb27062747a</code>，当前最新版本为<code>v1.5.0</code>，<code>go</code>命令生成伪版本号时自动增加了版本。</p><p>也可以使用某个分支<code>go get xxx@main</code>，他也会为最新的commit创建一个伪版本。</p><p>伪版本由go自动生成，不用特别关注。</p><h3 id="依赖包存储" tabindex="-1"><a class="header-anchor" href="#依赖包存储" aria-hidden="true">#</a> 依赖包存储</h3><p><code>GOPATH</code>模式下，依赖包存储在<code>$GOPATH/src</code>，该目录下只保存特定依赖包的一个版本，而在<code>GOMODULE</code>模式下，依赖包存储在<code>$GOPATH/pkg/mod</code>，该目录中可以存储特定依赖包的多个版本。</p><p>需要注意的是<code>$GOPATH/pkg/mod</code>目录下有个<code>cache</code>目录，它用来存储依赖包的缓存，简单说，<code>go</code>命令每次下载新的依赖包都会在该<code>cache</code>目录中保存一份。对<code>GOPROXY</code>有用。</p><p>使用<code>GO111MODULE</code>环境变量控制具体的模式：</p><ul><li><code>export GO111MODULE=off</code>切换到<code>GOPATH</code>模式</li><li><code>export GO111MODULE=on</code>切换到<code>GOMODULE</code>模式。</li></ul><h4 id="gopath-依赖包存储" tabindex="-1"><a class="header-anchor" href="#gopath-依赖包存储" aria-hidden="true">#</a> GOPATH 依赖包存储</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># export GO111MODULE=off
# go get -v github.com/google/uuid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>GOPATH</code>模式下，<code>go get</code>命令会将依赖包下载到<code>$GOPATH/src/google</code>目录中。</p><p>该命令等同于在<code>$GOPATH/src/google</code>目录下执行<code>git clone https://github.com/google/uuid.git</code>，也就是<code>$GOPATH/src/google/uuid</code>目录中存储的是完整的仓库。</p><h4 id="gomodule-依赖包存储" tabindex="-1"><a class="header-anchor" href="#gomodule-依赖包存储" aria-hidden="true">#</a> GOMODULE 依赖包存储</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># export GO111MODULE=on
# go get -v github.com/google/uuid
# go get -v github.com/google/uuid@v1.0.0
# go get -v github.com/google/uuid@v1.1.0
# go get -v github.com/google/uuid@v1.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>GOMODULE</code>模式下，<code>go get</code>命令会将依赖包下载到<code>$GOPATH/pkg/mod</code>目录下，并且按照依赖包的版本分别存放。（注：<code>go get</code>命令不指定特定版本时，默认会下载最新版本）</p><p>此时<code>$GOPATH/pkg/mod</code>目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\${GOPATH}/pkg/mod/github.com/google
├── uuid@v1.0.0
├── uuid@v1.1.0
├── uuid@v1.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相较于<code>GOPATH</code>模式，<code>GOMODULE</code>有两处不同点：</p><ul><li>一是依赖包的目录中包含了版本号，每个版本占用一个目录；</li><li>二是依赖包的特定版本目录中只包含依赖包文件，不包含<code>.git</code>目录；</li></ul><h4 id="包名大小写敏感问题" tabindex="-1"><a class="header-anchor" href="#包名大小写敏感问题" aria-hidden="true">#</a> 包名大小写敏感问题</h4><p>有时使用的包名中会包含大写字母，比如<code>github.com/Azure/azure-sdk-for-go</code>，<code>GOMODULE</code>模式下，在存储时会将包名做大小写编码处理，即每个大写字母将变与<code>!</code>+相应的小写字母。</p><p>由于<code>github.com/google/uuid</code>域名不区分大小写，所以使用<code>github.com/google/UUID</code>下载包时仍然可以下载，但在存储时将会严格区分大小写，此时<code>$GOPATH/pkg/mod/google/</code>目录下将会多出一个<code>!u!u!i!d@v1.0.0</code>目录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\${GOPATH}/pkg/mod/github.com/google
├── uuid@v1.0.0
├── uuid@v1.1.0
├── uuid@v1.1.1
├── !u!u!i!d@v1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>go get</code>中使用错误的包名，除了会增加额外的不必要存储外，还可能会影响<code>go</code>命令解析依赖，还可能将错误的包名使用到<code>import</code>指令中，所以在实际使用时应该尽量避免。</p><h3 id="go-sum" tabindex="-1"><a class="header-anchor" href="#go-sum" aria-hidden="true">#</a> go.sum</h3><p>为了确保一致性构建，Go引入了<code>go.mod</code>文件来标记每个依赖包的版本，在构建过程中<code>go</code>命令会下载<code>go.mod</code>中的依赖包，下载的依赖包会缓存在本地，以便下次构建。 考虑到下载的依赖包有可能是被黑客恶意篡改的，以及缓存在本地的依赖包也有被篡改的可能，单单一个<code>go.mod</code>文件并不能保证一致性构建。</p><p>为了解决Go module的这一安全隐患，Go开发团队在引入<code>go.mod</code>的同时也引入了<code>go.sum</code>文件，用于记录每个依赖包的哈希值，在构建时，如果本地的依赖包hash值与<code>go.sum</code>文件中记录得不一致，则会拒绝构建。</p><h4 id="go-sum文件记录" tabindex="-1"><a class="header-anchor" href="#go-sum文件记录" aria-hidden="true">#</a> go.sum文件记录</h4><p><code>go.sum</code>文件中每行记录由<code>module</code>名、版本和哈希组成，并由空格分开：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;module&gt; &lt;version&gt;[/go.mod] &lt;hash&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如，某个<code>go.sum</code>文件中记录了<code>github.com/google/uuid</code> 这个依赖包的<code>v1.1.1</code>版本的哈希值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>github.com/google/uuid v1.1.1 h1:Gkbcsh/GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF/3gY=  
github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，每个<code>依赖包版本</code>会包含两条记录，第一条记录为该<code>依赖包版本</code>整体（所有文件）的哈希值，第二条记录仅表示该<code>依赖包版本</code>中<code>go.mod</code>文件的哈希值，如果该<code>依赖包版本</code>没有<code>go.mod</code>文件，则只有第一条记录。如上面的例子中，<code>v1.1.1</code>表示该<code>依赖包版本</code>整体，而<code>v1.1.1/go.mod</code>表示该<code>依赖包版本</code>中<code>go.mod</code>文件。</p><p><code>依赖包版本</code>中任何一个文件（包括<code>go.mod</code>）改动，都会改变其整体哈希值，此处再额外记录<code>依赖包版本</code>的<code>go.mod</code>文件主要用于计算依赖树时不必下载完整的<code>依赖包版本</code>，只根据<code>go.mod</code>即可计算依赖树。</p><p>每条记录中的哈希值前均有一个表示哈希算法的<code>h1:</code>，表示后面的哈希值是由算法<code>SHA-256</code>计算出来的</p><p>此外，<code>go.sum</code>文件中记录的<code>依赖包版本</code>数量往往比<code>go.mod</code>文件中要多，这是因为二者记录的粒度不同导致的。<code>go.mod</code>只需要记录直接依赖的<code>依赖包版本</code>，只在<code>依赖包版本</code>不包含<code>go.mod</code>文件时候才会记录间接<code>依赖包版本</code>，而<code>go.sum</code>则是要记录构建用到的所有<code>依赖包版本</code>。</p><h4 id="生成" tabindex="-1"><a class="header-anchor" href="#生成" aria-hidden="true">#</a> 生成</h4><p><code>go get</code>命令首先会将该依赖包下载到本地缓存目录<code>$GOPATH/pkg/mod/cache/download</code>，该依赖包为一个后缀为<code>.zip</code>的压缩包，如<code>v1.0.0.zip</code>。<code>go get</code>下载完成后会对该<code>.zip</code>包做哈希运算，并将结果存放在后缀为<code>.ziphash</code>的文件中，如<code>v1.0.0.ziphash</code>。如果在项目的根目录中执行<code>go get</code>命令的话，<code>go get</code>会同步更新<code>go.mod</code>和<code>go.sum</code>文件，<code>go.mod</code>中记录的是依赖名及其版本，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>require (
    github.com/google/uuid v1.0.0
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>go.sum</code>文件中则会记录依赖包的哈希值（同时还有依赖包中go.mod的哈希值），如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>github.com/google/uuid v1.0.0 h1:b4Gk+7WdP/d3HZH8EJsZpvV7EtDOgaZLtnaNGIu1adA=
github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，在更新<code>go.sum</code>之前，为了确保下载的依赖包是真实可靠的，<code>go</code>命令在下载完依赖包后还会查询<code>GOSUMDB</code>环境变量所指示的服务器，以得到一个权威的<code>依赖包版本</code>哈希值。如果<code>go</code>命令计算出的<code>依赖包版本</code>哈希值与<code>GOSUMDB</code>服务器给出的哈希值不一致，<code>go</code>命令将拒绝向下执行，也不会更新<code>go.sum</code>文件。</p><h4 id="校验" tabindex="-1"><a class="header-anchor" href="#校验" aria-hidden="true">#</a> 校验</h4><p>假设拿到某项目的源代码并尝试在本地构建，<code>go</code>命令会从本地缓存中查找所有<code>go.mod</code>中记录的依赖包，并计算本地依赖包的哈希值，然后与<code>go.sum</code>中的记录进行对比，即检测本地缓存中使用的<code>依赖包版本</code>是否满足项目<code>go.sum</code>文件的期望。</p><p>如果校验失败，说明本地缓存目录中<code>依赖包版本</code>的哈希值和项目中<code>go.sum</code>中记录的哈希值不一致，<code>go</code>命令将拒绝构建。</p><p>当校验失败时，有必要确认到底是本地缓存错了，还是<code>go.sum</code>记录错了。 需要说明的是，二者都可能出错。当校验失败时，<code>go</code>命令倾向于相信<code>go.sum</code>，因为一个新的<code>依赖包版本</code>在被添加到<code>go.sum</code>前是经过<code>GOSUMDB</code>（校验和数据库）验证过的。此时即便系统中配置了<code>GOSUMDB</code>（校验和数据库），<code>go</code>命令也不会查询该数据库。</p><h4 id="校验和数据库" tabindex="-1"><a class="header-anchor" href="#校验和数据库" aria-hidden="true">#</a> 校验和数据库</h4><p>环境变量<code>GOSUMDB</code>标识一个<code>checksum database</code>，即校验和数据库，实际上是一个web服务器，该服务器提供查询<code>依赖包版本</code>哈希值的服务。</p><p>该数据库中记录了很多<code>依赖包版本</code>的哈希值，比如Google官方的<code>sum.golang.org</code>则记录了所有的可公开获得的<code>依赖包版本</code>。除了使用官方的数据库，还可以指定自行搭建的数据库，甚至干脆禁用它（<code>export GOSUMDB=off</code>）。</p><p>如果系统配置了<code>GOSUMDB</code>，在<code>依赖包版本</code>被写入<code>go.sum</code>之前会向该数据库查询该<code>依赖包版本</code>的哈希值进行二次校验，校验无误后再写入<code>go.sum</code>。</p><p>如果系统禁用了<code>GOSUMDB</code>，在<code>依赖包版本</code>被写入<code>go.sum</code>之前则不会进行二次校验，<code>go</code>命令会相信所有下载到的依赖包，并把其哈希值记录到<code>go.sum</code>中。</p>`,125);function P(y,H){const c=n("ExternalLinkIcon");return l(),s("div",null,[m,d("p",null,[e("此外，一个module的版本号规则必须遵循"),d("a",p,[e("语义化规范"),i(c)]),e("，版本号必须使用格式"),v,e("，比如"),h,e("、"),b,e(" 或"),x,e("。")]),G,d("p",null,[e("另一种使用"),k,e("的场景是module不希望被直接引用，比如开源软件"),d("a",O,[e("kubernetes"),i(c)]),e("，在它的"),f,e("中"),A,e("部分有大量的"),M,e("依赖，比如：")]),T])}const q=a(g,[["render",P],["__file","dependency.html.vue"]]);export{q as default};
