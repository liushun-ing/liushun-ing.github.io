import{_ as n,r as a,o as d,c as t,b as e,d as o,e as c,a as r}from"./app-de60e2dc.js";const i="/home/assets/nginxv2-dc0db62d.png",l="/home/assets/compose——up-68c51d1b.png",p="/home/assets/desktopdocker-c83f29a7.png",h="/home/assets/nodemanagerandworker-5d10b031.png",k="/home/assets/serviceandtask-34e739a2.png",m={},u=r(`<h1 id="docker-三剑客" tabindex="-1"><a class="header-anchor" href="#docker-三剑客" aria-hidden="true">#</a> Docker 三剑客</h1><p>这里就只是大概介绍了解一下</p><p>Docker三大编排工具：</p><ul><li><code>Docker Compose</code>：是用来组装多容器应用的工具，可以在 Swarm集群中部署分布式应用。</li><li><code>Docker Machine</code>：是支持多平台安装Docker的工具，使用 Docker Machine，可以很方便地在笔记本、云平台及数据中心里安装Docker。</li><li><code>Docker Swarm</code>：是Docker社区原生提供的容器集群管理工具。</li></ul><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p><code>Docker Compose</code>是<code>Docker</code>官方编排（Orchestration）项目之一，负责快速的部署分布式应用。<strong>Compose 定位是 「定义和运行多个 Docker 容器的应用</strong>（Defining and running multi-container Docker applications）」，其前身是开源项目<code>Fig</code>。</p><p>使用一个<code>Dockerfile</code>模板文件，可以很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器或者缓存服务容器，甚至还包括负载均衡容器等。Compose 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code>模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p>Compose 中有两个重要的概念：</p><ul><li>服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</li></ul><p><strong>Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理</strong>。Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。所以只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p><code>Compose</code>支持 Linux、macOS、Windows 10 三大平台。Compose 可以通过 Python 的包管理工具<code>pip</code>进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环境，更适合云计算场景。<strong>Docker for Mac 、Docker for Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ liushun@liushun ~ % <span class="token function">docker-compose</span> version
Docker Compose version v2.28.1-desktop.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h3><p>之前使用 docker build 构建过 nginx，现在也同样用他来做实验。</p><p>首先是 Dockerfile</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39;</span> &gt; /usr/share/nginx/html/index.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,18),_={href:"https://github.com/compose-spec/compose-spec/blob/main/00-overview.md",target:"_blank",rel:"noopener noreferrer"},g=r(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginv2</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动，访问 80 端口，即可看到结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+i+'" alt="screenshot2024-08-12 16.00.01" style="zoom:33%;"><p>可以看到他的执行情况，他会先试用 build 构建出镜像，然后创建 network 和 container，最终并启动容器</p><p><img src="'+l+'" alt="screenshot2024-08-12 16.01.47"></p><p><img src="'+p+'" alt="screenshot2024-08-12 16.02.57"></p><h2 id="docker-machine" tabindex="-1"><a class="header-anchor" href="#docker-machine" aria-hidden="true">#</a> Docker Machine</h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h3>',9),v={href:"https://docs.docker.com/machine/overview/",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"Docker Machine",-1),D=e("code",null,"Docker",-1),f=e("code",null,"Docker Machine",-1),w=e("code",null,"Go",-1),x=e("p",null,[e("code",null,"Docker Machine"),o("是 Docker 官方提供的一个工具，它可以帮助我们在远程的机器上安装 Docker，或者在虚拟机 host 上直接安装虚拟机并在虚拟机中安装 Docker。此外还可以通过 "),e("code",null,"docker-machine"),o("命令来管理这些虚拟机和 Docker。")],-1),S=e("p",null,"这玩意真抽象，这玩意是使用驱动，在一台机器上安装 docker 的。",-1),y=e("h2",{id:"docker-swarm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-swarm","aria-hidden":"true"},"#"),o(" Docker Swarm")],-1),C=e("h3",{id:"基本概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基本概念","aria-hidden":"true"},"#"),o(" 基本概念")],-1),M=e("code",null,"Swarm",-1),E={href:"https://github.com/docker/swarmkit/",target:"_blank",rel:"noopener noreferrer"},B=e("strong",null,"Docker 引擎内置（原生）的集群管理和编排工具",-1),N=e("code",null,"Docker Swarm",-1),A=e("strong",null,"Docker 容器集群服务",-1),I=r('<p>使用它，用户可以<strong>将多个 Docker 主机封装为单个大型的虚拟 Docker 主机，快速打造一套容器云平台</strong>。Swarm mode 内置 kv 存储功能，提供了众多的新特性，比如：具有容错能力的去中心化设计、内置服务发现、负载均衡、路由网格、动态伸缩、滚动更新、安全传输等。使得 Docker 原生的 Swarm 集群具备与<code>Mesos</code>、<code>Kubernetes</code>竞争的实力。使用 Swarm 集群之前需要了解以下几个概念。</p><h3 id="节点" tabindex="-1"><a class="header-anchor" href="#节点" aria-hidden="true">#</a> 节点</h3><p>运行 Docker 的主机可以主动初始化一个 Swarm 集群或者加入一个已存在的 Swarm 集群，这样这个<strong>运行 Docker 的主机就成为一个 Swarm 集群的节点 (node)</strong> 。节点分为<code>管理 (manager) 节点和工作 (worker) 节点</code>。</p><p>管理节点用于<code>Swarm</code>集群的管理，<code>docker swarm</code>命令基本只能在管理节点执行（节点退出集群命令<code>docker swarm leave</code>可以在工作节点执行）。一个 Swarm 集群可以有多个管理节点，但只有一个管理节点可以成为<code>leader</code>，leader 通过<code>raft</code>协议实现。</p><p>工作节点是任务执行节点，管理节点将服务 (<code>service</code>) 下发至工作节点执行。管理节点默认也作为工作节点。你也可以通过配置让服务只运行在管理节点。他们的关系如图：</p><img src="'+h+'" alt="screenshot2024-08-12 16.20.03" style="zoom:33%;"><h3 id="服务和任务" tabindex="-1"><a class="header-anchor" href="#服务和任务" aria-hidden="true">#</a> 服务和任务</h3><p><code>任务（Task）</code>是 Swarm 中的最小的调度单位，目前来说就是一个单一的容器；<code>服务（Services）</code>是指一组任务的集合，服务定义了任务的属性。服务有两种模式：</p><ul><li><code>replicated services</code>按照一定规则在各个工作节点上运行指定个数的任务。</li><li><code>global services</code>每个工作节点上运行一个任务</li></ul><p>两种模式通过<code>docker service create</code>的<code>--mode</code>参数指定。下图展示了容器、任务、服务的关系。</p><img src="'+k+'" alt="screenshot2024-08-12 16.25.49" style="zoom:33%;"><p>docker swarm 依托于 docker machine 来搭建 docker 集群。</p><h2 id="dockerfile最佳实践" tabindex="-1"><a class="header-anchor" href="#dockerfile最佳实践" aria-hidden="true">#</a> Dockerfile最佳实践</h2>',13),L={href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.k8stech.net/k8s-book/docs/13.Dockerfile%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",target:"_blank",rel:"noopener noreferrer"};function P(V,W){const s=a("ExternalLinkIcon");return d(),t("div",null,[u,e("p",null,[o("然后是 docker-compose.yml，具体的"),e("a",_,[o("配置文件格式文档"),c(s)])]),g,e("p",null,[e("a",v,[b,c(s)]),o("是"),D,o("官方编排（Orchestration）项目之一，负责在多种平台上快速安装 Docker 环境，"),f,o("项目基于"),w,o("语言实现。")]),x,S,y,C,e("p",null,[M,o("是使用"),e("a",E,[o("SwarmKit"),c(s)]),o("构建的 "),B,o("。"),N,o("是 Docker 官方三剑客项目之一，提供 "),A,o("，是 Docker 官方对容器云生态进行支持的核心方案。")]),I,e("p",null,[o("官网："),e("a",L,[o("最佳实践原文"),c(s)])]),e("p",null,[o("教程："),e("a",O,[o("教程"),c(s)])])])}const j=n(m,[["render",P],["__file","dockerutil.html.vue"]]);export{j as default};
