import{_ as t,r as e,o as l,c as i,b as n,d as o,e as p,a as s}from"./app-6479d577.js";const c="/home/assets/image-20220524205926164-44e68dd3.png",d="/home/assets/image-20220525112632214-77462f6d.png",r="/home/assets/image-20220524201258092-777e3423.png",u="/home/assets/image-20220525140217446-6c40c7d4.png",k="/home/assets/image-20220525170205272-5695594a.png",m="/home/assets/image-20220525170925364-f63a7719.png",g="/home/assets/image-20220525171340322-a05db3d5.png",v="/home/assets/image-20220525172001057-f3c7fa5d.png",b="/home/assets/image-20220525172508234-3db1c2c9.png",h={},y=s(`<h1 id="redis基础" tabindex="-1"><a class="header-anchor" href="#redis基础" aria-hidden="true">#</a> Redis基础</h1><h2 id="nosql" tabindex="-1"><a class="header-anchor" href="#nosql" aria-hidden="true">#</a> NoSQL</h2><hr><ul><li>NoSQL最常见的解释是&quot;<code>non-relational</code>&quot;， 很多人也说它是&quot;<em><strong>Not Only SQL</strong></em>&quot;</li><li>NoSQL仅仅是一个概念，泛指<strong>非关系型的数据库</strong></li><li>区别于关系数据库，它们不保证关系数据的ACID特性</li><li>NoSQL是一项全新的数据库革命性运动，提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入</li><li>常见的NoSQL数据库有：<code>Redis</code>、<code>MemCache</code>、<code>MongoDB</code>等</li></ul><h2 id="nosql与sql的差异" tabindex="-1"><a class="header-anchor" href="#nosql与sql的差异" aria-hidden="true">#</a> NoSQL与SQL的差异</h2><hr><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">SQL</th><th style="text-align:center;">NoSQL</th></tr></thead><tbody><tr><td style="text-align:center;">数据结构</td><td style="text-align:center;">结构化</td><td style="text-align:center;">非结构化</td></tr><tr><td style="text-align:center;">数据关联</td><td style="text-align:center;">关联的</td><td style="text-align:center;">无关联的</td></tr><tr><td style="text-align:center;">查询方式</td><td style="text-align:center;">SQL查询</td><td style="text-align:center;">非SQL</td></tr><tr><td style="text-align:center;">事务特性</td><td style="text-align:center;">ACID</td><td style="text-align:center;">BASE</td></tr><tr><td style="text-align:center;">存储方式</td><td style="text-align:center;">磁盘</td><td style="text-align:center;">内存</td></tr><tr><td style="text-align:center;">扩展性</td><td style="text-align:center;">垂直</td><td style="text-align:center;">水平</td></tr><tr><td style="text-align:center;">使用场景</td><td style="text-align:center;">1）数据结构固定 2）相关业务对数据安全性、一致性要求较高</td><td style="text-align:center;">1）数据结构不固定 2）对一致性、安全性要求不高 3）对性能要求</td></tr></tbody></table><h2 id="认识redis" tabindex="-1"><a class="header-anchor" href="#认识redis" aria-hidden="true">#</a> 认识Redis</h2><blockquote><p>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p></blockquote><p><strong>Redis的特征：</strong></p><ul><li>键值（<code>key-value</code>）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h2 id="启动redis" tabindex="-1"><a class="header-anchor" href="#启动redis" aria-hidden="true">#</a> 启动Redis</h2><blockquote><p>Redis的启动方式有很多种，例如：<strong>前台启动</strong>、<strong>后台启动</strong>、<strong>开机自启</strong></p></blockquote><h3 id="前台启动-不推荐" tabindex="-1"><a class="header-anchor" href="#前台启动-不推荐" aria-hidden="true">#</a> 前台启动（不推荐）</h3><hr><blockquote><p><strong>这种启动属于前台启动，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</strong></p></blockquote><ul><li><strong>安装完成后，在任意目录输入<code>redis-server</code>命令即可启动Redis</strong></li></ul><h3 id="后台启动-不推荐" tabindex="-1"><a class="header-anchor" href="#后台启动-不推荐" aria-hidden="true">#</a> 后台启动（不推荐）</h3><hr><blockquote><p><strong>如果要让Redis以后台方式启动，则必须修改Redis配置文件，配置文件所在目录就是之前我们解压的安装包下</strong></p></blockquote><ul><li><p><strong>因为我们要修改配置文件，因此我们需要先将原文件备份一份</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/src/redis-6.2.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> redis.conf redis.conf.bck
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>然后修改<code>redis.conf</code>文件中的一些配置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span>
<span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0
<span class="token comment"># 守护进程，修改为yes后即可后台运行</span>
daemonize <span class="token function">yes</span> 
<span class="token comment"># 密码，设置后访问Redis必须输入密码</span>
requirepass <span class="token number">1325</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Redis其他常用配置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 监听的端口</span>
port <span class="token number">6379</span>
<span class="token comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span>
<span class="token function">dir</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span>
databases <span class="token number">1</span>
<span class="token comment"># 设置redis能够使用的最大内存</span>
maxmemory 512mb
<span class="token comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span>
logfile <span class="token string">&quot;redis.log&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>启动Redis</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入redis安装目录 </span>
<span class="token builtin class-name">cd</span> /usr/local/src/redis-6.2.6
<span class="token comment"># 启动</span>
redis-server redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>停止Redis服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过kill命令直接杀死进程</span>
<span class="token function">kill</span> <span class="token parameter variable">-9</span> redis进程id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span>
<span class="token comment"># 因为之前配置了密码，因此需要通过 -a 来指定密码</span>
redis-cli <span class="token parameter variable">-a</span> <span class="token number">132537</span> <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="开机自启-推荐" tabindex="-1"><a class="header-anchor" href="#开机自启-推荐" aria-hidden="true">#</a> 开机自启（推荐）</h3><ul><li><p><strong>首先，新建一个系统服务文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/systemd/system/redis.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>将以下命令粘贴进去</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>[Unit]
Description=redis-server
After=network.target

[Service]
Type=forking
ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf
PrivateTmp=true

[Install]
WantedBy=multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>然后重载系统服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>现在，我们可以用下面这组命令来操作redis了</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动</span>
systemctl start redis
<span class="token comment"># 停止</span>
systemctl stop redis
<span class="token comment"># 重启</span>
systemctl restart redis
<span class="token comment"># 查看状态</span>
systemctl status redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>执行下面的命令，可以让redis开机自启</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="redis常见命令" tabindex="-1"><a class="header-anchor" href="#redis常见命令" aria-hidden="true">#</a> Redis常见命令</h2>`,24),x={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},S=s('<h3 id="redis数据结构介绍" tabindex="-1"><a class="header-anchor" href="#redis数据结构介绍" aria-hidden="true">#</a> Redis数据结构介绍</h3><blockquote><p><strong>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样</strong></p></blockquote><img src="'+c+`" alt="image-20220524205926164" style="zoom:50%;"><h3 id="通用命令" tabindex="-1"><a class="header-anchor" href="#通用命令" aria-hidden="true">#</a> 通用命令</h3><blockquote><p><strong>通用指令是部分数据类型的，都可以使用的指令，常见的有如下表格所示</strong></p></blockquote><table><thead><tr><th style="text-align:center;">指令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">KEYS</td><td style="text-align:center;">查看符合模板的所有key，不建议在生产环境设备上使用</td></tr><tr><td style="text-align:center;">DEL</td><td style="text-align:center;">删除一个指定的key</td></tr><tr><td style="text-align:center;">EXISTS</td><td style="text-align:center;">判断key是否存在</td></tr><tr><td style="text-align:center;">EXPIRE</td><td style="text-align:center;">给一个key设置有效期，有效期到期时该key会被自动删除</td></tr><tr><td style="text-align:center;">TTL</td><td style="text-align:center;">查看一个KEY的剩余有效期</td></tr></tbody></table><p><strong>可以通过<code>help [command] </code>可以查看一个命令的具体用法！</strong></p><h3 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型" aria-hidden="true">#</a> String类型</h3><blockquote><p><strong>String类型，也就是字符串类型，是Redis中最简单的存储类型。</strong></p></blockquote><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串</li><li><code>int</code>：整数类型，可以做自增、自减操作</li><li><code>float</code>：浮点类型，可以做自增、自减操作</li></ul><blockquote><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过<strong>512m</strong>.</p></blockquote><table><thead><tr><th style="text-align:center;">KEY</th><th style="text-align:center;">VALUE</th></tr></thead><tbody><tr><td style="text-align:center;">msg</td><td style="text-align:center;">hello world</td></tr><tr><td style="text-align:center;">num</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">score</td><td style="text-align:center;">92.5</td></tr></tbody></table><blockquote><p><strong>String的常见命令有如下表格所示</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">SET</td><td style="text-align:center;">添加或者修改已经存在的一个String类型的键值对</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">根据key获取String类型的value</td></tr><tr><td style="text-align:center;">MSET</td><td style="text-align:center;">批量添加多个String类型的键值对</td></tr><tr><td style="text-align:center;">MGET</td><td style="text-align:center;">根据多个key获取多个String类型的value</td></tr><tr><td style="text-align:center;">INCR</td><td style="text-align:center;">让一个整型的key自增1</td></tr><tr><td style="text-align:center;">INCRBY</td><td style="text-align:center;">让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</td></tr><tr><td style="text-align:center;">INCRBYFLOAT</td><td style="text-align:center;">让一个浮点类型的数字自增并指定步长</td></tr><tr><td style="text-align:center;">SETNX</td><td style="text-align:center;">添加一个String类型的键值对，前提是这个key不存在，否则不执行</td></tr><tr><td style="text-align:center;"><strong>SETEX</strong></td><td style="text-align:center;">添加一个String类型的键值对，并且指定有效期</td></tr></tbody></table><blockquote><p><strong>Redis的key允许有多个单词形成层级结构，多个单词之间用” ：“隔开，格式如下：</strong></p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>项目名:业务名:类型:id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 <code>heima</code>，有<code>user</code>和<code>product</code>两种不同类型的数据，我们可以这样定义key：</p><ul><li><strong>user</strong>相关的key：<code>heima:user:1</code></li><li><strong>product</strong>相关的key：<code>heima:product:1</code></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储</p><table><thead><tr><th style="text-align:center;">KEY</th><th style="text-align:center;">VALUE</th></tr></thead><tbody><tr><td style="text-align:center;">heima:user:1</td><td style="text-align:center;">{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td style="text-align:center;">heima:product:1</td><td style="text-align:center;">{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><h3 id="hash类型" tabindex="-1"><a class="header-anchor" href="#hash类型" aria-hidden="true">#</a> Hash类型</h3><blockquote><p><strong>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的<code>HashMap</code>结构。</strong></p></blockquote><ul><li><p><strong>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD</strong></p></li><li><p><strong>Hash的常见命令有：</strong></p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">HSET key field value</td><td style="text-align:center;">添加或者修改hash类型key的field的值</td></tr><tr><td style="text-align:center;">HGET key field</td><td style="text-align:center;">获取一个hash类型key的field的值</td></tr><tr><td style="text-align:center;">HMSET</td><td style="text-align:center;">hmset 和 hset 效果相同 ，4.0之后hmset可以弃用了</td></tr><tr><td style="text-align:center;">HMGET</td><td style="text-align:center;">批量获取多个hash类型key的field的值</td></tr><tr><td style="text-align:center;">HGETALL</td><td style="text-align:center;">获取一个hash类型的key中的所有的field和value</td></tr><tr><td style="text-align:center;">HKEYS</td><td style="text-align:center;">获取一个hash类型的key中的所有的field</td></tr><tr><td style="text-align:center;">HVALS</td><td style="text-align:center;">获取一个hash类型的key中的所有的value</td></tr><tr><td style="text-align:center;">HINCRBY</td><td style="text-align:center;">让一个hash类型key的字段值自增并指定步长</td></tr><tr><td style="text-align:center;">HSETNX</td><td style="text-align:center;">添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</td></tr></tbody></table></li></ul><h3 id="list类型" tabindex="-1"><a class="header-anchor" href="#list类型" aria-hidden="true">#</a> List类型</h3><blockquote><p><strong>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</strong></p></blockquote><p><strong>特征也与<code>LinkedList</code>类似：</strong></p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等.</p><blockquote><p><strong>List的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">LPUSH key element …</td><td style="text-align:center;">向列表左侧插入一个或多个元素</td></tr><tr><td style="text-align:center;">LPOP key</td><td style="text-align:center;">移除并返回列表左侧的第一个元素，没有则返回nil</td></tr><tr><td style="text-align:center;"><strong>RPUSH key element …</strong></td><td style="text-align:center;">向列表右侧插入一个或多个元素</td></tr><tr><td style="text-align:center;">RPOP key</td><td style="text-align:center;">移除并返回列表右侧的第一个元素</td></tr><tr><td style="text-align:center;">LRANGE key star end</td><td style="text-align:center;">返回一段角标范围内的所有元素</td></tr><tr><td style="text-align:center;">BLPOP和BRPOP</td><td style="text-align:center;">与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</td></tr></tbody></table><blockquote><p><strong>思考问题</strong></p></blockquote><ul><li><strong>如何利用List结构模拟一个栈?</strong><ul><li>先进后出，入口和出口在同一边</li></ul></li><li><strong>如何利用List结构模拟一个队列?</strong><ul><li>先进先出，入口和出口在不同边</li></ul></li><li><strong>如何利用List结构模拟一个阻塞队列?</strong><ul><li>入口和出口在不同边</li><li>出队时采用BLPOP或BRPOP</li></ul></li></ul><h3 id="set类型" tabindex="-1"><a class="header-anchor" href="#set类型" aria-hidden="true">#</a> Set类型</h3><blockquote><p><strong>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征</strong></p></blockquote><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><blockquote><p><strong>Set的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">SADD key member …</td><td style="text-align:center;">向set中添加一个或多个元素</td></tr><tr><td style="text-align:center;">SREM key member …</td><td style="text-align:center;">移除set中的指定元素</td></tr><tr><td style="text-align:center;">SCARD key</td><td style="text-align:center;">返回set中元素的个数</td></tr><tr><td style="text-align:center;">SISMEMBER key member</td><td style="text-align:center;">判断一个元素是否存在于set中</td></tr><tr><td style="text-align:center;">SMEMBERS</td><td style="text-align:center;">获取set中的所有元素</td></tr><tr><td style="text-align:center;">SINTER key1 key2 …</td><td style="text-align:center;">求key1与key2的交集</td></tr><tr><td style="text-align:center;">SDIFF key1 key2 …</td><td style="text-align:center;">求key1与key2的差集</td></tr><tr><td style="text-align:center;">SUNION key1 key2 …</td><td style="text-align:center;">求key1和key2的并集</td></tr></tbody></table><blockquote><p><strong>交集、差集、并集图示</strong></p></blockquote><img src="`+d+`" alt="image-20220525112632214" style="zoom:33%;"><h3 id="sortedset类型" tabindex="-1"><a class="header-anchor" href="#sortedset类型" aria-hidden="true">#</a> SortedSet类型</h3><blockquote><p><strong>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</strong></p></blockquote><p><strong>SortedSet具备下列特性：</strong></p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><blockquote><p><strong>SortedSet的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">ZADD key score member</td><td style="text-align:center;">添加一个或多个元素到sorted set ，如果已经存在则更新其score值</td></tr><tr><td style="text-align:center;">ZREM key member</td><td style="text-align:center;">删除sorted set中的一个指定元素</td></tr><tr><td style="text-align:center;">ZSCORE key member</td><td style="text-align:center;">获取sorted set中的指定元素的score值</td></tr><tr><td style="text-align:center;">ZRANK key member</td><td style="text-align:center;">获取sorted set 中的指定元素的排名</td></tr><tr><td style="text-align:center;">ZCARD key</td><td style="text-align:center;">获取sorted set中的元素个数</td></tr><tr><td style="text-align:center;">ZCOUNT key min max</td><td style="text-align:center;">统计score值在给定范围内的所有元素的个数</td></tr><tr><td style="text-align:center;">ZINCRBY key increment member</td><td style="text-align:center;">让sorted set中的指定元素自增，步长为指定的increment值</td></tr><tr><td style="text-align:center;">ZRANGE key min max</td><td style="text-align:center;">按照score排序后，获取指定排名范围内的元素</td></tr><tr><td style="text-align:center;">ZRANGEBYSCORE key min max</td><td style="text-align:center;">按照score排序后，获取指定score范围内的元素</td></tr><tr><td style="text-align:center;">ZDIFF、ZINTER、ZUNION</td><td style="text-align:center;">求差集、交集、并集</td></tr></tbody></table><p><strong>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加<code>REV</code>即可</strong></p><h2 id="redis客户端" tabindex="-1"><a class="header-anchor" href="#redis客户端" aria-hidden="true">#</a> Redis客户端</h2><h3 id="命令行客户端" tabindex="-1"><a class="header-anchor" href="#命令行客户端" aria-hidden="true">#</a> 命令行客户端</h3><ul><li><p><strong>Redis安装完成后就自带了命令行客户端：<code>redis-cli</code>，使用方式如下：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>commonds<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>其中常见的<code>options</code>有：</strong></p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 132537</code>：指定redis的访问密码</li></ul></li><li><p><strong>其中的<code>commonds</code>就是Redis的操作命令，例如：</strong></p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li><li>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</li></ul></li></ul><img src="`+r+`" alt="image-20220524201258092" style="zoom:33%;"><h3 id="java客户端" tabindex="-1"><a class="header-anchor" href="#java客户端" aria-hidden="true">#</a> Java客户端</h3><h4 id="jedis快速入门" tabindex="-1"><a class="header-anchor" href="#jedis快速入门" aria-hidden="true">#</a> Jedis快速入门</h4><hr><blockquote><p>Jedis的官网地址： https://github.com/redis/jedis</p></blockquote><ul><li><p><strong>新建一个Maven工程并引入以下依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入Jedis依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--引入单元测试依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编写测试类并与Redis建立连接</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>

<span class="token annotation punctuation">@BeforeEach</span> <span class="token comment">//被该注解修饰的方法每次执行其他方法前自动执行</span>
<span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取连接</span>
    jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.230.88&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 设置密码</span>
    jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;132537&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 选择库（默认是下标为0的库）</span>
    jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编写一个操作数据的方法（这里以操作String类型为例）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1.往redis中存放一条String类型的数据并获取返回结果</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://www.oz6.cn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.从redis中获取一条数据</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;url = &quot;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>最后不要忘记编写一个释放资源的方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterEach</span> <span class="token comment">//被该注解修饰的方法会在每次执行其他方法后执行</span>
<span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 1.释放资源</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="jedis连接池" tabindex="-1"><a class="header-anchor" href="#jedis连接池" aria-hidden="true">#</a> Jedis连接池</h4><p><strong>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，推荐使用Jedis连接池代替Jedis的直连方式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisConnectionFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">//配置连接池</span>
        <span class="token class-name">JedisPoolConfig</span> jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建连接池对象</span>
        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span><span class="token string">&quot;192.168.230.88&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">&quot;132537&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="springdataredis介绍" tabindex="-1"><a class="header-anchor" href="#springdataredis介绍" aria-hidden="true">#</a> SpringDataRedis介绍</h4><hr><blockquote><p><strong>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做<code>SpringDataRedis</code></strong></p><p><strong>官网地址</strong>：https://spring.io/projects/spring-data-redis</p></blockquote><ul><li>提供了对不同Redis客户端的整合（<code>Lettuce</code>和<code>Jedis</code>）</li><li>提供了<code>RedisTemplate</code>统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><blockquote><p><strong>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</strong></p></blockquote><img src="`+u+`" alt="image-20220525140217446" style="zoom:50%;"><h4 id="springdataredis快速入门" tabindex="-1"><a class="header-anchor" href="#springdataredis快速入门" aria-hidden="true">#</a> SpringDataRedis快速入门</h4><hr><blockquote><p><strong><code>SpringBoot</code>已经提供了对<code>SpringDataRedis</code>的支持，使用非常简单</strong></p></blockquote><ul><li><p><strong>首先新建一个Spring Boot工程</strong></p></li><li><p><strong>然后引入连接池依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--连接池依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编写配置文件<code>application.yml</code>（连接池的配置在实际开发中是根据需求来的）</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.230.88 <span class="token comment">#指定redis所在的host</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token comment">#指定redis的端口</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span>  <span class="token comment">#设置redis密码</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment">#最大连接数</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment">#最大空闲数</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#最小空闲数</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 100ms <span class="token comment">#连接等待时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编写测试类执行测试方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">RedisDemoApplicationTests</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Resource</span>
	<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 1.通过RedisTemplate获取操作String类型的ValueOperations对象</span>
		<span class="token class-name">ValueOperations</span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.插入一条数据</span>
		ops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;blogName&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Vz-Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 3.获取数据</span>
		<span class="token class-name">String</span> blogName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;blogName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;blogName = &quot;</span> <span class="token operator">+</span> blogName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="redisserializer配置" tabindex="-1"><a class="header-anchor" href="#redisserializer配置" aria-hidden="true">#</a> RedisSerializer配置</h4><hr><blockquote><p><strong>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，<code>默认是采用JDK序列化</code>，得到的结果是这样的</strong></p></blockquote><img src="`+k+`" alt="image-20220525170205272" style="zoom:50%;"><p><strong>缺点：</strong></p><ul><li>可读性差</li><li>内存占用较大</li></ul><blockquote><p><strong>那么如何解决以上的问题呢？自定义RedisTemplate序列化的方式来解决。</strong></p></blockquote><ul><li><p><strong>编写一个配置类<code>RedisConfig</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.创建RedisTemplate对象</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.设置连接工厂</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3.创建序列化对象</span>
        <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GenericJackson2JsonRedisSerializer</span> genericJackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4.设置key和hashKey采用String的序列化方式</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 5.设置value和hashValue采用json的序列化方式</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>已经将RedisTemplate的key设置为<code>String序列化</code>，value设置为<code>Json序列化</code>的方式，再来执行方法测试</strong></p><img src="`+m+`" alt="image-20220525170925364" style="zoom:50%;"></li><li><p><strong>由于我们设置的value序列化方式是Json的，因此我们可以直接向redis中插入一个对象</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testSaveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:100&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Vz&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;User = &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+g+'" alt="image-20220525171340322" style="zoom:50%;"><p>尽管Json序列化可以满足我们的需求，但是依旧存在一些问题。</p><p>如上图所示，为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>那么我们如何解决这个问题呢？我们可以通过下文的<code>StringRedisTemplate</code>来解决这个问题。</p></li></ul><h4 id="stringredistemplate" tabindex="-1"><a class="header-anchor" href="#stringredistemplate" aria-hidden="true">#</a> StringRedisTemplate</h4><hr><blockquote><p><strong>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</strong></p></blockquote><img src="'+v+`" alt="image-20220525172001057" style="zoom:50%;"><blockquote><p><strong>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程</strong></p></blockquote><ul><li><p><strong>我们可以直接编写一个测试类使用StringRedisTemplate来执行以下方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">RedisStringTemplateTest</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Resource</span>
	<span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">void</span> <span class="token function">testSaveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
		<span class="token comment">// 1.创建一个Json序列化对象</span>
		<span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.将要存入的对象通过Json序列化对象转换为字符串</span>
		<span class="token class-name">String</span> userJson1 <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Vz&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 3.通过StringRedisTemplate将数据存入redis</span>
		stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:100&quot;</span><span class="token punctuation">,</span>userJson1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 4.通过key取出value</span>
		<span class="token class-name">String</span> userJson2 <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 5.由于取出的值是String类型的Json字符串，因此我们需要通过Json序列化对象来转换为java对象</span>
		<span class="token class-name">User</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>userJson2<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 6.打印结果</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>执行完毕回到Redis的图形化客户端查看结果</strong></p><img src="`+b+'" alt="image-20220525172508234" style="zoom:50%;"></li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><hr><blockquote><p>RedisTemplate的两种序列化实践方案，两种方案各有各的优缺点，可以根据实际情况选择使用。</p></blockquote><p>方案一：</p><ol><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ol><p>方案二：</p><ol><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ol>',92);function f(R,q){const a=e("ExternalLinkIcon");return l(),i("div",null,[y,n("blockquote",null,[n("p",null,[n("a",x,[o("redis官网"),p(a)])])]),S])}const j=t(h,[["render",f],["__file","1.html.vue"]]);export{j as default};
