import{_ as i,r as p,o as t,c as r,b as e,d as a,e as n,a as o}from"./app-9723bb95.js";const m="/home/assets/image-20220518190610445-5528018e.png",l="/home/assets/image-20220721100209875-243d4d4e.png",h="/home/assets/image-20220721100218845-94aa57e9.png",d="/home/assets/image-20220721100228718-cc113ad4.png",c="/home/assets/image-20220721100235314-d4fb7a02.png",g="/home/assets/image-20220721100239957-dfa15888.png",_="/home/assets/image-20220721100244901-99e0ae66.png",B="/home/assets/image-20220721100251322-6986ddc3.png",k="/home/assets/image-20220721100303003-f0f82fb3.png",u="/home/assets/image-20220721100307399-e2beb4f3.png",y="/home/assets/image-20220721100312959-94d65dd8.png",b="/home/assets/image-20220721100318276-b3d38dba.png",f="/home/assets/image-20220721100322384-59a24854.png",x="/home/assets/image-20220721100343303-14f9cfaf.png",z="/home/assets/image-20220721100356364-36dacac0.png",N="/home/assets/image-20220721100402613-2014c017.png",v="/home/assets/image-20220721100410258-00841c0a.png",T={},E=o('<h1 id="其他树结构" tabindex="-1"><a class="header-anchor" href="#其他树结构" aria-hidden="true">#</a> 其他树结构</h1><h2 id="b树" tabindex="-1"><a class="header-anchor" href="#b树" aria-hidden="true">#</a> B树</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>B树，又称多路平衡查找树，B树中所有节点的孩子个数的最大值称为B树的阶，通常用m表示一颗m阶B树或为空树，或为满足如下特性的m叉树：</p><ul><li><p>树中每个结点<strong>至多有m棵子树</strong>，即至多含有m-1个关键字</p></li><li><p>若根节点不是终端结点，则至少有两棵子树</p></li><li><p>除根节点外的所有非叶节点<strong>至少有m/2（取上限）棵子树</strong></p></li><li><p>所有非叶节点的结构如下：</p><p>​ <img src="'+m+'" alt="image-20220518190610445" style="zoom:80%;"></p><p>​ k为关键字，递增顺序，p为指向子树根的指针，n为节点中关键字的个数</p></li><li><p>所有叶节点出现在同一层次，并且不带信息。代表查找失败的位置。</p></li></ul><p>B树的所有节点的平衡因子都为0</p><p>实例--五阶B树</p><p><img src="'+l+'" alt="image-20220721100209875"></p><h3 id="b树高度" tabindex="-1"><a class="header-anchor" href="#b树高度" aria-hidden="true">#</a> B树高度</h3><p>首先明确：B树高度不包括最后叶节点的一层</p><p><img src="'+h+'" alt="image-20220721100218845"></p><h3 id="b树查找" tabindex="-1"><a class="header-anchor" href="#b树查找" aria-hidden="true">#</a> B树查找</h3><p>在B树上进行查找与二叉查找树很相似，只是每个结点都是多个关键字的有序表，在每个结点上所做的不是两路分支决定，而是根据该结点的子树所做的多路分支决定。</p><p>B树的查找包含两个基本操作:①在B树中找结点;②在结点内找关键字。由于B树常存储在磁盘上，因此前一个查找操作是在磁盘上进行的，而后一个查找操作是在内存中进行的，即在找到目标结点后，先将结点信息读入内存，然后在结点内采用顺序查找法或折半查找法。</p><p>在B树上查找到某个结点后，先在有序表中进行查找，若找到则查找成功，否则按照对应的指针信息到所指的子树中去查找（例如，在图7.4中查找关键字42，首先从根结点开始，根结点只有一个关键字，且42&gt;22，若存在，必在关键字22的右边子树上，右孩子结点有两个关键字，而36&lt;42&lt;45，则若存在，必在36和45中间的子树上，在该子结点中查到关键字42，查找成功)。查找到叶结点时（对应指针为空指针)，则说明树中没有对应的关键字，查找失败。</p><h3 id="b树插入" tabindex="-1"><a class="header-anchor" href="#b树插入" aria-hidden="true">#</a> B树插入</h3><p><em>注意m/2均要取上界</em></p><p>与二叉查找树的插入操作相比，B树的插入操作要复杂得多。在二叉查找树中，仅需查找到需插入的终端结点的位置。但是，在B树中找到插入的位置后，并不能简单地将其添加到终端结点中，因为此时可能会导致整棵树不再满足B树定义中的要求。将关键字key插入B树的过程如下:</p><ul><li>定位。利用前述的B树查找算法，找出插入该关键字的最低层中的某个非叶结点（在B树中查找key时，会找到表示查找失败的叶结点，这样就确定了最底层非叶结点的插入位置。注意:插入位置一定是最低层中的某个非叶结点)。</li><li>插入。在B树中，每个非失败结点的关键字个数都在区间[m/2-1, m-1]内。插入后的结点关键字个数小于m，可以直接插入;插入后检查被插入结点内关键字的个数，当插入后的结点关键字个数大于m-1时，必须对结点进行<strong>分裂</strong>。</li></ul><p>分裂的方法是:取一个新结点，在插入 key后的原结点，<strong>从中间位置(m/2)将其中的关键字分为两部分</strong>，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，中间位置(m/2)的结点插入原结点的父结点。若此时导致其父结点的关键字个数也超过了上限，则继续进行这种分裂操作，直至这个过程传到根结点为止，进而导致B树高度增1。</p><p>对于m = 3的B树，所有结点中最多有m-1= 2个关键字，若某结点中已有两个关键字，则结点已满。插入一个关键字60后，结点内的关键字个数超过了m-1，此时必须进行结点分裂。</p><p><img src="'+d+'" alt="image-20220721100228718"></p><h3 id="b树删除" tabindex="-1"><a class="header-anchor" href="#b树删除" aria-hidden="true">#</a> B树删除</h3><p>B树中的删除操作与插入操作类似，但要稍微复杂一些，即要使得删除后的结点中的关键字个数≥m/2-1，因此将涉及结点的“合并”问题。</p><p>当被删关键字k不在终端结点（最低层非叶结点〉中时，可以用k的**前驱（或后继）**k&#39;来替代k，然后在相应的结点中删除k，关键字k必定落在某个终端结点中，则转换成了被删关键字在终端结点中的情形。在下图中的4阶B树中，删除关键字80，用其前驱78替代，然后在终端结点中删除78。因此只需讨论删除终端结点中关键字的情形。（<strong>最后总会转换成终端节点的删除</strong>）</p><p><img src="'+c+'" alt="image-20220721100235314"></p><p>当被删关键字在终端结点（最低层非叶结点〉中时，有下列三种情况:</p><p>1)直接删除关键字。若被删除关键字所在结点的关键字个数≥lm/2]，表明删除该关键字后仍满足B树的定义，则直接删去该关键字。</p><p>2）兄弟够借。若被删除关键字所在结点删除前的关键字个数=m/2-1，且与此结点相邻的右（或左）兄弟结点的关键字个数≥m/2，则需要调整该结点、右(或左）兄弟结点及其双亲结点(父子换位法)，以达到新的平衡。在图中删除4阶B树的关键字65，右兄弟关键字个数 ≥m/2=2，将71取代原65的位置，将74调整到71的位置。</p><p><img src="'+g+'" alt="image-20220721100239957"></p><p>3）兄弟不够借。若被删除关键字所在结点删除前的关键字个数=m/2-1，且此时与该结点相邻的左、右兄弟结点的关键字个数均=m/2-1，则将关键字删除后与左（或右)兄弟结点及双亲结点中的关键字进行合并。在图中删除4阶B树的关键字5，它及其右兄弟结点的关键字个数=m/2-1=1，故在5删除后将60合并到65结点中。</p><p><img src="'+_+'" alt="image-20220721100244901"></p><p>在合并过程中，双亲结点中的关键字个数会减1。若其双亲结点是根结点且关键字个数减少至0（根结点关键字个数为1时，有2棵子树)，则直接将根结点删除，合并后的新结点成为根;若双亲结点不是根结点，且关键字个数减少到m/2-2，则又要与它自己的兄弟结点进行调整或合并操作，并重复上述步骤，直至符合B树的要求为止。</p><h2 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树" aria-hidden="true">#</a> B+树</h2><p><em>m/2均取上界</em></p><h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h3><p>B+树是应数据库所需而出现的一种B树的变形树</p><p>一棵m阶的B+树需满足下列条件:</p><ul><li>每个分支结点最多有m棵子树（孩子结点)。</li><li>非叶根结点至少有两棵子树，其他每个分支结点至少有m/2棵子树。</li><li><strong>结点的子树个数与关键字个数相等</strong>。</li><li><strong>所有叶结点包含全部关键字及指向相应记录的指针</strong>，叶结点中将关键字按大小顺序排列，并且<strong>相邻叶结点按大小顺序相互链接起来</strong>。</li><li>所有<strong>分支结点（可视为索引的索引</strong>）中仅包含它的各个子结点（即下一级的索引块）中关键字的最大值及指向其子结点的指针。</li></ul><p>m阶的B+树与m阶的B树的主要差异如下:</p><ol><li>在B+树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树;而在B树中，具有n个关键字的结点含有n+1棵子树。</li><li>在B+树中，每个结点（非根内部结点）的关键字个数n的范围m/2≤n≤m(根结点:1≤n≤m)。在B树中，每个结点（非根内部结点)的关键字个数n的范围是m/2-1≤n≤m-1(根结点: 1≤n≤m- 1)。</li><li>在B+树中，叶结点包含信息，所有非叶结点仅起索引作用，非叶结点中的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。</li><li>在B+树中，<strong>叶结点包含了全部关键字</strong>，即在非叶结点中出现的关键字也会出现在叶结点中;而在B树中，叶结点包含的关键字和其他结点包含的关键字是<strong>不重复</strong>的。</li></ol><h3 id="b-树查找" tabindex="-1"><a class="header-anchor" href="#b-树查找" aria-hidden="true">#</a> B+树查找</h3><p>图为一棵4阶B+树。可以看出，分支结点的某个关键字是其子树中最大关键字的副本。通常在B+树中有两个头指针:一个指向根结点，另一个指向关键字最小的叶结点。因此，可以对B+树进行两种查找运算:一种是从最小关键字开始的顺序查找，另一种是从根结点开始的多路查找。</p><p><img src="'+B+'" alt="image-20220721100251322"></p><p>B+树的查找、插入和删除操作和B树的基本类似。只是在查找过程中，非叶结点上的关键字值等于给定值时并不终止，而是继续向下查找，直到叶结点上的该关键字为止。所以，在 B+树中查找时，无论查找成功与否，每次查找都是一条从根结点到叶结点的路径。</p><h2 id="b-树应用" tabindex="-1"><a class="header-anchor" href="#b-树应用" aria-hidden="true">#</a> B-树应用</h2><p>B树大量应用在数据库（索引结构）和文件系统当中。</p><p>它的设计思想是，将相关数据尽量集中在一起，以便一次读取多个数据，减少硬盘操作次数。B树算法减少定位记录时所经历的中间过程，从而加快存取速度。</p><p>假定一个节点可以容纳100个值，那么3层的B树可以容纳100万个数据，如果换成二叉查找树，则需要20层！假定操作系统一次读取一个节点，并且根节点保留在内存中，那么B树在100万个数据中查找目标值，只需要读取两次硬盘。</p><p><img src="'+k+'" alt="image-20220721100303003"></p><p><img src="'+u+'" alt="image-20220721100307399"></p><h2 id="_2-3-4树" tabindex="-1"><a class="header-anchor" href="#_2-3-4树" aria-hidden="true">#</a> 2-3-4树</h2><p>2-3-4树是<strong>阶数</strong>为4的B树，B树，全名BalanceTree，平衡树。这种结构主要用来做查找。</p><p>由于2-3-4树是一颗阶数为4的B树，所以它会存在以下节点：</p><ul><li><p>二节点</p><ul><li>一个key和左右两个链接；其中key大于左链接、小于右链接</li></ul></li><li><p>三节点</p><ul><li>包含两个key和三个链接（两个key分别称为key1和key2，key1小于key2）</li><li>1、2、3三个子链接（子链接1的key小于根结点key1、子链接2的key大于根结点key1且小于根结点key2、子链接3的key大于根结点key2）</li></ul></li><li><p>四节点</p><ul><li>包含三个key和四个子链接（三个key分别为key1、key2、key3且从小到大排列）</li><li>1、2、3、4三个子链接（子链接1的key小于根结点key1、子链接2的key大于根结点key1且小于根结点key2、子链接3的key大于根结点key2且小于根结点key3、子链接4的key大于根结点key3）</li></ul></li><li><p>上述的节点计数指子链接的数量，而非节点包含的key的数量</p></li></ul><p><img src="'+y+'" alt="image-20220721100312959"></p><h2 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>红黑树是对概念模型2-3-4树的一种实现，由于直接进行不同节点间的转化会造成较大的开销，所以选择以二叉树为基础，在二叉树的属性中加入一个<strong>颜色属性</strong>来表示2-3-4树中不同的节点。</p><p>2-3-4树中的2节点对应着红黑树中的黑色节点，而2-3-4树中的非2节点是以<strong>红节点+黑节点</strong>的方式存在，红节点的意义是与黑色父节点结合，表达着2-3-4树中的3，4节点。</p><p>转换情况：</p><img src="'+b+'" alt="image-20220721100318276" style="zoom:80%;"><img src="'+f+'" alt="image-20220721100322384" style="zoom:80%;"><img src="'+x+'" alt="image-20220721100343303" style="zoom:80%;"><p>具体转换实例</p><img src="'+z+'" alt="image-20220721100356364" style="zoom:80%;"><img src="'+N+'" alt="image-20220721100402613" style="zoom:80%;"><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h3><p>红黑树（Red Black Tree）是一种自平衡的二叉查找树。除了符合二叉查找树的基本特性外，它还具有下列附加特性：</p><p>1.每个节点是红色或黑色。</p><p>2.根节点永远是黑色。</p><p>3.每个叶子节点都是黑色的空节点（Null节点）。</p><p>4.若一个节点是红色的，那么他的子节点必须是黑色的。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</p><p>5.从任一节点到该节点的所有路径都包含相同数目的黑色节点。</p><p>这些约束强制了红黑树的关键性质: 从根节点到叶子节点的最长的可能路径不多于最短的可能路径的两倍长。</p><p>一些说明：</p><p>约束4和5，保证了红黑树的大致平衡：根到叶子的所有路径中，最长路径不会超过最短路径的2倍。</p><p>使得红黑树在最坏的情况下，也能有O(log2N)的查找效率</p><p>黑色高度为3时，最短路径：黑色→ 黑色 → 黑色，最长路径：黑色→ 红色 → 黑色→ 红色 → 黑色</p><p>最短路径的长度为2（不算Nil的叶子节点），最长路径为4</p><p>举例</p><img src="'+v+'" alt="image-20220721100410258" style="zoom:80%;"><p>删除，插入什么的就不记录了，需要用到旋转，合并，拆分......太难了- _ -</p>',83),V={href:"https://zhuanlan.zhihu.com/p/273829162",target:"_blank",rel:"noopener noreferrer"},L=e("h3",{id:"应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#应用","aria-hidden":"true"},"#"),a(" 应用")],-1),S=e("p",null,"Java中，TreeMap、TreeSet都使用红黑树作为底层数据结构",-1),C=e("p",null,"JDK1.8开始，HashMap也引入了红黑树：当冲突的链表长度超过8时，自动转为红黑树",-1),I=e("p",null,"Linux底层的CFS进程调度算法中，vruntime使用红黑树进行存储。",-1),J=e("p",null,"多路复用技术的Epoll，其核心结构是红黑树 + 双向链表。",-1);function M(D,F){const s=p("ExternalLinkIcon");return t(),r("div",null,[E,e("p",null,[e("a",V,[a("这个人讲的比较基础清晰"),n(s)])]),L,S,C,I,J])}const K=i(T,[["render",M],["__file","other_tree.html.vue"]]);export{K as default};
