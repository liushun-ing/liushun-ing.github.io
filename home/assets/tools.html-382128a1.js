import{_ as t,r as o,o as i,c,b as e,d as n,e as s,a as l}from"./app-79248646.js";const r="/home/assets/exampe-6d92e0c8.png",p="/home/assets/golangconfig-5469ae86.png",d="/home/assets/debug-b3023b76.png",u={},g=e("h2",{id:"go-tools",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go-tools","aria-hidden":"true"},"#"),n(" Go Tools")],-1),m=e("p",null,"go编写项目的一些有用的工具。",-1),v=e("h2",{id:"gorgeous",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gorgeous","aria-hidden":"true"},"#"),n(" gorgeous")],-1),h={href:"https://github.com/fsgo/go_fmt",target:"_blank",rel:"noopener noreferrer"},b=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">install</span> github.com/fsgo/go_fmt/cmd/gorgeous@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后对代码进行格式化</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gorgeous ./<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="golangci-lint" tabindex="-1"><a class="header-anchor" href="#golangci-lint" aria-hidden="true">#</a> golangci-lint</h2>`,4),k={href:"https://github.com/golangci/golangci-lint",target:"_blank",rel:"noopener noreferrer"},_=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">install</span> github.com/golangci/golangci-lint/cmd/golangci-lint@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意他安装的时候有版本对应问题，不能用低版本go安装的golangci-lint，去检查高版本的项目。所以推荐使用gvm来管理多个go版本。</p><p>使用：</p><p>创建<code>.golangci.yaml</code>配置文件</p><p>样例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">run</span><span class="token punctuation">:</span>
  <span class="token key atrule">go</span><span class="token punctuation">:</span> <span class="token string">&#39;1.23.4&#39;</span>
<span class="token key atrule">linters</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> thelper
    <span class="token punctuation">-</span> gofumpt
    <span class="token punctuation">-</span> tparallel
    <span class="token punctuation">-</span> unconvert
    <span class="token punctuation">-</span> wastedassign
    <span class="token punctuation">-</span> tagliatelle

<span class="token key atrule">linters-settings</span><span class="token punctuation">:</span>
  <span class="token key atrule">gofumpt</span><span class="token punctuation">:</span>
    <span class="token comment"># Module path which contains the source code being formatted.</span>
    <span class="token comment"># Default: &quot;&quot;</span>
    <span class="token key atrule">module-path</span><span class="token punctuation">:</span> github.com/liushunkkk/integrated_exporter
    <span class="token comment"># Choose whether to use the extra rules.</span>
    <span class="token comment"># Default: false</span>
    <span class="token key atrule">extra-rules</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment">#  staticcheck:</span>
<span class="token comment">#    checks: [&quot;-SA5008&quot;] # 忽略 tag 检查</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后检查</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>golangci-lint run <span class="token parameter variable">--fix</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="delve" tabindex="-1"><a class="header-anchor" href="#delve" aria-hidden="true">#</a> delve</h2>`,9),f={href:"https://github.com/go-delve/delve",target:"_blank",rel:"noopener noreferrer"},x=l(`<p>场景：你本地有一个项目，然后远程服务上，你想在本地goland中调试远程服务器上跑的情况，就可以使用dlv</p><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">install</span> github.com/go-delve/delve/cmd/dlv@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>远程服务器跑一个程序，注意这个程序编译的时候不能使用优化，不然可能本地代码和服务器跑的不一样，会导致打断点啥的对应不上。</p><p>也就是编译的时候要设置gcflags：<code>go build -gcflags=&quot;all=-N -l&quot; .</code></p><p>然后使用dlv启动程序</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dlv <span class="token parameter variable">--listen</span><span class="token operator">=</span>:2345 <span class="token parameter variable">--headless</span><span class="token operator">=</span>true --api-version<span class="token operator">=</span><span class="token number">2</span> --accept-multiclient <span class="token builtin class-name">exec</span> xxx -- <span class="token parameter variable">-a</span><span class="token operator">=</span>a <span class="token parameter variable">-b</span><span class="token operator">=</span>b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+r+'" alt=""></p><p>运行成功的话，就会有日志打印，他在监听2345端口，等待连接。</p><blockquote><p>注意：dlv程序要么等待连接者断开，要么就只能使用kill -9 pid杀死</p></blockquote><p>然后这是goland就可以去连接了。注意goland需要新建的是go remote配置。</p><img src="'+p+'" alt="screenshot2024-12-20 17.03.40" style="zoom:33%;"><p>配置好后，启动goland程序，就可以打断点进行远程调试了。</p><img src="'+d+'" style="zoom:33%;">',14);function y(q,N){const a=o("ExternalLinkIcon");return i(),c("div",null,[g,m,v,e("p",null,[e("a",h,[n("代码格式化"),s(a)])]),b,e("p",null,[e("a",k,[n("静态检查"),s(a)])]),_,e("p",null,[e("a",f,[n("代码远程调试"),s(a)])]),x])}const w=t(u,[["render",y],["__file","tools.html.vue"]]);export{w as default};
