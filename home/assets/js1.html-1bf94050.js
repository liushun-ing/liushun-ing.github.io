import{_ as n,o as s,c as a,a as t}from"./app-19500e8e.js";const p={},e=t(`<h1 id="js小知识" tabindex="-1"><a class="header-anchor" href="#js小知识" aria-hidden="true">#</a> js小知识</h1><h2 id="_1、拼接数组" tabindex="-1"><a class="header-anchor" href="#_1、拼接数组" aria-hidden="true">#</a> 1、拼接数组</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、替换对象的键名称" tabindex="-1"><a class="header-anchor" href="#_2、替换对象的键名称" aria-hidden="true">#</a> 2、替换对象的键名称</h2><p>将对象数组中的id替换为new_id</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        <span class="token string-property property">&quot;new_id&quot;</span><span class="token operator">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        <span class="token string-property property">&quot;new_name&quot;</span><span class="token operator">:</span> item<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、常用math库" tabindex="-1"><a class="header-anchor" href="#_3、常用math库" aria-hidden="true">#</a> 3、常用math库</h2><h3 id="_3-1-math-round" tabindex="-1"><a class="header-anchor" href="#_3-1-math-round" aria-hidden="true">#</a> 3.1 math.round</h3><p>四舍五入，注意负数的四舍五入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.2</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">16</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-math-ceil" tabindex="-1"><a class="header-anchor" href="#_3-2-math-ceil" aria-hidden="true">#</a> 3.2 Math.ceil</h3><p>向上取整，小数部分直接舍去，正数整数部分加一，负数整数部分不变</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">16.5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">16</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">14.4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">14</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">16.2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-math-floor" tabindex="-1"><a class="header-anchor" href="#_3-3-math-floor" aria-hidden="true">#</a> 3.3 Math.floor</h3><p>向下取整，小数部分直接不要，正数整数部分不变，负数整数部分加一</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、slice操作数组" tabindex="-1"><a class="header-anchor" href="#_4、slice操作数组" aria-hidden="true">#</a> 4、slice操作数组</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除从index开始的number个元素</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> number<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将从index开始的number个元素替换为object</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在index开始的位置添加元素object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、将一个对象按键赋值给另一个对象" tabindex="-1"><a class="header-anchor" href="#_5、将一个对象按键赋值给另一个对象" aria-hidden="true">#</a> 5、将一个对象按键赋值给另一个对象</h2><p>只保留已有的键</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;20&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;30&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;4&quot;</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment">//obj打印结果为如下：</span>
<span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;30&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、filter函数" tabindex="-1"><a class="header-anchor" href="#_6、filter函数" aria-hidden="true">#</a> 6、filter函数</h2><p>filter()方法会创建一个新数组，原数组的每个元素传入回调函数中，回调函数中有return返回值，若返回值为true，这个元素保存到新数组中；若返回值为false，则该元素不保存到新数组中；原数组不发生改变。</p><p>使用filter函数去除数组的重复值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;strawberry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pear&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;strawberry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   　　<span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>
　　<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// item是必选的，index和self是可选的</span>
<span class="token comment">// apple,strawberry,banana,pear,orange</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、时间" tabindex="-1"><a class="header-anchor" href="#_7、时间" aria-hidden="true">#</a> 7、时间</h2><p>Date() 返回当日的日期和时间。</p><p>getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。</p><p>getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。</p><p>getMonth() 从 Date 对象返回月份 (0 ~ 11)。</p><p>getFullYear() 从 Date 对象以四位数字返回年份。</p><p>getYear() 请使用 getFullYear() 方法代替。</p><p>getHours() 返回 Date 对象的小时 (0 ~ 23)。</p><p>getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。</p><p>getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。</p><p>getTime() 返回 1970 年 1 月 1 日至今的毫秒数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当前时间戳</span>
<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;yyyy-MM-dd HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//或者yyyy-MM-dd，特定时间的时间戳</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、js过滤对象数组的属性" tabindex="-1"><a class="header-anchor" href="#_8、js过滤对象数组的属性" aria-hidden="true">#</a> 8、js过滤对象数组的属性</h2><p>一个对象数组，保留对象的某几个属性，但是不改变数组元素个数</p><p>利用数组的遍历，构建新对象并依次插入新数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">handleSelectionChange</span><span class="token punctuation">(</span><span class="token parameter">selection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> newList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> selection<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        tempObj<span class="token punctuation">.</span>invoiceCode <span class="token operator">=</span> selection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fpdm<span class="token punctuation">;</span>
        tempObj<span class="token punctuation">.</span>invoiceNum <span class="token operator">=</span> selection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fphm<span class="token punctuation">;</span>
        tempObj<span class="token punctuation">.</span>validTax <span class="token operator">=</span> selection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>se<span class="token punctuation">;</span>
        newList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>oldList <span class="token operator">=</span> newList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、对象字面量相互访问" tabindex="-1"><a class="header-anchor" href="#_9、对象字面量相互访问" aria-hidden="true">#</a> 9、对象字面量相互访问</h2><p>这个与js执行环境有关</p><ul><li>执行环境的类型有两种：全局(window)和局部(每一个函数), 没有其他类c语言中的块级作用域.</li><li>访问权限：内围环境具有外围环境数据的访问权限,外围环境却无法访问内围环境的数据</li><li>数据的归属：使用var声明的变量会自动添加到最近的环境中, 不使用var声明的变量会默认成为全局属性.</li><li>数据的查找：数据查找跟数据归属一样遵循&quot;就进原则&quot;, 会先从最近的环境中查找, 找不到再向外一层查找, 直到最外层.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正确形式</span>
<span class="token keyword">var</span> promotePostNoticeTemplate <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noticeTitle</span><span class="token operator">:</span> <span class="token string">&#39;荣誉通知&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">noticeContent</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setPostTitle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>noticeContent <span class="token operator">=</span> <span class="token string">&#39;恭喜您，您的帖子-&#39;</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">&#39;-已被选入中华楹联库。&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 错误形式</span>
<span class="token keyword">var</span> promotePostNoticeTemplate <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noticeTitle</span><span class="token operator">:</span> <span class="token string">&#39;荣誉通知&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">noticeContent</span><span class="token operator">:</span> <span class="token string">&#39;恭喜您，您的帖子-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>noticeTitle <span class="token operator">+</span> <span class="token string">&#39;-已被选入中华楹联库。&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 这时，对象还没有创建，this为空</span>
<span class="token keyword">var</span> promotePostNoticeTemplate <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noticeTitle</span><span class="token operator">:</span> <span class="token string">&#39;荣誉通知&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">noticeContent</span><span class="token operator">:</span> <span class="token string">&#39;恭喜您，您的帖子-&#39;</span> <span class="token operator">+</span> noticeTitle <span class="token operator">+</span> <span class="token string">&#39;-已被选入中华楹联库。&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 它会从window(假设window是最近环境)上查找firstName这个属性, 而 window.firstName 是不存在的. </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、替换-n为-br" tabindex="-1"><a class="header-anchor" href="#_10、替换-n为-br" aria-hidden="true">#</a> 10、替换\\n为&lt; br &gt;</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//替换所有的换行符</span>
string <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span>
string <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//替换所有的空格（中文空格、英文空格都会被替换）</span>
string <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;nbsp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、将markdown文本转换为纯文本" tabindex="-1"><a class="header-anchor" href="#_11、将markdown文本转换为纯文本" aria-hidden="true">#</a> 11、将markdown文本转换为纯文本</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// render为markdown文本</span>
<span class="token comment">// vue的markdown编辑器这样就行了</span>
<span class="token keyword">let</span> text <span class="token operator">=</span> render<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;\\/?[^&gt;]*&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 更多</span>
<span class="token comment">/* 移除HTML标签代码 */</span>
<span class="token keyword">function</span> <span class="token function">removeHTMLTag</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\n)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\t)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\r)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;\\/?[^&gt;]*&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 标签</span>
    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 转意符换成普通字符</span>
<span class="token keyword">function</span> <span class="token function">escape2Html</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
     <span class="token keyword">var</span> arrEntities<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string-property property">&#39;lt&#39;</span><span class="token operator">:</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;gt&#39;</span><span class="token operator">:</span><span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;nbsp&#39;</span><span class="token operator">:</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;amp&#39;</span><span class="token operator">:</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;quot&#39;</span><span class="token operator">:</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
     <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;(lt|gt|nbsp|amp|quot);</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> arrEntities<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、浏览器存储" tabindex="-1"><a class="header-anchor" href="#_12、浏览器存储" aria-hidden="true">#</a> 12、浏览器存储</h2><p>window.sessionStorage（会话存储）：暂时储存，浏览器关闭之后会清除</p><p>window.localStorage （本地存储）：本地储存，浏览器关闭之后依旧不会清除，只能人为删除</p><p>存储的是一个字符串，不能存储对象，否则存储对象时，就会是[pbject, object]，不会是对象本身，需要用JSON.stringify()格式化为对象字符串形式，取出后在解析</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","js1.html.vue"]]);export{r as default};
