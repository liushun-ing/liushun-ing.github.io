import{_ as e,r as o,o as c,c as i,b as n,d as s,e as t,a as p}from"./app-944d1410.js";const u="/home/assets/2gas-49a38408.png",l="/home/assets/image-20240908150008869-becd0619.png",r="/home/assets/block-fcdf07cf.png",k={},d=n("h1",{id:"gas-fee",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gas-fee","aria-hidden":"true"},"#"),s(" Gas Fee")],-1),v=n("h2",{id:"账号预热问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#账号预热问题","aria-hidden":"true"},"#"),s(" 账号预热问题")],-1),m=n("p",null,"该问题出现在 bsc 中发起一个合约交易，合约内部会给系统地址转账，该交易以 bundle 的形式发送，但是给 builder 的贿赂额很小的时候，会发现交易很难上链。",-1),b=n("blockquote",null,[n("p",null,"答：这是因为账号预热需要额外消耗 gas ，对于一个不存在的账户或者空账户而言，如果需要给该账户中转账，是需要额外支付 gas 费的，对应上面的问题，由于每个区块执行后会将系统地址的 balance 清空，所以系统地址对于每一个区块开始执行时，都是一个空账户，都需要预热，该合约交易如果放在块头执行，由于他给系统地址转账了，所以需要多消耗 gas，对于 builder 而言，价值量就更高，但是如果该交易不是在块头，他的 gas 消耗就会变少，应该他之前的交易一般都会有 gas 消耗，而 gas 将会转入系统地址中，所以系统地址就不是一个空账户了，对于 builder 而言，他的价值量就变低了。"),n("p",null,"所以，如果没有其他 bundle 来竞争，那么该 bundle 就会放在块头，价值量也更高，这也就是为什么该 bundle 很难上链的原因，他只能放在块头，这个时候价值量才高。")],-1),g=n("p",null,"先来验证：",-1),f={href:"https://bscscan.com/tx/0xf7bb720411ba4e20830db18de089144bf7d10c6e476840924718fb5ddfd313ea",target:"_blank",rel:"noopener noreferrer"},y=p('<p><img src="'+u+`" alt="screenshot2024-09-08 14.18.43"></p><p>接下来深入bsc源码分析：</p><p>在合约内部，使用 transfer 转账时，其实是使用到了 call 操作码。我们来看 call 操作码的源码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gasCall</span><span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">,</span> contract <span class="token operator">*</span>Contract<span class="token punctuation">,</span> stack <span class="token operator">*</span>Stack<span class="token punctuation">,</span> mem <span class="token operator">*</span>Memory<span class="token punctuation">,</span> memorySize <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		gas            <span class="token builtin">uint64</span>
		transfersValue <span class="token operator">=</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		address        <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bytes20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">if</span> evm<span class="token punctuation">.</span>chainRules<span class="token punctuation">.</span>IsEIP158 <span class="token punctuation">{</span>
		<span class="token keyword">if</span> transfersValue <span class="token operator">&amp;&amp;</span> evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			gas <span class="token operator">+=</span> params<span class="token punctuation">.</span>CallNewAccountGas <span class="token comment">// 25000</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		gas <span class="token operator">+=</span> params<span class="token punctuation">.</span>CallNewAccountGas
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> transfersValue <span class="token punctuation">{</span>
		gas <span class="token operator">+=</span> params<span class="token punctuation">.</span>CallValueTransferGas <span class="token comment">// 9000</span>
	<span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到当账户不存在，或者账户为空时，需要额外支付 <code>params.CallNewAccountGas</code>,而这个值就是 25000。</p><p>账户为空的条件如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Empty returns whether the state object is either non-existent</span>
<span class="token comment">// or empty according to the EIP161 specification (balance = nonce = code = 0)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">Empty</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	so <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">getStateObject</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">return</span> so <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> so<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// empty returns whether the account is considered empty.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Nonce <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Balance<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>CodeHash<span class="token punctuation">,</span> types<span class="token punctuation">.</span>EmptyCodeHash<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为系统账户是没有转出交易的，所以 nonce 一直都为 0，这也说明了如果是首条交易，如果他给系统账户转钱，他是需要支付 25000gas 的。</p><p><strong>和上面的现象一样。这里需要注意：只有给系统地址转账才有账号预热问题，虽然，交易的 gas 消耗最终也是打到系统地址，这也会激活账户，但是这不算做交易发起者的消耗。通过源码也可以论证这一点，<code>gas += params.CallNewAccountGas // 25000</code>这一行代码只有在 call 操作码的函数中有。</strong></p><blockquote><p>在以太坊智能合约中，执行转账操作（发送以太币）时，使用的是以下两种操作码之一：</p><ol><li><p><strong><code>CALL</code> 操作码</strong>： <code>CALL</code> 是一种通用的操作码，用于合约之间的任意调用，包括发送以太币、调用其他合约函数等。它的使用非常广泛，灵活性较高。 <strong>操作码</strong>：<code>0xF1</code></p><p>转账的基本语法形式：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code>recipient<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> amount<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方式虽然可以用来转账，但由于它是通用的调用方式，并不是专门为转账设计的，因此潜在的安全性问题会更多。开发者必须额外注意 <code>CALL</code> 返回值的处理，以防止潜在的攻击（例如重入攻击）。</p></li><li><p><strong><code>TRANSFER</code> 函数（封装的安全性较高的转账方法）</strong>： 在 Solidity 中，<code>transfer</code> 函数是一个封装好的方法，底层同样使用 <code>CALL</code> 操作码实现。它会自动限制 <code>gas</code> 消耗在 2300 gas 以内，用于简单的以太币转账，避免复杂操作以增加安全性：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code>recipient<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然 <code>transfer</code> 函数在 Solidity 中使用较多，但由于它限制了 <code>gas</code>，在某些高 <code>gas</code> 消耗的环境中（比如合约地址拥有 fallback 函数），可能会失败。</p></li><li><p><strong><code>SEND</code> 函数（更简单的转账方法）</strong>： <code>send</code> 函数也是基于 <code>CALL</code> 操作码实现的，但和 <code>transfer</code> 不同，它不会抛出异常，而是返回 <code>true</code> 或 <code>false</code> 来表示转账是否成功：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token builtin">bool</span> success <span class="token operator">=</span> recipient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>总结：</p><ul><li>在 Solidity 及以太坊虚拟机（EVM）中，合约内部的转账最终都是通过 <strong><code>CALL</code> 操作码</strong> 来实现的，即操作码 <code>0xF1</code>。</li><li><code>TRANSFER</code> 和 <code>SEND</code> 是 Solidity 提供的封装，底层也是基于 <code>CALL</code> 操作码。</li></ul></blockquote><h2 id="交易执行-gas-计算" tabindex="-1"><a class="header-anchor" href="#交易执行-gas-计算" aria-hidden="true">#</a> 交易执行 gas 计算</h2><p>接下来，我们来看一下一条交易执行时，他的 gas 是如果计算和统计的。源码是 bsc</p><p>执行一条交易，一般调用的都是下面这个函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// ApplyMessage computes the new state by applying the given message</span>
<span class="token comment">// against the old state within the environment.</span>
<span class="token comment">//</span>
<span class="token comment">// ApplyMessage returns the bytes returned by any EVM execution (if it took place),</span>
<span class="token comment">// the gas used (which includes gas refunds) and an error if it failed. An error always</span>
<span class="token comment">// indicates a core error meaning that the message would always fail for that particular</span>
<span class="token comment">// state and would never be accepted within a block.</span>
<span class="token keyword">func</span> <span class="token function">ApplyMessage</span><span class="token punctuation">(</span>evm <span class="token operator">*</span>vm<span class="token punctuation">.</span>EVM<span class="token punctuation">,</span> msg <span class="token operator">*</span>Message<span class="token punctuation">,</span> gp <span class="token operator">*</span>GasPool<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ExecutionResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">NewStateTransition</span><span class="token punctuation">(</span>evm<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> gp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">TransitionDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他的主要逻辑是通过 TransitionDb 实现</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>st <span class="token operator">*</span>StateTransition<span class="token punctuation">)</span> <span class="token function">TransitionDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ExecutionResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// First check this message satisfies all consensus rules before</span>
	<span class="token comment">// applying the message. The rules include these clauses</span>
	<span class="token comment">//</span>
	<span class="token comment">// 1. the nonce of the message caller is correct</span>
	<span class="token comment">// 2. caller has enough balance to cover transaction fee(gaslimit * gasprice)</span>
	<span class="token comment">// 3. the amount of gas required is available in the block</span>
	<span class="token comment">// 4. the purchased gas is enough to cover intrinsic usage</span>
	<span class="token comment">// 5. there is no overflow when calculating intrinsic gas</span>
	<span class="token comment">// 6. caller has enough balance to cover asset transfer for **topmost** call</span>

	<span class="token comment">// Check clauses 1-3, buy gas if everything is correct</span>
  <span class="token comment">// 第一部分，检查 balance 够不够gas，并将 balance 转换为 gas，保存在 st 中</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> st<span class="token punctuation">.</span><span class="token function">preCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// Check clauses 4-5, subtract intrinsic gas if everything is correct</span>
  <span class="token comment">// 第二部分，统计基本的 gas 消耗，并减去基本 gas</span>
	gas<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">IntrinsicGas</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>AccessList<span class="token punctuation">,</span> contractCreation<span class="token punctuation">,</span> rules<span class="token punctuation">.</span>IsHomestead<span class="token punctuation">,</span> rules<span class="token punctuation">.</span>IsIstanbul<span class="token punctuation">,</span> rules<span class="token punctuation">.</span>IsShanghai<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> st<span class="token punctuation">.</span>gasRemaining <span class="token operator">&lt;</span> gas <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%w: have %d, want %d&quot;</span><span class="token punctuation">,</span> ErrIntrinsicGas<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">,</span> gas<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	st<span class="token punctuation">.</span>gasRemaining <span class="token operator">-=</span> gas


  <span class="token comment">// 第三部分，交易执行，如果是合约相关，会进一步消耗 gas</span>
	<span class="token keyword">if</span> contractCreation <span class="token punctuation">{</span>
		ret<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">,</span> vmerr <span class="token operator">=</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// Increment the nonce for the next transaction</span>
		st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">SetNonce</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>From<span class="token punctuation">,</span> st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		ret<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">,</span> vmerr <span class="token operator">=</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

  <span class="token comment">// 第四部分，返还 gas</span>
	<span class="token keyword">var</span> gasRefund <span class="token builtin">uint64</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>rules<span class="token punctuation">.</span>IsLondon <span class="token punctuation">{</span>
		<span class="token comment">// Before EIP-3529: refunds were capped to gasUsed / 2</span>
		gasRefund <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">refundGas</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>RefundQuotient<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// After EIP-3529: refunds are capped to gasUsed / 5</span>
		gasRefund <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">refundGas</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>RefundQuotientEIP3529<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
  
  <span class="token comment">// 第五部分，分配利润</span>
	effectiveTip <span class="token operator">:=</span> msg<span class="token punctuation">.</span>GasPrice
	<span class="token keyword">if</span> rules<span class="token punctuation">.</span>IsLondon <span class="token punctuation">{</span>
		effectiveTip <span class="token operator">=</span> cmath<span class="token punctuation">.</span><span class="token function">BigMin</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>GasTipCap<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">,</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>BaseFee<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	effectiveTipU256<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> uint256<span class="token punctuation">.</span><span class="token function">FromBig</span><span class="token punctuation">(</span>effectiveTip<span class="token punctuation">)</span>

	fee <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetUint64</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">gasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fee<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>fee<span class="token punctuation">,</span> effectiveTipU256<span class="token punctuation">)</span>
	<span class="token comment">// consensus engine is parlia</span>
	<span class="token keyword">if</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Parlia <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">,</span> fee<span class="token punctuation">)</span>
		<span class="token comment">// add extra blob fee reward</span>
		<span class="token keyword">if</span> rules<span class="token punctuation">.</span>IsCancun <span class="token punctuation">{</span>
			blobFee <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetUint64</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">blobGasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			blobFee<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>blobFee<span class="token punctuation">,</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>BlobBaseFee<span class="token punctuation">)</span>
			blobFeeU256<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> uint256<span class="token punctuation">.</span><span class="token function">FromBig</span><span class="token punctuation">(</span>blobFee<span class="token punctuation">)</span>
			st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">,</span> blobFeeU256<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> fee<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>ExecutionResult<span class="token punctuation">{</span>
		UsedGas<span class="token punctuation">:</span>     st<span class="token punctuation">.</span><span class="token function">gasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		RefundedGas<span class="token punctuation">:</span> gasRefund<span class="token punctuation">,</span>
		Err<span class="token punctuation">:</span>         vmerr<span class="token punctuation">,</span>
		ReturnData<span class="token punctuation">:</span>  ret<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码主要有五部分构成。</p><p>第一部分，主要的逻辑是用 balance 去购买 gaslimit * gasprice 的 gas，用作合约执行时的可用 gas。</p><p>第二部分，计算基本 gas，这个可以看他的源码，从下面的源码中可以看出，普通转账交易的油费 21000 就是从这扣掉的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// IntrinsicGas computes the &#39;intrinsic gas&#39; for a message with the given data.</span>
<span class="token keyword">func</span> <span class="token function">IntrinsicGas</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> accessList types<span class="token punctuation">.</span>AccessList<span class="token punctuation">,</span> isContractCreation <span class="token builtin">bool</span><span class="token punctuation">,</span> isHomestead<span class="token punctuation">,</span> isEIP2028<span class="token punctuation">,</span> isEIP3860 <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Set the starting gas for the raw transaction</span>
	<span class="token keyword">var</span> gas <span class="token builtin">uint64</span>
	<span class="token keyword">if</span> isContractCreation <span class="token operator">&amp;&amp;</span> isHomestead <span class="token punctuation">{</span>
		gas <span class="token operator">=</span> params<span class="token punctuation">.</span>TxGasContractCreation <span class="token comment">// 53000</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		gas <span class="token operator">=</span> params<span class="token punctuation">.</span>TxGas <span class="token comment">// 21000</span>
	<span class="token punctuation">}</span>
	dataLen <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// Bump the required gas by the amount of transactional data</span>
	<span class="token keyword">if</span> dataLen <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token comment">// 各种计算 gas</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> accessList <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		gas <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>accessList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> params<span class="token punctuation">.</span>TxAccessListAddressGas
		gas <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>accessList<span class="token punctuation">.</span><span class="token function">StorageKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> params<span class="token punctuation">.</span>TxAccessListStorageKeyGas
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> gas<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三部分执行交易，从下面精简的源码来看，如果是普通的转账，就直接对余额进行加减，就会返回，不会再次扣手续费了，但是如果是需要去执行合约，就需要去到虚拟机中执行，那里面会根据操作码一一扣除 gas。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Call executes the contract associated with the addr with the given input as</span>
<span class="token comment">// parameters. It also handles any necessary value transfer required and takes</span>
<span class="token comment">// the necessary steps to create accounts and reverses the state in case of an</span>
<span class="token comment">// execution error or failed value transfer.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">,</span> value <span class="token operator">*</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">CreateAccount</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Transfer</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> caller<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

	<span class="token keyword">if</span> isPrecompile <span class="token punctuation">{</span>
		ret<span class="token punctuation">,</span> gas<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">RunPrecompiledContract</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> input<span class="token punctuation">,</span> gas<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// Initialise a new contract and set the code that is to be used by the EVM.</span>
		<span class="token comment">// The contract is a scoped environment for this execution context only.</span>
		code <span class="token operator">:=</span> evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">GetCode</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			ret<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// gas is unchanged</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			addrCopy <span class="token operator">:=</span> addr
			<span class="token comment">// If the account has no code, we can abort here</span>
			<span class="token comment">// The depth-check is already done, and precompiles handled above</span>
			contract <span class="token operator">:=</span> <span class="token function">NewContract</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> <span class="token function">AccountRef</span><span class="token punctuation">(</span>addrCopy<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> gas<span class="token punctuation">)</span>
			contract<span class="token punctuation">.</span><span class="token function">SetCallCode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addrCopy<span class="token punctuation">,</span> evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">GetCodeHash</span><span class="token punctuation">(</span>addrCopy<span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>
			ret<span class="token punctuation">,</span> err <span class="token operator">=</span> evm<span class="token punctuation">.</span>interpreter<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>contract<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
			gas <span class="token operator">=</span> contract<span class="token punctuation">.</span>Gas
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">,</span> gas<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四部分，gasRefund，在这里会将没用完的 gas 返回给调用者，并且如果调用者在合约里删除一些数据，释放了存储空间，他会得到 gas 奖励，这部分也会打给调用者。这个机制的存在是为了激励开发者在智能合约执行中合理管理状态，避免不必要的数据占用区块链存储。可以看到，数据的存储其实都是在 stateDb 中进行的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>st <span class="token operator">*</span>StateTransition<span class="token punctuation">)</span> <span class="token function">refundGas</span><span class="token punctuation">(</span>refundQuotient <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
	<span class="token comment">// Apply refund counter, capped to a refund quotient</span>
	refund <span class="token operator">:=</span> st<span class="token punctuation">.</span><span class="token function">gasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> refundQuotient
	<span class="token keyword">if</span> refund <span class="token operator">&gt;</span> st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">GetRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		refund <span class="token operator">=</span> st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">GetRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	st<span class="token punctuation">.</span>gasRemaining <span class="token operator">+=</span> refund

	<span class="token comment">// Return ETH for remaining gas, exchanged at the original rate.</span>
	remaining <span class="token operator">:=</span> uint256<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">)</span>
	remaining <span class="token operator">=</span> remaining<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>remaining<span class="token punctuation">,</span> uint256<span class="token punctuation">.</span><span class="token function">MustFromBig</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>GasPrice<span class="token punctuation">)</span><span class="token punctuation">)</span>
	st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>From<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span>

	<span class="token comment">// Also return remaining gas to the block gas counter so it is</span>
	<span class="token comment">// available for the next transaction.</span>
	st<span class="token punctuation">.</span>gp<span class="token punctuation">.</span><span class="token function">AddGas</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>gasRemaining<span class="token punctuation">)</span>

	<span class="token keyword">return</span> refund
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第五部分，就是对消耗的 gas 的分配，不同的共识机制分配规则不一样。下面就去看看出块奖励分配是如何进行的</p><h2 id="出块奖励分配" tabindex="-1"><a class="header-anchor" href="#出块奖励分配" aria-hidden="true">#</a> 出块奖励分配</h2>`,26),h={href:"https://docs.bnbchain.org/bnb-smart-chain/validator/mev/overview/#what-is-more",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// consensus engine is parlia</span>
<span class="token keyword">if</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Parlia <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">,</span> fee<span class="token punctuation">)</span>
  <span class="token comment">// add extra blob fee reward</span>
  <span class="token keyword">if</span> rules<span class="token punctuation">.</span>IsCancun <span class="token punctuation">{</span>
    blobFee <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetUint64</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">blobGasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    blobFee<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>blobFee<span class="token punctuation">,</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>BlobBaseFee<span class="token punctuation">)</span>
    blobFeeU256<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> uint256<span class="token punctuation">.</span><span class="token function">FromBig</span><span class="token punctuation">(</span>blobFee<span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">,</span> blobFeeU256<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> fee<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在以太坊的源码中，他根本都么有 <code>consensus.SystemAddress</code>，因为这种模式是 Parlia 独有的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>NoBaseFee <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>GasTipCap<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
	<span class="token comment">// Skip fee payment when NoBaseFee is set and the fee fields</span>
	<span class="token comment">// are 0. This avoids a negative effectiveTip being applied to</span>
	<span class="token comment">// the coinbase when simulating calls.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	fee <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetUint64</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">gasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fee<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>fee<span class="token punctuation">,</span> effectiveTipU256<span class="token punctuation">)</span>
	st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> fee<span class="token punctuation">,</span> tracing<span class="token punctuation">.</span>BalanceIncreaseRewardTransactionFee<span class="token punctuation">)</span>

	<span class="token comment">// add the coinbase to the witness iff the fee is greater than 0</span>
	<span class="token keyword">if</span> rules<span class="token punctuation">.</span>IsEIP4762 <span class="token operator">&amp;&amp;</span> fee<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>AccessEvents<span class="token punctuation">.</span><span class="token function">BalanceGas</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这也可以看出，以太坊上的出块奖励（也就是交易的 gas 费）其实都是出块者拿了，而在PBS 模式下，以太坊的块由 builder 打包，validator 只是验证工作，所以出块奖励最终是 builder 的。</p><p>但是在币安链就不一样了，币安链上的块是由 validator 打包的。所以出块奖励其实是 validator 拿了。所以，币安链提出了自己的利润分配方式。</p><img src="`+l+`" alt="image-20240908150008869" style="zoom:50%;"><p>也就是 Proposer 接受了 builder 的unsealed block 后，需要给 builder 支付一笔费用。所以，币安链的实现中多了一个 bid 的逻辑。</p><p>接下来，我们来看一下 bsc-builder 的基本实现；</p><p>==首先看一下 miner 的实现：==</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>eth Backend<span class="token punctuation">,</span> config <span class="token operator">*</span>Config<span class="token punctuation">,</span> chainConfig <span class="token operator">*</span>params<span class="token punctuation">.</span>ChainConfig<span class="token punctuation">,</span> mux <span class="token operator">*</span>event<span class="token punctuation">.</span>TypeMux<span class="token punctuation">,</span> engine consensus<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> isLocalBlock <span class="token keyword">func</span><span class="token punctuation">(</span>header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Miner <span class="token punctuation">{</span>
	miner <span class="token operator">:=</span> <span class="token operator">&amp;</span>Miner<span class="token punctuation">{</span>
		mux<span class="token punctuation">:</span>     mux<span class="token punctuation">,</span>
		eth<span class="token punctuation">:</span>     eth<span class="token punctuation">,</span>
		engine<span class="token punctuation">:</span>  engine<span class="token punctuation">,</span>
		exitCh<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		startCh<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		stopCh<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		worker<span class="token punctuation">:</span>  <span class="token function">newWorker</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> chainConfig<span class="token punctuation">,</span> engine<span class="token punctuation">,</span> eth<span class="token punctuation">,</span> mux<span class="token punctuation">,</span> isLocalBlock<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	miner<span class="token punctuation">.</span>bidSimulator <span class="token operator">=</span> <span class="token function">newBidSimulator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">.</span>Mev<span class="token punctuation">,</span> config<span class="token punctuation">.</span>DelayLeftOver<span class="token punctuation">,</span> config<span class="token punctuation">.</span>GasPrice<span class="token punctuation">,</span> eth<span class="token punctuation">.</span><span class="token function">BlockChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chainConfig<span class="token punctuation">,</span> engine<span class="token punctuation">,</span> miner<span class="token punctuation">.</span>worker<span class="token punctuation">)</span>
	miner<span class="token punctuation">.</span>worker<span class="token punctuation">.</span><span class="token function">setBestBidFetcher</span><span class="token punctuation">(</span>miner<span class="token punctuation">.</span>bidSimulator<span class="token punctuation">)</span>

	miner<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> miner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> miner
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>miner</code>包含<code>bidSimulator</code>和<code>worker</code>对象。</p><p>==<strong>先来看 bidSimulator。</strong>==</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// builder info (warning: only keep status in memory!)</span>
buildersMu sync<span class="token punctuation">.</span>RWMutex
builders   <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>builderclient<span class="token punctuation">.</span>Client

<span class="token comment">// channels</span>
simBidCh <span class="token keyword">chan</span> <span class="token operator">*</span>simBidReq
newBidCh <span class="token keyword">chan</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Bid

pendingMu sync<span class="token punctuation">.</span>RWMutex
pending   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// blockNumber -&gt; builder -&gt; bidHash -&gt; struct{}</span>

bestBidMu sync<span class="token punctuation">.</span>RWMutex
bestBid   <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token operator">*</span>BidRuntime <span class="token comment">// prevBlockHash -&gt; bidRuntime</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最主要的就是这几个属性。其中 builders 主要用来记录当前有哪些 builder 会给 proposal 发 bid block。只有在builders 里面的 builder 发的 bid block 才是有效的。miner 暴露了接口，builder 可以发 rpc 请求像 proposal 注册自己，并发 sendBid 请求发送 bid block。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// sendBid checks if the bid is already exists or if the builder sends too many bids,</span>
<span class="token comment">// if yes, return error, if not, add bid into newBid chan waiting for judge profit.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>bidSimulator<span class="token punctuation">)</span> <span class="token function">sendBid</span><span class="token punctuation">(</span><span class="token boolean">_</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> bid <span class="token operator">*</span>types<span class="token punctuation">.</span>Bid<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> b<span class="token punctuation">.</span>newBidCh <span class="token operator">&lt;-</span> bid<span class="token punctuation">:</span>
		b<span class="token punctuation">.</span><span class="token function">AddPending</span><span class="token punctuation">(</span>bid<span class="token punctuation">.</span>BlockNumber<span class="token punctuation">,</span> bid<span class="token punctuation">.</span>Builder<span class="token punctuation">,</span> bid<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
		<span class="token keyword">return</span> types<span class="token punctuation">.</span>ErrMevBusy
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当有builder 发送了 Bid 过来时，会先调用 miner.SendBid 函数，然后完成各种校验（builder 存不存在，pending 容量够不够等）后，会调用该函数，将其加入到 newBidCh 管道中。</p><p>值得注意的是，builder 传过来的 BidArgs 类型，而 proposal 需要的是 Bid 类型，所以在 miner.SendBid中会调用<code>bid, err := bidArgs.ToBid(builder, signer)</code>完成转换。可以看到，该函数内部就会将 builder 发送的想要的 Pay 转换为一条交易添加到最后，所以我们可以看到在每个块的倒数第二条交易，都是一条给 builder 的转账。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BidArgs<span class="token punctuation">)</span> <span class="token function">ToBid</span><span class="token punctuation">(</span>builder common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> signer Signer<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Bid<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	txs<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span><span class="token function">DecodeTxs</span><span class="token punctuation">(</span>signer<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>UnRevertible<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expect NonRevertible no more than %d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	unRevertibleHashes <span class="token operator">:=</span> mapset<span class="token punctuation">.</span>NewThreadUnsafeSetWithSize<span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>UnRevertible<span class="token punctuation">)</span><span class="token punctuation">)</span>
	unRevertibleHashes<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>UnRevertible<span class="token operator">...</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>PayBidTx<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> payBidTx <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Transaction<span class="token punctuation">)</span>
		err <span class="token operator">=</span> payBidTx<span class="token punctuation">.</span><span class="token function">UnmarshalBinary</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>PayBidTx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>

		txs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>txs<span class="token punctuation">,</span> payBidTx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	bid <span class="token operator">:=</span> <span class="token operator">&amp;</span>Bid<span class="token punctuation">{</span>
		Builder<span class="token punctuation">:</span>      builder<span class="token punctuation">,</span>
		BlockNumber<span class="token punctuation">:</span>  b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>BlockNumber<span class="token punctuation">,</span>
		ParentHash<span class="token punctuation">:</span>   b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>ParentHash<span class="token punctuation">,</span>
		Txs<span class="token punctuation">:</span>          txs<span class="token punctuation">,</span>
		UnRevertible<span class="token punctuation">:</span> unRevertibleHashes<span class="token punctuation">,</span>
		GasUsed<span class="token punctuation">:</span>      b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>GasUsed <span class="token operator">+</span> b<span class="token punctuation">.</span>PayBidTxGasUsed<span class="token punctuation">,</span>
		GasFee<span class="token punctuation">:</span>       b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>GasFee<span class="token punctuation">,</span>
		BuilderFee<span class="token punctuation">:</span>   b<span class="token punctuation">.</span>RawBid<span class="token punctuation">.</span>BuilderFee<span class="token punctuation">,</span>
		rawBid<span class="token punctuation">:</span>       <span class="token operator">*</span>b<span class="token punctuation">.</span>RawBid<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> bid<span class="token punctuation">.</span>BuilderFee <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		bid<span class="token punctuation">.</span>BuilderFee <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> bid<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 newBidLoop 函数中，会从<code>newBid := &lt;-b.newBidCh</code>读取通道，然后封装为<code>BidRuntime</code>对象后调用内部的 commit 函数，通过如下操作<code>b.simBidCh &lt;- &amp;simBidReq{interruptCh: interruptCh, bid: bidRuntime}</code>加入到 simBidCh 管道中</p><p>在 mainLoop函数中，会读取<code>req := &lt;-b.simBidCh</code>管道，并调用<code>b.simBid(req.interruptCh, req.bid)</code>函数</p><p>simBid 函数内部，会使用 bidWorker去提交打包收到的 Bid 中的交易，看看是否能执行成功，值得注意的是下面这段代码，这里就是给 builder 的分润，但其实，可以从现在的块上可以看出，验证者给 builder 的分润已经没有了，倒数第二笔交易 value 全是 0 了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// commit payBidTx at the end of the block</span>
bidRuntime<span class="token punctuation">.</span>env<span class="token punctuation">.</span>gasPool<span class="token punctuation">.</span><span class="token function">AddGas</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>PayBidTxGasLimit<span class="token punctuation">)</span> <span class="token comment">// 25000</span>
err <span class="token operator">=</span> bidRuntime<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> b<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> payBidTx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// 这里就是 proposal 给 builder 返利的交易。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全部执行成功后，就会得到一个模拟成功的bidRuntime，然后会与当前的 bestBid 比较，留下最好的 bid。然后也会通过 ReportIssue给 builder 报告执行的信息。</p><p>到此 bidSimulator 的任务基本就完成了。</p><p>==然后就是 worker 工作了==</p><p>worker 在commitWork函数中，会调用<code>bestBid := w.bidFetcher.GetBestBid(bestWork.header.ParentHash)</code>拿到当前价值最高的 bid。并将其封装成一个bestWork， 然后调用<code>w.commit(bestWork, w.fullTaskHook, true, start)</code>提交。</p><p>在该函数内部，会调用<code>block, receipts, err := w.engine.FinalizeAndAssemble(w.chain, types.CopyHeader(env.header), env.state, env.txs, nil, env.receipts, nil)</code>函数，将交易真正打包成一个区块，得到 block 对象。<code>w.engine</code>就是共识层算法的实现。币安链上就是 Parlia 对象。</p><p>在这个函数内，会调用<code>err := p.distributeIncoming(p.val, state, header, cx, &amp;txs, &amp;receipts, nil, &amp;header.GasUsed, true)</code>，这个函数就是对区块奖励的分配逻辑。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// distributeIncoming distributes system incoming of the block</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Parlia<span class="token punctuation">)</span> <span class="token function">distributeIncoming</span><span class="token punctuation">(</span>val common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> state <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> chain core<span class="token punctuation">.</span>ChainContext<span class="token punctuation">,</span>
	txs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> receipts <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Receipt<span class="token punctuation">,</span> receivedTxs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> usedGas <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> mining <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	coinbase <span class="token operator">:=</span> header<span class="token punctuation">.</span>Coinbase
	balance <span class="token operator">:=</span> state<span class="token punctuation">.</span><span class="token function">GetBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">)</span>
	<span class="token keyword">if</span> balance<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>U2560<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	state<span class="token punctuation">.</span><span class="token function">SetBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">,</span> common<span class="token punctuation">.</span>U2560<span class="token punctuation">)</span>
	state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>coinbase<span class="token punctuation">,</span> balance<span class="token punctuation">)</span>

	doDistributeSysReward <span class="token operator">:=</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>chainConfig<span class="token punctuation">.</span><span class="token function">IsKepler</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
		state<span class="token punctuation">.</span><span class="token function">GetBalance</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span><span class="token function">HexToAddress</span><span class="token punctuation">(</span>systemcontracts<span class="token punctuation">.</span>SystemRewardContract<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>maxSystemBalance<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
	<span class="token keyword">if</span> doDistributeSysReward <span class="token punctuation">{</span>
		rewards <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>uint256<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>
		rewards <span class="token operator">=</span> rewards<span class="token punctuation">.</span><span class="token function">Rsh</span><span class="token punctuation">(</span>balance<span class="token punctuation">,</span> systemRewardPercent<span class="token punctuation">)</span>
		<span class="token keyword">if</span> rewards<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>U2560<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">distributeToSystem</span><span class="token punctuation">(</span>rewards<span class="token punctuation">.</span><span class="token function">ToBig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> header<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> txs<span class="token punctuation">,</span> receipts<span class="token punctuation">,</span> receivedTxs<span class="token punctuation">,</span> usedGas<span class="token punctuation">,</span> mining<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;distribute to system reward pool&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;block hash&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">,</span> rewards<span class="token punctuation">)</span>
			balance <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>balance<span class="token punctuation">,</span> rewards<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;distribute to validator contract&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;block hash&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">,</span> balance<span class="token punctuation">)</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">distributeToValidator</span><span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">ToBig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> state<span class="token punctuation">,</span> header<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> txs<span class="token punctuation">,</span> receipts<span class="token punctuation">,</span> receivedTxs<span class="token punctuation">,</span> usedGas<span class="token punctuation">,</span> mining<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到首先会将系统地址的余额转给验证者，然后将余额清掉。接下来，会将利益分配给验证者<code>distributeToValidator</code>和系统<code>distributeToSystem</code>。这里面都是通过发起一笔调用合约的交易实现的，所以可以看到在区块的最后，也就是给 builder 转账的那笔交易后面，会再多一笔或两笔调用合约的交易。</p><p>单独分配一笔给系统的前提是，系统合约的余额小于 100bnb，目前已经超出了，所以不会再有这笔交易了。</p><p>所以接下来，主要分析<code>distributeToValidator</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Parlia<span class="token punctuation">)</span> <span class="token function">distributeToSystem</span><span class="token punctuation">(</span>amount <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> state <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> chain core<span class="token punctuation">.</span>ChainContext<span class="token punctuation">,</span>
	txs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> receipts <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Receipt<span class="token punctuation">,</span> receivedTxs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> usedGas <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> mining <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// get system message</span>
	msg <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">getSystemMessage</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> common<span class="token punctuation">.</span><span class="token function">HexToAddress</span><span class="token punctuation">(</span>systemcontracts<span class="token punctuation">.</span>SystemRewardContract<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
	<span class="token comment">// apply message</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">applyTransaction</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> state<span class="token punctuation">,</span> header<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> txs<span class="token punctuation">,</span> receipts<span class="token punctuation">,</span> receivedTxs<span class="token punctuation">,</span> usedGas<span class="token punctuation">,</span> mining<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// distributeToValidator deposits validator reward to validator contract</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Parlia<span class="token punctuation">)</span> <span class="token function">distributeToValidator</span><span class="token punctuation">(</span>amount <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> validator common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span>
	state <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> chain core<span class="token punctuation">.</span>ChainContext<span class="token punctuation">,</span>
	txs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> receipts <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Receipt<span class="token punctuation">,</span> receivedTxs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> usedGas <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> mining <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// method</span>
	method <span class="token operator">:=</span> <span class="token string">&quot;deposit&quot;</span>

	<span class="token comment">// get packed data</span>
	data<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>validatorSetABI<span class="token punctuation">.</span><span class="token function">Pack</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>
		validator<span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to pack tx for deposit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// get system message</span>
	msg <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">getSystemMessage</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> common<span class="token punctuation">.</span><span class="token function">HexToAddress</span><span class="token punctuation">(</span>systemcontracts<span class="token punctuation">.</span>ValidatorContract<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
	<span class="token comment">// apply message</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">applyTransaction</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> state<span class="token punctuation">,</span> header<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> txs<span class="token punctuation">,</span> receipts<span class="token punctuation">,</span> receivedTxs<span class="token punctuation">,</span> usedGas<span class="token punctuation">,</span> mining<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>系统合约</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ValidatorContract          = &quot;0x0000000000000000000000000000000000001000&quot;
SystemRewardContract       = &quot;0x0000000000000000000000000000000000001002&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，最终的利润分配就是通过调用 ValidatorContract 的 deposit 函数实现的。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">/**
 * @dev Collect all fee of transactions from the current block and deposit it to the contract
 *
 * @param valAddr The validator address who produced the current block
 */</span>
<span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token builtin">address</span> valAddr<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> onlyCoinbase onlyInit noEmptyDeposit onlyZeroGasPrice <span class="token punctuation">{</span>
    <span class="token builtin">uint256</span> value <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token builtin">uint256</span> index <span class="token operator">=</span> currentValidatorSetMap<span class="token punctuation">[</span>valAddr<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSystemRewardIncluded <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        systemRewardRatio <span class="token operator">=</span> INIT_SYSTEM_REWARD_RATIO<span class="token punctuation">;</span>
        burnRatio <span class="token operator">=</span> INIT_BURN_RATIO<span class="token punctuation">;</span>
        isSystemRewardIncluded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> systemRewardRatio <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint256</span> toSystemReward <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>systemRewardRatio<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>BLOCK_FEES_RATIO_SCALE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>toSystemReward <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>SYSTEM_REWARD_ADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>toSystemReward<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">emit</span> <span class="token function">systemTransfer</span><span class="token punctuation">(</span>toSystemReward<span class="token punctuation">)</span><span class="token punctuation">;</span>

            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>toSystemReward<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> burnRatio <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint256</span> toBurn <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>burnRatio<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>BLOCK_FEES_RATIO_SCALE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>toBurn <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>BURN_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>toBurn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">emit</span> <span class="token function">feeBurned</span><span class="token punctuation">(</span>toBurn<span class="token punctuation">)</span><span class="token punctuation">;</span>

            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>toBurn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Validator <span class="token keyword">storage</span> validator <span class="token operator">=</span> currentValidatorSet<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>validator<span class="token punctuation">.</span>jailed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">emit</span> <span class="token function">deprecatedDeposit</span><span class="token punctuation">(</span>valAddr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            totalInComing <span class="token operator">=</span> totalInComing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            validator<span class="token punctuation">.</span>incoming <span class="token operator">=</span> validator<span class="token punctuation">.</span>incoming<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">emit</span> <span class="token function">validatorDeposit</span><span class="token punctuation">(</span>valAddr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// get incoming from deprecated validator;</span>
        <span class="token keyword">emit</span> <span class="token function">deprecatedDeposit</span><span class="token punctuation">(</span>valAddr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，该函数内部就是将钱分成了两笔，一笔打给了系统合约<code>SystemRewardContract</code>，然后另一笔打给了黑洞地址<code>BURN_ADDRESS</code>，也就是0x 00...00dead。</p><p>并最终在该合约中，往对应的 validator 代币上增加了这笔利润<code>totalInComing = totalInComing.add(value);</code>，由此，我们也可以看到，validator 最终的利润其实是以验证者合约的代币形式保存的。</p><p>==以上都是针对 validator 而言，如果收到 builder 发送的 BidArgs，然后打包成区块，并最终分配利润。下面我们来看，buidler 是如何构建 BidArgs，然后是怎么发给验证者的。==</p><p>builder 的工作主要是依赖 Worker 完成。worker 中最重要的两个对象就是下面这两个</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// MEV</span>
bidder      <span class="token operator">*</span>Bidder
bundleCache <span class="token operator">*</span>BundleCache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们先去看 Bidder 对象。</p><p>Bidder 的重要属性如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>validatorsMu sync<span class="token punctuation">.</span>RWMutex
validators   <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>validator <span class="token comment">// address -&gt; validator</span>

bestWorksMu sync<span class="token punctuation">.</span>RWMutex
bestWorks   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span><span class="token operator">*</span>environment

newBidCh <span class="token keyword">chan</span> <span class="token operator">*</span>environment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Bidder 中维护了 validators，Bidder 在创建时，会读取配置中的 validators 信息，然后注册。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bidder<span class="token punctuation">)</span> <span class="token function">register</span><span class="token punctuation">(</span>cfg ValidatorConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b<span class="token punctuation">.</span>validatorsMu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> b<span class="token punctuation">.</span>validatorsMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	cl<span class="token punctuation">,</span> err <span class="token operator">:=</span> validatorclient<span class="token punctuation">.</span><span class="token function">DialOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> rpc<span class="token punctuation">.</span><span class="token function">WithHTTPClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Bidder: failed to dial validator&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	params<span class="token punctuation">,</span> err <span class="token operator">:=</span> cl<span class="token punctuation">.</span><span class="token function">MevParams</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Bidder: failed to get mev params&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	b<span class="token punctuation">.</span>validators<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>Address<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>validator<span class="token punctuation">{</span>
		Client<span class="token punctuation">:</span>                cl<span class="token punctuation">,</span>
		BidSimulationLeftOver<span class="token punctuation">:</span> params<span class="token punctuation">.</span>BidSimulationLeftOver<span class="token punctuation">,</span>
		GasCeil<span class="token punctuation">:</span>               params<span class="token punctuation">.</span>GasCeil<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册其实就是创建与 validator 节点的链接，然后请求validator 的配置信息。</p><p>接下来重要的就是 newBidCh 了，worker 在 mainLoop 函数中会从该通道中不断取数据，然后调用 setBestWork 设置最优 Bid，他会判断是否可以发送给 validator，如果可以，就会触发 timer 通道事件。</p><p>worker也是在 commitWork 函数中调用<code>w.bidder.newWork(work)</code>，向该管道写入数据（==worker 会在 commitWork 函数中，根据设置选择性的执行 builder 逻辑还是 validator 逻辑==）</p><p>然后就是 bestWorks 了。</p><p>在 mainLoop 中，会监听 timer 通道事件，在这个事件触发时，会获取当前的 bestWork，然后调用 bid 函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Bidder<span class="token punctuation">)</span> <span class="token function">bid</span><span class="token punctuation">(</span>work <span class="token operator">*</span>environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// construct bid from work</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">var</span> txs <span class="token punctuation">[</span><span class="token punctuation">]</span>hexutil<span class="token punctuation">.</span>Bytes
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> work<span class="token punctuation">.</span>txs <span class="token punctuation">{</span>
			<span class="token keyword">var</span> txBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
			<span class="token keyword">var</span> err <span class="token builtin">error</span>
			txBytes<span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">MarshalBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Bidder: fail to marshal tx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx&quot;</span><span class="token punctuation">,</span> tx<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			txs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>txs<span class="token punctuation">,</span> txBytes<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		bid <span class="token operator">:=</span> types<span class="token punctuation">.</span>RawBid<span class="token punctuation">{</span>
			BlockNumber<span class="token punctuation">:</span>  parent<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
			ParentHash<span class="token punctuation">:</span>   parent<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			GasUsed<span class="token punctuation">:</span>      work<span class="token punctuation">.</span>header<span class="token punctuation">.</span>GasUsed<span class="token punctuation">,</span>
			GasFee<span class="token punctuation">:</span>       work<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">GetBalance</span><span class="token punctuation">(</span>consensus<span class="token punctuation">.</span>SystemAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToBig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			Txs<span class="token punctuation">:</span>          txs<span class="token punctuation">,</span>
			UnRevertible<span class="token punctuation">:</span> work<span class="token punctuation">.</span>UnRevertible<span class="token punctuation">,</span>
			<span class="token comment">// TODO: decide builderFee according to realtime traffic and validator commission</span>
		<span class="token punctuation">}</span>

		signature<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">signBid</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bid<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Bidder: fail to sign bid&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		bidArgs <span class="token operator">=</span> types<span class="token punctuation">.</span>BidArgs<span class="token punctuation">{</span>
			RawBid<span class="token punctuation">:</span>    <span class="token operator">&amp;</span>bid<span class="token punctuation">,</span>
			Signature<span class="token punctuation">:</span> signature<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">SendBid</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bidArgs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该函数内，就会生成 RawBid 对象，然后用钱包对她签名，并构建发送给 validator 的 BidArgs 对象，并通过 cli 客户端发给 validator。</p><p>还有一个重要的信息就是work 中的 coinbase。在生成 work 时，需要设置 work 的 coinbase，作为将来块的 coinbase。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// take the next in-turn validator as coinbase</span>
coinbase<span class="token punctuation">,</span> err <span class="token operator">=</span> w<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">NextInTurnValidator</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> w<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// NextInTurnValidator return the next in-turn validator for header</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Parlia<span class="token punctuation">)</span> <span class="token function">NextInTurnValidator</span><span class="token punctuation">(</span>chain consensus<span class="token punctuation">.</span>ChainHeaderReader<span class="token punctuation">,</span> header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	snap<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">snapshot</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> common<span class="token punctuation">.</span>Address<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> snap<span class="token punctuation">.</span><span class="token function">inturnValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// inturnValidator returns the validator at a given block height. </span>
<span class="token comment">// 从这就可以看出，他就是轮流制的</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Snapshot<span class="token punctuation">)</span> <span class="token function">inturnValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> common<span class="token punctuation">.</span>Address <span class="token punctuation">{</span>
	validators <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">validators</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	offset <span class="token operator">:=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>Number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>validators<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> validators<span class="token punctuation">[</span>offset<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==以上就是 builder 的逻辑啦。==</p><p>总结：</p><p>币安链上，出块奖励都是给到验证者，验证者通过在块尾加一条给 builder 的转账给 builder 分润，然后再调用验证者合约将奖励打给系统合约和黑洞地址，并将利润转换为自己的代币。</p><p>以太坊上，出块奖励直接给到 builder。</p><h2 id="validators-信息" tabindex="-1"><a class="header-anchor" href="#validators-信息" aria-hidden="true">#</a> validators 信息</h2><p>可以看到 builder 在生成 work 时，设置的coinbase 其实就是下一个能够产生区块的验证者。如果继续追踪源码，可以看到验证者的信息是从区块头中解析出来的。</p><p>我们可以观察一个区块的 extra data，可以看到，在 data 中就记录了所有 validators 的信息。信息组成如下：</p><p><code>|Extra Vanity | Validators Number and Validators Bytes (or Empty) | Vote Attestation (or Empty) | Extra Seal|</code></p><p><img src="`+r+`" alt="screenshot2024-09-08 17.10.49"></p><p>而 worker 在调用 prepareWork 的时候，会有如下逻辑</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if err := w.engine.Prepare(w.chain, header); err != nil {
    log.Error(&quot;Failed to prepare header for sealing&quot;, &quot;err&quot;, err)
    return nil, err
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数里面，就会准备该区块头的 validators，这些 validators 的信息会从验证者合约中去拿，他的源码也是构建一条交易，但其实并不需要发起交易。</p><blockquote><p>如果你想从合约中获取数据，通常会通过调用合约中的 view 或 pure 修饰符标记的只读函数。这类函数不会修改区块链状态，因此不需要发起一笔真正的交易，而是可以通过<strong>本地调用</strong>来获取结果。这种调用不会消耗 gas，也不需要付费。</p><p><strong>只读操作</strong>（如查询合约信息、调用 view 或 pure 函数，获取账户信息等）不需要发起交易，也不消耗 gas。</p><p><strong>修改状态的操作</strong>（如写入存储或转账）需要发起实际交易，消耗 gas，并产生交易码。</p></blockquote>`,69);function B(x,C){const a=o("ExternalLinkIcon");return c(),i("div",null,[d,v,m,b,g,n("p",null,[s("对于这笔"),n("a",f,[s("交易"),t(a)]),s("，他是在块头位置，可以看到他目前的 gas 消耗是 84011，让他在第 3 条交易执行，可以看到模拟之后的 gas 消耗是 59011。这中间相差了 25000。这也说明了该交易放在块头执行对于 builder 而言，价值量更高。")]),y,n("p",null,[s("我们从上面可以看到，对于"),n("a",h,[s("币安链来说，它采用Parlia共识算法"),t(a)]),s("，他会将 gas 消耗打入系统账户，但是其他共识算法，如以太坊，是直接打到区块打包者账户内，也就是 coinbase。")]),w])}const S=e(k,[["render",B],["__file","gas_fee.html.vue"]]);export{S as default};
