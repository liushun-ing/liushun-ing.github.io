import{_ as e,o as d,c as o,a as c}from"./app-d0fb739e.js";const t="/home/assets/example-6bcf7563.png",l={},x=c('<h1 id="rlp编码" tabindex="-1"><a class="header-anchor" href="#rlp编码" aria-hidden="true">#</a> RLP编码</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><strong>RLP 编码全称 Recursive Length Prefix 编码方法，是一种递归性质的编码方式。</strong></p><p>从RLP编码的英文名称中我们可以看出，该编码方式的特色就是可以用同一个编码函数递归地正向编码，直到不能再编码为止。 同样的过程也适用于解码，仅需将解码成果向同一个解码函数代入，直到彻底变为明文为止。</p><p>那么，为何RLP编码被广泛地使用在了以太坊的数据存储及数据传输的过程中呢？该算法有如下的几个特点。</p><blockquote><ul><li>编码/解码逻辑足够简单。</li><li>应用在底层字节类型 Byte 层面上，节约占用空间。</li><li>可以采用流式方式解码，提高网络传输效率。</li></ul></blockquote><p>在计算机空间中，数据往往按照字节存储，RLP编码应用在字节类型(Byte)数据上正是瞄准了最底层的存储空间。该算法定义可编码的 <strong>数据项</strong> 如下所示。</p><blockquote><ul><li>一条基本的字符串（即为byte数组）。</li><li>一个数组，每个数组元素为一个 <strong>数据项</strong> ，可以是空数组。</li></ul></blockquote><p>具体举例来说，RLP进行底层编码的通常形式的“数据项”是如下形式的。</p><blockquote><ul><li><code>“Buenas”</code></li><li><code>[]</code></li><li><code>[“cat”, “dog”]</code></li><li><code>[“What”, [“is”, “your”], [], “name”, [[“?”]]]</code></li></ul></blockquote><p>RLP编码是没有办法针对字典类型的数据进行编码的， 例如形如 <code>{“a”:1, “b”:2}</code> 这样的字典结构是需要更高阶的编码方式编码后，再交给RLP进行底层编码。（但是区块链中一边都是对字节进行编码，所以够用了）</p><p>同样的，各种中文字符或特殊符号也是需要更高阶的函数将其编码为Byte数组以后再交到RLP进行底层编码。</p><p>RLP编码的 <strong>数据项</strong> 分为两种：字符/字符串和数组。</p><h2 id="字符型编码" tabindex="-1"><a class="header-anchor" href="#字符型编码" aria-hidden="true">#</a> 字符型编码</h2><p>ASCII表涵盖了0～127个字符，按照16进制表达就是 <code>0x00</code> ～ <code>0x7f</code> 。 一个Byte能够覆盖的范围是0～255， <code>0x00</code> ～ <code>0xff</code> 。</p><p>编码规则：</p><ul><li><p>若单一字符在 <code>0x00</code> ～ <code>0x7f</code> 范围内，则保持原样，不作变更。</p><ul><li>0x78 =&gt; 0x78</li></ul></li><li><p>若单一字符在 <code>0x80</code> ～ <code>0xff</code> 范围内，则前缀 <code>0x81</code> 。</p><ul><li>0xef =&gt; <code>0x81</code>, 0xef</li></ul></li><li><p>若不是单一字符，为 2～55 个字符组成的字符串，则前缀“ <code>0x80</code> + 字符串长度”，并紧接着书写字符串的 16 进制表达，所以开头字节范围为 <code>0x82</code> ～ <code>0xb7</code> 。</p><p>分步骤如下</p><ul><li>“hello” = h, e, l, l, o = 0x68, 0x65, 0x6c, 0x6c, 0x6f</li><li>“hello” 长度为5，与前缀 0x80相加 <code>0x80</code> + 0x05 = <code>0x85</code></li><li>整合编码后得出结果：<code>0x85</code>, 0x68, 0x65, 0x6c, 0x6c, 0x6f</li></ul></li><li><p>若为 55 个以上字符组成的字符串，RLP编码分为三个部分，从 <strong>右往左</strong> 依次为：原始字符串的16进制表达 <em>P1</em> ，字符串总长度的16进制表达 <em>P2</em> ，0xb7和 <em>P2</em> 长度的加和值 <em>P3</em> ，<em>P3</em> 的范围在 <code>0xb8</code> ～ <code>0xbf</code> 。</p><p>分步骤如下</p><ul><li>“aaaa….aaaa”共 2000 个字符 = 0x61, 0x61 …. 0x61 (共2000个字节) 这是 <em>P1</em></li><li>字符串总长度 2000 个字节，2000 转为 16 进制后表达为 07d0 = <code>0x07, 0xd0</code> (共2个字节) ，这是 <em>P2</em></li><li>由于上述长度表达式占用 2 个字节，最前端前缀为0xb7 + 2 = <code>0xb9</code> , 这是 <em>P3</em></li><li>依序排列 <em>P3, P2, P1</em> ：<code>0xb9</code> , <code>0x07, 0xd0</code> , 0x61, 0x61,…, 0x61</li></ul></li></ul><h2 id="字符型解码" tabindex="-1"><a class="header-anchor" href="#字符型解码" aria-hidden="true">#</a> 字符型解码</h2><p>对于最基本的字符/字符串变量，RLP编码的解码过程将同样直观且顺利， 当解码器遇上一个字符时，仅需判断其范围即可决定紧接着的字符应该采用何种方式进行解码。 可以说是一个相当好用的流式解码。</p><table><thead><tr><th>字符串开头</th><th>代表的含义</th></tr></thead><tbody><tr><td>0x00～0x7f</td><td>按照ASCII直接翻译该字符</td></tr><tr><td>0x81</td><td>会紧跟一个特殊的字符</td></tr><tr><td>0x82～0xb7</td><td>会紧跟一条不大于55个的字符串</td></tr><tr><td>0xb8～0xbf</td><td>会紧跟一条大于55个的字符串</td></tr></tbody></table><p>例如我们上文的 <code>0xb9</code> , <code>0x07, 0xd0</code> , 0x61, 0x61,…, 0x61 字符串，我们拿到以后对照上表</p><ul><li><code>0xb9</code> 提示这是一个功能性字符，它后方会紧跟一个大于 55 个长度的字符串。 字符串长度多少？表达长度的区域将会占用 0xb9 - 0xb7 = 2 个字符。</li><li>顺序读取接下来两个字符 <code>0x07, 0xd0</code></li><li>这两个字符拼合 <code>07d0</code> 代表16进制的 2000，提示我们后方是一个2000个字符串。</li><li>顺序读取接下来的2000个字符。</li><li>发现都是 0x61, 按照 ASCII直接翻译该字符即可。为 <code>&quot;a&quot;</code></li></ul><h2 id="数组型编码" tabindex="-1"><a class="header-anchor" href="#数组型编码" aria-hidden="true">#</a> 数组型编码</h2><p>我们看到字符串的编码范围用到了 <code>0xbf</code> 就到了顶峰，再向上起始范围是 <code>0xc0</code> ，这个就是数组的编码起始范围。针对数组，RLP编码定义如下所示。</p><ul><li><p>空数组编码为 <code>0xc0</code></p><ul><li><code>[]</code> =&gt; <code>0xc0</code></li></ul></li><li><p>每个数组项必须事先分别经过RLP编码（这也就是递归，如果是嵌套数组，必须先对子数组编码，才能编码外层数组）。</p></li><li><p>如果各项数组项的RLP编码结果总和数据在1～55个字符长度内，则前缀 <code>0xc0</code> + 数据总长，再串联数据形成最终结果，前缀范围是 <code>0xc1</code> ～ <code>0xf7</code> 。</p><p>分步骤拆解入下</p><ul><li>各自RLP编码：[“hello” “world”] = RLP( RLP(“hello”), RLP(“world”) )</li><li>RLP(“hello”) = [0x85, 0x68, 0x65, 0x6c, 0x6c, 0x6f] (长度为6)</li><li>RLP(“world”) = [0x85, 0x77, 0x6f, 0x72, 0x6c, 0x64] (长度为6)</li><li>总数据长度 6 + 6 = 12 = 0x0c</li><li>前缀值 <code>0xc0</code> + 0x0c = <code>0xcc</code></li><li>总编码结果为：[ <code>0xcc</code> , <code>0x85, 0x68, 0x65, 0x6c, 0x6c, 0x6f</code> , <code>0x85, 0x77, 0x6f, 0x72, 0x6c, 0x64</code> ]</li></ul></li><li><ul><li><p>如果各数据项的RLP编码结果综合数据在 55 个字符以上，则按照三部分安排，</p><p>从 <strong>右往左</strong> 依次是：各数据项分别经过RLP编码后的结果 <em>P1</em> ， 总数据体量的 16 进制表达 <em>P2</em> ， <code>0xf7</code> + 数据体量的长度前缀 <em>P3</em> ，P3的范围在 <code>0xf8</code> ～ <code>0xff</code> 。</p></li></ul></li></ul><img src="'+t+'" alt="screenshot2024-07-19 15.49.35" style="zoom:50%;"><h2 id="数组型解码" tabindex="-1"><a class="header-anchor" href="#数组型解码" aria-hidden="true">#</a> 数组型解码</h2><p>也是需要递归解码，每个数组元素都需要按照字符规则或者数组规则进行解码，直到不能再解码为止。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>RLP算法已经明明白白地安排了从 0x00～0xff 每个字符的含义，并且巧妙地使用了 0x80, 0x81, 0xc0 作为分隔符将这些范围划分为数个空间， 在解码时，根据开头就能判断接下去来的数据类型。</p><table><thead><tr><th>字符串开头</th><th>代表的含义</th></tr></thead><tbody><tr><td>0x00～0x7f</td><td>按照ASCII直接翻译该字符</td></tr><tr><td>0x81</td><td>会紧跟着一个特殊的字符</td></tr><tr><td>0x82～0xb7</td><td>会紧跟一条不大于55个的字符串</td></tr><tr><td>0xb8～0xbf</td><td>会紧跟一条大于55个的字符串</td></tr><tr><td>0xc1～0xf7</td><td>会紧跟一个不大于55个字符的数组</td></tr><tr><td>0xf8～0xff</td><td>会紧跟一条大于55个字符的数组</td></tr></tbody></table>',31),i=[x];function r(a,h){return d(),o("div",null,i)}const n=e(l,[["render",r],["__file","rlp.html.vue"]]);export{n as default};
