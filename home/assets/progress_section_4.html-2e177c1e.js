import{_ as e,o,c,a as d}from"./app-19500e8e.js";const s="/home/assets/suo1-f9214327.png",a="/home/assets/suocategory-695ebc24.png",n="/home/assets/biaosuo-18f7705c.png",p="/home/assets/intentsuo1-1d08e584.png",t="/home/assets/intentsuo2-5b6fe3d4.png",i="/home/assets/processlist-3ef8c580.png",l="/home/assets/sup1-0f4f2942.png",r="/home/assets/sup2-663a789d.png",u="/home/assets/insertintentlosk-e5165683.png",k="/home/assets/suostructure-51602909.png",h={},m=d('<h1 id="高级-锁" tabindex="-1"><a class="header-anchor" href="#高级-锁" aria-hidden="true">#</a> 高级-锁</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>锁</code> 是计算机协调多个进程或线程 <code>并发访问某一资源</code> 的机制。</p><p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对<code>并发操作进行控制</code>，因此产生了<code>锁</code>。同时<code>锁机制</code>也为实现MySQL的各个<code>隔离级别</code>提供了保证。 <code>锁冲突</code> 也是影响数据库<code>并发访问性能</code>的一个重要因素。</p><h3 id="并发事务访问分类" tabindex="-1"><a class="header-anchor" href="#并发事务访问分类" aria-hidden="true">#</a> 并发事务访问分类</h3><p>读-读：</p><p>即并发事务相继读取相同的记录，读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。</p><p>写-写：</p><p>即并发事务相继对相同的记录作出改动。在这种情况下会发生<code>脏写</code>的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们<code>排队执行</code>，这个排队的过程其实是通过<code>锁</code>来实现的。</p><p>这个所谓的锁其实是一个 <code>内存中的结构</code> ，在事务执行前本来是没有锁的，也就是说一开始是没有 锁结构 和记录进行关联的，当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的 <code>锁结构</code> ，当没有的时候就会在内存中生成一个 <code>锁结构</code> 与之关联。</p><img src="'+s+'" alt="image-20220608122002450" style="zoom:67%;"><p>在 <code>锁结构</code> 里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来：</p><ul><li><code>trx信息</code>：代表这个锁结构是哪个事务生成的。</li><li><code>is_waiting</code> ：代表当前事务是否在等待。</li></ul><p>当事务 <code>T1</code> 改动了这条记录后，就生成了一个<code>锁结构</code>与该记录关联，因为之前没有别的事务为这条记录加锁，所以 <code>is_waiting</code> 属性就是 <code>false</code> ，把这个场景就称之为 <code>获取锁成功</code>，或者 <code>加锁成功</code>，然后就可以继续执行操作了。</p><p>在事务 <code>T1</code> 提交之前，另一个事务 <code>T2</code> 也想对该记录做改动，那么先看看有没有锁结构与这条记录关联，发现有一个锁结构与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的 <code>is_waiting</code> 属性值为 <code>true</code> ，表示当前事务需要等待，这个场景就称之为 <code>获取锁失败</code>，或者 <code>加锁失败</code>。</p><p>读-写/写-读：</p><p><code>读-写</code>或<code>写-读</code>，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>的问题。</p><p>各个数据库厂商对 <code>SQL标准</code> 的支持都可能不一样。比如MySQL在 <code>REPEATABLE READ</code> 隔离级别上就已经解决了 <code>幻读</code> 问题。</p><h3 id="解决方案预览" tabindex="-1"><a class="header-anchor" href="#解决方案预览" aria-hidden="true">#</a> 解决方案预览</h3><p>怎么解决<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>这些问题呢？其实有两种可选的解决方案：</p><ul><li><p>方案一：读操作利用多版本并发控制（<code>MVCC</code>），写操作进行<code>加锁</code>。</p><p>所谓的<code>MVCC</code>，就是生成一个<code>ReadView</code>，通过ReadView找到符合条件的记录版本（历史版本由<code>undo日志</code>构建）。查询语句只能<code>读</code>到在生成ReadView之前<code>已提交事务所做的更改</code>，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而<code>写操作</code>肯定针对的是<code>最新版本的记录</code>，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，<code>读-写</code>操作并不冲突。</p></li></ul><blockquote><p>普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。</p><ul><li>在<code>READ COMMITTED</code>隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code>，也就是避免了脏读现象；</li><li>在<code>REPEATABLE READ</code>隔离级别下，一个事务在执行过程中只有<code>第一次执行SELECT操作</code>才会生成一个ReadView，之后的SELECT操作都<code>复用</code>这ReadView，这样也就避免了不可重复读和幻读的问题。</li></ul></blockquote><ul><li><p>方案二：读、写操作都采用<code>加锁</code>的方式。</p><p><code>脏读</code> 的产生是因为当前事务读取了另一个未提交事务写的一条记录，如果另一个事务在写记录的时候就给这条记录加锁，那么当前事务就无法继续读取该记录了，所以也就不会有脏读问题的产生了。</p><p><code>不可重复读</code> 的产生是因为当前事务先读取一条记录，另外一个事务对该记录做了改动之后并提交之后，当前事务再次读取时会获得不同的值，如果在当前事务读取记录时就给该记录加锁，那么另一个事务就无法修改该记录，自然也不会发生不可重复读了。</p><p><code>幻读</code> 问题的产生是因为当前事务读取了一个范围的记录，然后另外的事务向该范围内插入了新记录，当前事务再次读取该范围的记录时发现了新插入的新记录。采用加锁的方式解决幻读问题就有一些麻烦，因为当前事务在第一次读取记录时幻影记录并不存在，所以读取的时候加锁就有点尴尬（因为并不知道给谁加锁)。</p></li><li><p>小结对比发现：</p><ul><li>采用<code>MVCC</code>方式的话，<code>读-写</code>操作彼此并不冲突，<code>性能更高</code>。</li><li>采用<code>加锁</code>方式的话，<code>读-写</code>操作彼此需要<code>排队执行</code>，影响性能。</li></ul><p>一般情况下当然愿意采用<code>MVCC</code>来解决<code>读-写</code>操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用<code>加锁</code>的方式执行。<strong>默认是MVCC，加锁的方式需要在写sql的时候自己加锁，但是MVCC是存储引擎自主支持的。</strong></p></li></ul><h2 id="锁分类" tabindex="-1"><a class="header-anchor" href="#锁分类" aria-hidden="true">#</a> 锁分类</h2><img src="'+a+`" alt="image-20220608123139475" style="zoom:50%;"><h3 id="类型划分" tabindex="-1"><a class="header-anchor" href="#类型划分" aria-hidden="true">#</a> 类型划分</h3><p><code>共享锁</code>(Shared Lock，S Lock)和 <code>排他锁</code>（Exclusive Lock，X Lock)，也叫<code>读锁(readlock)</code>和<code>写锁(write lock)</code>。</p><ul><li><code>读锁</code>：也称为<code>共享锁</code>、英文用<code>S</code>表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。</li><li><code>写锁</code>：也称为<code>排他锁</code>、英文用<code>X</code>表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。</li></ul><p>只有读-读兼容，其他都不兼容。</p><h4 id="锁定读" tabindex="-1"><a class="header-anchor" href="#锁定读" aria-hidden="true">#</a> 锁定读</h4><p>在采用<code>加锁</code>方式解决<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>这些问题时，读取一条记录时需要获取该记录的<code>S锁</code>，其实是不严谨的，有时候需要在读取记录时就获取记录的<code>X锁</code>，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的<code>SELECT</code>语句格式：</p><ul><li><p>对读取的记录加<code>S锁</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>
<span class="token comment"># 或</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">SHARE</span><span class="token punctuation">;</span> <span class="token comment">#(8.0新增语法)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在普通的SELECT语句后边加<code>LOCK IN SHARE NODE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加s锁，这样允许别的事务继续获取这些记录的S锁(比方说别的事务也使用<code>SELECT ... LOCK IN SHAREMODE</code>语句来读取这些记录)，但是不能获取这些记录的X锁(比如使用<code>SELECT ... FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录)。如果别的事务想要获取这些记录的X锁，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>S锁</code> 释放掉。</p></li><li><p>对读取的记录加<code>X锁</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在普通的SELECT语句后边加 <code>FOR UPDATE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加X锁，这样既不允许别的事务获取这些记录的S锁(比方说别的事务使用<code>SELECT ... LOCK IN SHARE MODE</code>语句来读取这些记录)，也不允许获取这些记录的X锁(比如使用<code>SELECT ... FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录)。如果别的事务想要获取这些记录的S锁或者X锁，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>X锁</code>释放掉。</p></li></ul><p><strong>MySQL8.0新特性：</strong></p><p>在5.7及之前的版本，SELECT ... FOR UPDATE，如果获取不到锁，会一直等待，直到<code>innodb_lock_wait_timeout</code>超时。在8.0版本中，SELECT ... FOR UPDATE, SELECT ... FOR SHARE 添加<code>NOWAIT</code>、<code>SKIP LOCKED</code>语法，跳过锁等待，或者跳过锁定。</p><ul><li>NOWAIT：如果查询的行已经加锁，会立即报错返回</li><li>SKIP LOCKED：如果查询的行已经加锁，只返回结果中不包含被锁定的行</li></ul><blockquote><p>[!WARNING]</p><p>for update和for share只能对select语句作用，写在其他语句会报错。</p></blockquote><h4 id="写操作" tabindex="-1"><a class="header-anchor" href="#写操作" aria-hidden="true">#</a> 写操作</h4><ul><li><p><code>DELETE</code>：对一条记录做DELETE操作的过程其实是先在<code>B+</code>树中定位到这条记录的位置，然后获取这条记录的<code>X锁</code>，再执行<code>delete mark</code>操作。</p></li><li><p><code>UPDATE</code>：在对一条记录做UPDATE操作时分为三种情况：</p><ul><li>情况1：未修改该记录的键值，并且被更新的列占用的存储空间在修改前后未发生变化。则先在<code>B+</code>树中定位到这条记录的位置，然后再获取一下记录的<code>X锁</code>，最后在原记录的位置进行修改操作。</li><li>情况2：未修改该记录的键值，并且至少有一个被更新的列占用的存储空间在修改前后发生变化。则先在<code>B+</code>树中定位到这条记录的位置，然后获取一下记录的<code>X锁</code>，将该记录彻底删除掉（就是把记录彻底移入垃圾链表），最后再插入一条新记录。新插入的记录由<code>INSERT</code>操作提供的<code>隐式锁</code>进行保护。</li><li>情况3：修改该记录的键值，则相当于在原记录上做<code>DELECT</code>操作之后再来一次<code>INSERT</code>操作。加锁操作就需要按照DELETE和INSERT的规则进行了。</li></ul></li><li><p><code>INSERT</code>：一般情况下，新插入一条记录的操作并不加锁，通过一种称之为<code>隐式锁</code>的结构来保护这条新插入的记录在本事务提交前不被别的事务访问。</p><p>可以使用<code>select * from performance_schema.data_locks\\G</code>查看</p></li></ul><h3 id="粒度划分" tabindex="-1"><a class="header-anchor" href="#粒度划分" aria-hidden="true">#</a> 粒度划分</h3><p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很 <code>耗资源</code> 的事情（涉及获取、检查、释放锁等动作)。因此数据库系统需要在 <code>高并发响应</code> 和 <code>系统性能</code> 两方面进行平衡，这样就产生了“<code>锁粒度（Lock granularity)</code>&quot;的概念。锁的粒度主要分为表级锁、页级锁和行锁。</p><h4 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁" aria-hidden="true">#</a> 表锁</h4><p>该锁会锁定整张表，它是MySQL中最基本的锁策略，并<code>不依赖于存储引擎</code>，并且表锁是<code>开销最少</code>的策略。由于表级锁一次会将整个表锁定，所以可以很好的<code>避免死锁</code>的问题。当然，锁的粒度大所带来最大的负面影响就是出现锁资源争用的概率也会最高，导致<code>并发率大打折扣</code>。</p><p><strong>① 表级别的S锁、X锁</strong></p><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的<code>S锁</code>或者<code>X锁</code>的。在对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行<code>DDL</code>语句也会发生阻塞。这个过程其实是通过在<code>server层</code>使用一种称之为<code>元数据锁</code>（英文名：<code>Metadata Locks</code>，简称<code>MDL</code>）结构来实现的。</p><p>一般情况下，不会使用InnoDB存储引擎提供的表级别的<code>S锁</code>和<code>X锁</code>。只会在一些特殊情况下，比方说<code>崩溃恢复</code>过程中用到。比如，在系统变量<code>autocommit=0，innodb_table_locks = 1</code>时，<code>手动</code>获取InnoDB存储引擎提供的表t 的<code>S锁</code>或者<code>X锁</code>可以这么写：</p><ul><li><code>LOCK TABLES t READ</code>：InnoDB存储引擎会对表<code>t</code>加表级别的<code>S锁</code>。</li><li><code>LOCK TABLES t WRITE</code>：InnoDB存储引擎会对表<code>t</code>加表级别的<code>X锁</code>。</li><li><code>UNLOCK tables;</code>：释放加锁的表</li></ul><p>不过尽量避免在使用InnoDB存储引擎的表上使用 <code>LOCK TABLES</code> 这样的手动锁表语句，它们并不会提供什么额外的保护，只是会降低并发能力而已。</p><img src="`+n+`" alt="image-20220608143114390" style="zoom:67%;"><p><strong>② 意向锁 （intention lock）</strong></p><p>InnoDB 支持<code>多粒度锁（multiple granularity locking）</code>，它允许<code>行级锁</code>与<code>表级锁</code>共存，而<strong>意向锁</strong>就是其中的一种<code>表锁</code>。</p><p>1、意向锁的存在是为了协调行锁和表锁的关系，支持多粒度（表锁与行锁）的锁并存。</p><p>2、意向锁是一种<code>不与行级锁冲突的表级锁</code>，这一点非常重要。</p><p>3、表明&quot;某个事务正在某些行持有了锁或该事务准备去持有锁&quot;</p><p>意向锁分为两种：</p><ul><li><p><strong>意向共享锁</strong>（intention shared lock, IS）：事务有意向对表中的某些行加**<code>共享锁</code>**（S锁）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。 </span>
<span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>意向排他锁</strong>（intention exclusive lock, IX）：事务有意向对表中的某些行加**<code>排他锁</code>**（X锁）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。 </span>
<span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>即：意向锁是由存储引擎<code>自己维护的</code>，用户无法手动操作意向锁，在为数据行加共享 / 排他锁之前，InooDB 会先获取该数据行<code>所在数据表的对应意向锁</code>。</p><p>详细分析：</p><p>现在有两个事务，分别是T1和T2，其中T2试图在该表级别上应用共享或排它锁，如果没有意向锁存在，那么T2就需要去检查各个页或行是否存在锁；如果存在意向锁，那么此时就会受到由T1控制的<code>表级别意向锁的阻塞</code>。T2在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。简单来说就是给更大一级级别的空间示意里面是否已经上过锁。</p><p>在数据表的场景中，<strong>如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表已经有人上过排它锁了</strong>，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排它锁即可。</p><ul><li>如果事务想要获取数据表中某些记录的共享锁，存储引擎会自动在数据表上<code>添加意向共享锁</code></li><li>如果事务想要获取数据表中某些记录的排它锁，存储引擎会自动在在数据表上<code>添加意向排他锁</code></li></ul><p>这时，意向锁会告诉其他事务已经有人锁定了表中的某些记录。</p><img src="`+p+'" alt="image-20220608181007927" style="zoom:67%;"><img src="'+t+'" alt="image-20220608181022088" style="zoom:67%;"><p>可以看到意向锁之间是互相兼容的，但是意向锁和普通的表的排他/共享锁互斥。</p><blockquote><p>简单来说：如果事务1对某条记录加了写锁，存储引擎会自动给表加一个意向排他锁，如果事务2想通过lock tables来获取表的写锁，发现表的意向排他锁已经被别的事务占有了，他就会获取锁失败。但是如果事务2想获取其他记录的行级锁，他是可以获取的。IX和IS是表级锁，不和行级的X，S锁冲突。</p></blockquote><p><strong>③ 自增锁（AUTO-INC锁）</strong></p><p>对于某些表设置了自增主键，那么插入时可以不写主键，他能自动赋值。他有三种模式：</p><ol><li>“Simple inserts” （简单插入）</li></ol><p>可以<code>预先确定要插入的行数</code>（当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行<code>INSERT...VALUES()</code>和<code>REPLACE</code>语句。</p><ol start="2"><li>“Bulk inserts” （批量插入）</li></ol><p><code>事先不知道要插入的行数</code>（和所需自动递增值的数量）的语句。比如<code>INSERT ... SELECT</code>，<code>REPLACE ... SELECT</code>和<code>LOAD DATA</code>语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列分配一个新值。</p><ol start="3"><li>“Mixed-mode inserts” （混合模式插入）</li></ol><p>这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如<code>INSERT INTO teacher (id,name) VALUES (1,&#39;a&#39;), (NULL,&#39;b&#39;), (5,&#39;c&#39;), (NULL,&#39;d&#39;);</code>只是指定了部分id的值。另一种类型的“混合模式插入”是<code>INSERT ... ON DUPLICATE KEY UPDATE</code>。</p><p><strong>AUTO-INT锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁</strong>，在执行插入语句时就在表级别加一个AUTO-INT锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INT锁释放掉。<strong>一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞</strong>，可以保证一个语句中分配的递增值是连续的。也正因为此，其并发性显然并不高，<strong>当向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争</strong>，这样的并发潜力其实是很低下的，innodb通过<code>innodb_autoinc_lock_mode</code>的不同取值来提供不同的锁定机制，来显著提高SQL语句的可伸缩性和性能。</p><p><strong>④ 元数据锁（MDL锁）</strong></p><p>MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL 的作用是，保证读写的正确性。比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个<code>表结构做变更</code>，增加了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此，<strong>当对一个表做增删改查操作的时候，加<code>MDL读锁</code>；当要对表做结构变更操作的时候，加<code>MDL写锁</code>。</strong></p><p>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。不需要显式使用，在访问一个表的时候会被自动加上。</p><p>两个事务一个执行DML，一个执行DDL，使用<code>show processlist</code>可以查看MDL锁。</p><p><img src="'+i+'" alt="image-20220609000809744"></p><h4 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁" aria-hidden="true">#</a> 行锁</h4><p>行锁（Row Lock）也称为记录锁，顾名思义，就是锁住某一行（某条记录row）。需要注意的是，MySQL服务器层并没有实现行锁机制，<strong>行级锁只在存储引擎层实现。</strong></p><p>**优点：**锁定力度小，发生<code>锁冲突概率低</code>，可以实现的<code>并发度高</code></p><p>**缺点：**对于<code>锁的开销比较大</code>，加锁会比较慢，容易出现<code>死锁</code>情况</p><p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。</p><p><strong>① 记录锁（Record Locks）</strong></p><p>记录锁也就是仅仅把一条记录锁上，官方的类型名称为：<code>LOCK_REC_NOT_GAP</code>。</p><ul><li>事务1修改记录a，成功，事务2修改记录a，事务2将会阻塞；</li><li>事务1修改记录a，成功，事务2修改记录b，成功。</li></ul><p>记录锁是有S锁和X锁之分的，称之为<code>S型记录锁</code>和<code>X型记录锁</code>。</p><ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul><p><strong>② 间隙锁（Gap Locks）</strong></p><p><code>MySQL</code>在<code>REPEATABLE READ</code>隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用<code>MVCC</code>方案解决，也可以采用<code>加锁</code>方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，无法给这些<code>幻影记录</code>加上<code>记录锁</code>。InnoDB提出了一种称之为<code>Gap Locks</code>的锁，官方的类型名称为：<code>LOCK_GAP</code>，可以简称为<code>gap锁</code>。</p><p>比如有记录a，和记录b，两条记录在聚簇索引中相邻。事务1现在对记录a和记录b中间的某条不存在的记录加锁，即查询或修改它（查询需要手动加锁，修改是自动加锁的），这样就会添加一条（记录a，记录b）的间隙锁，事务2就无法往这个区间insert记录了。</p><p><strong><code>gap锁的提出仅仅是为了防止插入幻影记录而提出的</code></strong>。虽然有<code>共享gap锁</code>和<code>独占gap锁</code>这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p><blockquote><p>[!CAUTION]</p><p>由于事务1加了gap锁，并不会影响事务2继续加gap，这就很容易造成死锁。</p><p>比如事务1:update account set name =&#39;aaa&#39; where id=5;</p><p>然后事务2:也执行update account set name =&#39;aaa&#39; where id=5;</p><p>然后事务1:insert into account values (5, 10000, &#39;1&#39;); 会阻塞</p><p>然后事务2:insert into account values (5, 10000, &#39;1&#39;); 这就死锁了</p><p>但是innodb有死锁解决方案，最终可以看到事务1执行成功了，</p><p>事务2:ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction 回滚了。</p></blockquote><p>注意，给一条记录加了gap锁只是不允许其他事务往这条记录前边的间隙插入新记录，那对于最后一条记录之后的间隙呢？也就是说给哪条记录加gap锁才能阻止其他事务插入（最后一条记录，+∞)这个区间的新记录呢?这时候数据页时介绍的两条伪记录派上用场了:</p><ul><li><code>Infimum记录</code>，表示该页面中最小的记录。</li><li><code>Supremum记录</code>，表示该页面中最大的记录。</li></ul><p>为了实现阻止其他事务插入id值在(最后一条记录, +∞)这个区间的新记录，可以给索引中的最后一条记录所在页面的Supremum记录加上一个gap锁。</p><p>事务1（最大记录为6）:</p><img src="'+l+'" alt="screenshot2024-11-23 16.31.09" style="zoom:50%;"><p>查看：select * from performance_schema.data_locks\\G</p><img src="'+r+`" alt="screenshot2024-11-23 16.32.16" style="zoom:50%;"><p>可以看到第二个锁中的LOCK_DATA为<code>supremum pseudo-record</code>。</p><p><strong>③ 临键锁（Next-Key Locks）</strong></p><p>有时候既想<code>锁住某条记录</code>，又想<code>阻止</code>其他事务在该记录前边的<code>间隙插入新记录</code>，所以InnoDB就提出了一种称之为<code>Next-Key Locks</code>的锁，官方的类型名称为：<code>LOCK_ORDINARY</code>，也可以简称为<code>next-key锁</code>。Next-Key Locks是在存储引擎<code>innodb</code>、事务级别在<code>可重复读</code>的情况下使用的数据库锁，innodb默认的锁就是Next-Key locks。</p><p><code>next-key锁</code> 的本质就是一个<code>记录锁</code>和一个<code>gap锁</code>的合体，它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的 <code>间隙</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">begin</span><span class="token punctuation">;</span> 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">&lt;=</span><span class="token number">8</span> <span class="token operator">and</span> id <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ 插入意向锁（Insert Intention Locks）</strong></p><p>一个事务在<code>插入</code>一条记录时需要判断一下插入位置是不是被别的事务加了<code>gap锁</code>（<code>next-key锁</code>也包含<code>gap锁</code>），如果有的话，插入操作需要等待，直到拥有<code>gap锁</code>的那个事务提交。但是<strong>InnoDB规定事务在等待的时候也需要在内存中生成一个锁结构</strong>，表明有事务想在某个<code>间隙</code>中<code>插入</code>新记录，但是现在在等待。</p><p>InnoDB就把这种类型的锁命名为<code>Insert Intention Locks</code>，官方的类型名称为：<code>LOCK_INSERT_INTENTION</code>，称为<code>插入意向锁</code>。插入意向锁是一种<code>Gap锁</code>，不是意向锁，在insert操作时产生。</p><p>插入意向锁是在插入一条记录行前，由 <code>INSERT 操作产生的一种间隙锁</code>。该锁用以表示插入意向，当多个事务在同一区间(gap）插入位置不同的多条数据时，事务之间不需要互相等待。假设存在两条值分别为4和7的记录，两个不同的事务分别试图插入值为5和6的两条记录，每个事务在获取插入行上独占的(排他）锁前，都会获取（(4，7)之间的间隙锁，但是因为数据行之间并不冲突，所以两个事务之间并不会产生冲突（阻塞等待)。如下图所示，一旦事务1提交，释放了锁，事务2和事务3都会执行成功。事实上<code>插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁</code>。</p><img src="`+u+`" alt="image-20220609094258118" style="zoom:67%;"><p>总结来说，插入意向锁的特性可以分成两部分:</p><p>(1）插入意向锁是一 种<code>特殊的间隙锁</code> ——间隙锁可以锁定开区间内的部分记录。</p><p>(2）插入意向锁之间互不排斥，所以即使多个事务在同一区间插入多条记录，只要记录本身（主键、唯一索引)不冲突，那么事务之间就不会出现冲突等待。</p><p>注意，虽然插入意向锁中含有意向锁三个字，但是它并不属于意向锁而属于间隙锁，因为意向锁是表锁而插入意向锁是行锁。</p><h4 id="页锁" tabindex="-1"><a class="header-anchor" href="#页锁" aria-hidden="true">#</a> 页锁</h4><p>页锁就是在<code>页的粒度</code>上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。<strong>页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。</strong></p><p>每个层级的锁数量是有限制的，因为锁会占用内存空间，<code>锁空间的大小是有限的</code>。当某个层级的锁数量超过了这个层级的阈值时，就会进行<code>锁升级</code>。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。</p><p>这个页锁基本没啥可操作演示的，这个要存储引擎去做了。</p><h3 id="态度划分" tabindex="-1"><a class="header-anchor" href="#态度划分" aria-hidden="true">#</a> 态度划分</h3><h4 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁" aria-hidden="true">#</a> 悲观锁</h4><p><strong>Pessimistic Locking 悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人就会<code>阻塞</code></strong>。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。</p><p><code>select .... for update</code>是MySQL中悲观锁。</p><p>注意：<strong><code>select ... for update 语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住</code>。</strong></p><p>悲观锁不适用的场景较多，它存在一些不足，因为悲观锁大多数情况下依靠数据库的锁机制来实现，以保证程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是 <code>长事务</code> 而言，这样的 <code>开销往往无法承受</code> ，这时就需要乐观锁。</p><h4 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁" aria-hidden="true">#</a> 乐观锁</h4><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是<strong>不采用数据库自身的锁机制，而是通过程序来实现</strong>。在程序上，可以采用<code>版本号机制</code>或者<code>CAS机制</code>实现。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。</p><p>版本号机制</p><p>在表中设计一个<code>版本字段 version</code>，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行<code>UPDATE ... SET version=version+1 WHERE version=version</code>。此时如果已经有事务对这条数据进行了更改，修改就不会成功。</p><p>时间戳机制</p><p>时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行比较，如果两者一致则更新成功，否则就是版本冲突。</p><p>总结：乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或者时间戳），从而证明当前拿到的数据是否最新。</p><ol><li><code>乐观锁</code>适合<code>读操作多</code>的场景，相对来说写的操作比较少。它的优点在于<code>程序实现</code>，<code>不存在死锁</code>问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。</li><li><code>悲观锁</code>适合<code>写操作多</code>的场景，因为写的操作具有<code>排它性</code>。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止<code>读 - 写</code>和<code>写 - 写</code>的冲突。</li></ol><h3 id="加锁方式划分" tabindex="-1"><a class="header-anchor" href="#加锁方式划分" aria-hidden="true">#</a> 加锁方式划分</h3><h4 id="隐式锁" tabindex="-1"><a class="header-anchor" href="#隐式锁" aria-hidden="true">#</a> 隐式锁</h4><p>一个事务对新插入的记录可以不显示的加锁（生成一个锁结构），但是由于<code>事务id</code>的存在，相当于加了一个<code>隐式锁</code>。别的事务在对这条记录加<code>S锁</code>或者<code>X锁</code>时，由于<code>隐式锁</code>的存在，会先帮助当前事务生成一个锁结构，然后自己再生成一个锁结构后进入等待状态。隐式锁是一种<code>延迟加锁</code>的机制，从而来减少加锁的数量。</p><p>隐式锁在实际内存对象中并不含有这个锁信息。只有当产生锁等待时，隐式锁转化为显式锁。</p><h4 id="显式锁" tabindex="-1"><a class="header-anchor" href="#显式锁" aria-hidden="true">#</a> 显式锁</h4><p>通过特定的语句进行加锁，我们一般称之为显示加锁。例如：</p><p>显示加共享锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span> <span class="token comment">// select ... for share</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示加排它锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">for</span> <span class="token keyword">update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h3><p>全局锁就是对<code>整个数据库实例</code>加锁。当需要让整个库处于<code>只读状态</code>的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。全局锁的典型使用<code>场景</code>是：做<code>全库逻辑备份</code>。</p><p>全局锁的命令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>Flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h3><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。</p><p>如何处理：</p><p>1、等待，直到超时</p><p>即当两个事务互相等待时，当一个事务等待时间超过设置的阈值时，就将其 <code>回滚</code>，另外事务继续进行。这种方法简单有效，在innodb中，参数<code>innodb_lock_wait_timeout</code> 用来设置超时时间。默认为50秒。</p><p>2、使用死锁检测进行死锁恢复</p><p>方式1检测死锁太过被动，innodb还提供了 <code>wait-for graph</code> 算法来主动进行死锁检测，每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。</p><p>这是一种较为 <code>主动的死锁检测机制</code> ，要求数据库保存 <code>锁的信息链表</code> 和 <code>事务等待链表</code> 两部分信息，基于这两个信息可以得到一个等待图。检测这个等待图里有没有环，即可知道有没有死锁。</p><p>一旦检测到回路，这时候Innodb存储引擎就会选择<code>回滚undo量最小</code>的事务，让其他事务继续执行。</p><p>缺点：每个新来的被阻塞的线程，都需要判断是不是自己的加入导致了死锁，太消耗资源了。通过关闭死锁检测或者控制并发量可以缓解这个问题。</p><h2 id="锁内存结构" tabindex="-1"><a class="header-anchor" href="#锁内存结构" aria-hidden="true">#</a> 锁内存结构</h2><img src="`+k+`" alt="image-20220609101659281" style="zoom:50%;"><p>懒得写了，反正也记不住。</p><h2 id="锁监控" tabindex="-1"><a class="header-anchor" href="#锁监控" aria-hidden="true">#</a> 锁监控</h2><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show status like &#39;innodb_row_lock%&#39;;
+-------------------------------+-------+
| Variable_name                 | Value |
+-------------------------------+-------+
| Innodb_row_lock_current_waits | 0     |
| Innodb_row_lock_time          | 62970 |
| Innodb_row_lock_time_avg      | 12594 |
| Innodb_row_lock_time_max      | 50137 |
| Innodb_row_lock_waits         | 5     |
+-------------------------------+-------+
5 rows in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</li><li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度；（等待总时长）</li><li><code>Innodb_row_lock_time_avg</code>：每次等待所花平均时间；（等待平均时长）</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最长的一次所花的时间；</li><li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数；（等待总次数）</li></ul><p>（1）查询正在被锁阻塞的sql语句。</p><p><code>SELECT * FROM information_schema.INNODB_TRX\\G</code></p><p>（2）查询锁等待情况</p><p><code>SELECT * FROM performance_schema.data_locks.data_lock_waits\\G</code></p><p>（3）查询锁的情况</p><p><code>SELECT * from performance_schema.data_locks\\G</code></p>`,170),E=[m];function g(_,T){return o(),c("div",null,E)}const L=e(h,[["render",g],["__file","progress_section_4.html.vue"]]);export{L as default};
