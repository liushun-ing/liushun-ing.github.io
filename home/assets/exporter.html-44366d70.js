import{_ as t,r as o,o as p,c as l,b as n,d as s,e as r,a}from"./app-0a114cce.js";const i="/home/assets/cadvisor-5f00c888.png",c="/home/assets/metrics-61dd91cb.png",u="/home/assets/cadviserprometueus-e16c6644.png",d="/home/assets/cpu1-d14a28c0.png",m="/home/assets/mysql-5cadb97e.png",v="/home/assets/question-3eb615a8.png",k="/home/assets/uestionpromethues-1314fdde.png",b="/home/assets/commandssss-00e4c757.png",_="/home/assets/sumratwrite-23b22ed6.png",h="/home/assets/macconnections-69c8e4b3.png",g="/home/assets/threadconnect-8ff648e7.png",x="/home/assets/bufferpages-997d047c.png",y="/home/assets/cacheexporter-e54706b9.png",q="/home/assets/buffereader-3d096acb.png",f="/home/assets/buffereadexporter-e77ed948.png",T="/home/assets/poolreads-325676c7.png",P="/home/assets/fferrate-0f148c6a.png",E="/home/assets/longtime-2cb1db25.png",S="/home/assets/longtimequery-66f0312b.png",L="/home/assets/blackbox-05e5658a.png",H="/home/assets/relabel-b6ac118f.png",C={},w=a(`<h1 id="exporter" tabindex="-1"><a class="header-anchor" href="#exporter" aria-hidden="true">#</a> Exporter</h1><p>为了采集主机的监控样本数据，安装了一个Node Exporter程序，该程序对外暴露了一个用于获取当前监控样本数据的HTTP访问地址。这样的一个程序称为Exporter，Exporter的实例称为一个Target。Prometheus通过轮询的方式定时从这些Target中获取监控数据样本，并且存储在数据库当中。</p><h2 id="exporter是啥" tabindex="-1"><a class="header-anchor" href="#exporter是啥" aria-hidden="true">#</a> exporter是啥</h2><h3 id="exporter来源" tabindex="-1"><a class="header-anchor" href="#exporter来源" aria-hidden="true">#</a> exporter来源</h3><p>从Exporter的来源上来讲，主要分为两类：</p><ul><li>社区提供的</li></ul><p>Prometheus社区提供了丰富的Exporter实现，涵盖了从基础设施，中间件以及网络等各个方面的监控功能。这些Exporter可以实现大部分通用的监控需求。下表列举一些社区中常用的Exporter：</p><table><thead><tr><th>范围</th><th>常用Exporter</th></tr></thead><tbody><tr><td>数据库</td><td>MySQL Exporter, Redis Exporter, MongoDB Exporter, MSSQL Exporter等</td></tr><tr><td>硬件</td><td>Apcupsd Exporter，IoT Edison Exporter， IPMI Exporter, Node Exporter等</td></tr><tr><td>消息队列</td><td>Beanstalkd Exporter, Kafka Exporter, NSQ Exporter, RabbitMQ Exporter等</td></tr><tr><td>存储</td><td>Ceph Exporter, Gluster Exporter, HDFS Exporter, ScaleIO Exporter等</td></tr><tr><td>HTTP服务</td><td>Apache Exporter, HAProxy Exporter, Nginx Exporter等</td></tr><tr><td>API服务</td><td>AWS ECS Exporter， Docker Cloud Exporter, Docker Hub Exporter, GitHub Exporter等</td></tr><tr><td>日志</td><td>Fluentd Exporter, Grok Exporter等</td></tr><tr><td>监控系统</td><td>Collectd Exporter, Graphite Exporter, InfluxDB Exporter, Nagios Exporter, SNMP Exporter等</td></tr><tr><td>其它</td><td>Blockbox Exporter, JIRA Exporter, Jenkins Exporter， Confluence Exporter等</td></tr></tbody></table><ul><li>用户自定义的</li></ul><p>除了直接使用社区提供的Exporter程序以外，用户还可以基于Prometheus提供的Client Library创建自己的Exporter程序，目前Promthues社区官方提供了对以下编程语言的支持：Go、Java/Scala、Python、Ruby。同时还有第三方实现的如：Bash、C++、Common Lisp、Erlang,、Haskeel、Lua、Node.js、PHP、Rust等。</p><h3 id="exporter的运行方式" tabindex="-1"><a class="header-anchor" href="#exporter的运行方式" aria-hidden="true">#</a> Exporter的运行方式</h3><p>从Exporter的运行方式上来讲，又可以分为：</p><ul><li>独立使用的</li></ul><p>以已经使用过的Node Exporter为例，由于操作系统本身并不直接支持Prometheus，同时用户也无法通过直接从操作系统层面上提供对Prometheus的支持。因此，用户只能通过独立运行一个程序的方式，通过操作系统提供的相关接口，将系统的运行状态数据转换为可供Prometheus读取的监控数据。 除了Node Exporter以外，比如MySQL Exporter、Redis Exporter等都是通过这种方式实现的。 这些Exporter程序扮演了一个中间代理人的角色。</p><ul><li>集成到应用中的</li></ul><p>为了能够更好的监控系统的内部运行状态，有些开源项目如Kubernetes，ETCD等直接在代码中使用了Prometheus的Client Library，提供了对Prometheus的直接支持。这种方式打破的监控的界限，让应用程序可以直接将内部的运行状态暴露给Prometheus，适合于一些需要更多自定义监控指标需求的项目。</p><h3 id="exporter规范" tabindex="-1"><a class="header-anchor" href="#exporter规范" aria-hidden="true">#</a> Exporter规范</h3><p>所有的Exporter程序都需要按照Prometheus的规范，返回监控的样本数据。以Node Exporter为例，当访问/metrics地址时会返回以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HELP node_cpu Seconds the cpus spent in each mode.
# TYPE node_cpu counter
node_cpu{cpu=&quot;cpu0&quot;,mode=&quot;idle&quot;} 362812.7890625
# HELP node_load1 1m load average.
# TYPE node_load1 gauge
node_load1 3.0703125
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exporter返回的样本数据，主要由三个部分组成：<strong>样本的一般注释信息（HELP），样本的类型注释信息（TYPE）和样本</strong>。Prometheus会对Exporter响应的内容逐行解析：</p><p>如果当前行以# HELP开始，Prometheus将会按照以下规则对内容进行解析，得到当前的指标名称以及相应的说明信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP &lt;metrics_name&gt; &lt;doc_string&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果当前行以# TYPE开始，Prometheus会按照以下规则对内容进行解析，得到当前的指标名称以及指标类型:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># TYPE &lt;metrics_name&gt; &lt;metrics_type&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TYPE注释行必须出现在指标的第一个样本之前。如果没有明确的指标类型需要返回为untyped。 除了# 开头的所有行都会被视为是监控样本数据。 每一行样本需要满足以下格式规范:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>metric_name <span class="token punctuation">[</span>
  <span class="token string">&quot;{&quot;</span> label_name <span class="token string">&quot;=&quot;</span> <span class="token variable"><span class="token variable">\`</span>&quot;<span class="token variable">\`</span></span> label_value <span class="token variable"><span class="token variable">\`</span>&quot;<span class="token variable">\`</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;,&quot;</span> label_name <span class="token string">&quot;=&quot;</span> <span class="token variable"><span class="token variable">\`</span>&quot;<span class="token variable">\`</span></span> label_value <span class="token variable"><span class="token variable">\`</span>&quot;<span class="token variable">\`</span></span> <span class="token punctuation">}</span> <span class="token punctuation">[</span> <span class="token string">&quot;,&quot;</span> <span class="token punctuation">]</span> <span class="token string">&quot;}&quot;</span>
<span class="token punctuation">]</span> value <span class="token punctuation">[</span> timestamp <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中metric_name和label_name必须遵循PromQL的格式规范要求。value是一个float格式的数据，timestamp的类型为int64（从1970-01-01 00:00:00以来的毫秒数），timestamp为可选默认为当前时间。具有相同metric_name的样本必须按照一个组的形式排列，并且每一行必须是唯一的指标名称和标签键值对组合。</p><p>需要特别注意的是对于histogram和summary类型的样本。需要按照以下约定返回样本数据：</p><ul><li>类型为summary或者histogram的指标x，该指标所有样本的值的总和需要使用一个单独的x_sum指标表示。</li><li>类型为summary或者histogram的指标x，该指标所有样本的总数需要使用一个单独的x_count指标表示。</li><li>对于类型为summary的指标x，其不同分位数quantile所代表的样本，需要使用单独的x{quantile=&quot;y&quot;}表示。</li><li>对于类型histogram的指标x为了表示其样本的分布情况，每一个分布需要使用x_bucket{le=&quot;y&quot;}表示，其中y为当前分布的上位数。同时必须包含一个样本x_bucket{le=&quot;+Inf&quot;}，并且其样本值必须和x_count相同。</li><li>对于histogram和summary的样本，必须按照分位数quantile和分布le的值的递增顺序排序。</li></ul><p>以下是类型为histogram和summary的样本输出示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># A histogram, which has a pretty complex representation in the text format:</span>
<span class="token comment"># HELP http_request_duration_seconds A histogram of the request duration.</span>
<span class="token comment"># TYPE http_request_duration_seconds histogram</span>
http_request_duration_seconds_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;0.05&quot;</span><span class="token punctuation">}</span> <span class="token number">24054</span> <span class="token comment"># 表示小于等于0.05的有24054</span>
http_request_duration_seconds_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">}</span> <span class="token number">33444</span>
http_request_duration_seconds_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;0.2&quot;</span><span class="token punctuation">}</span> <span class="token number">100392</span>
http_request_duration_seconds_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;+Inf&quot;</span><span class="token punctuation">}</span> <span class="token number">144320</span>
http_request_duration_seconds_sum <span class="token number">53423</span>
http_request_duration_seconds_count <span class="token number">144320</span>

<span class="token comment"># Finally a summary, which has a complex representation, too:</span>
<span class="token comment"># HELP rpc_duration_seconds A summary of the RPC duration in seconds.</span>
<span class="token comment"># TYPE rpc_duration_seconds summary</span>
rpc_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.01&quot;</span><span class="token punctuation">}</span> <span class="token number">3102</span>
rpc_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.05&quot;</span><span class="token punctuation">}</span> <span class="token number">3272</span>
rpc_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.5&quot;</span><span class="token punctuation">}</span> <span class="token number">4773</span>
rpc_duration_seconds_sum <span class="token number">1</span>.7560473e+07
rpc_duration_seconds_count <span class="token number">2693</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于某些Prometheus还没有提供支持的编程语言，用户只需要按照以上规范返回响应的文本数据即可。</p><h3 id="指定样本格式的版本" tabindex="-1"><a class="header-anchor" href="#指定样本格式的版本" aria-hidden="true">#</a> 指定样本格式的版本</h3><p>在Exporter响应的HTTP头信息中，可以通过Content-Type指定特定的规范版本，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTTP/1.1 200 OK
Content-Encoding: gzip
Content-Length: 2906
Content-Type: text/plain; version=0.0.4
Date: Sat, 17 Mar 2018 08:47:06 GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其中version用于指定Text-based的格式版本，当没有指定版本的时候，默认使用最新格式规范的版本。同时HTTP响应头还需要指定压缩格式为gzip。</strong></p><h2 id="容器监控-cadvisor" tabindex="-1"><a class="header-anchor" href="#容器监控-cadvisor" aria-hidden="true">#</a> 容器监控：cAdvisor</h2><p>CAdvisor是Google开源的一款用于展示和分析容器运行状态的可视化工具。通过在主机上运行CAdvisor用户可以轻松的获取到当前主机上容器的运行统计信息，并以图表的形式向用户展示。</p><h3 id="运行启动" tabindex="-1"><a class="header-anchor" href="#运行启动" aria-hidden="true">#</a> 运行启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/:/rootfs:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/var/run:/var/run:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/sys:/sys:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/var/lib/docker/:/var/lib/docker:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/dev/disk/:/dev/disk:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--publish</span><span class="token operator">=</span><span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--detach</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span><span class="token operator">=</span>cadvisor <span class="token punctuation">\\</span>
  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/kmsg <span class="token punctuation">\\</span>
  gcr.io/cadvisor/cadvisor <span class="token comment"># 这个是最新的镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CAdvisor是一个简单易用的工具，相比于使用Docker命令行工具，用户不用再登录到服务器中即可以可视化图表的形式查看主机上所有容器的运行状态。可以从网页上看到一些当前正在运行的容器，如node_exporter, alertmanager, prometheus等</p><p><img src="`+i+'" alt="screenshot2024-08-07 20.13.32"></p><h3 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> 数据</h3><p>而在多主机的情况下，在所有节点上运行一个CAdvisor再通过各自的UI查看监控信息显然不太方便，同时CAdvisor默认只保存2分钟的监控数据。好消息是CAdvisor已经内置了对Prometheus的支持。访问localhost:8080/metrics即可获取到标准的Prometheus监控样本输出</p><p><img src="'+c+`" alt="screenshot2024-08-07 20.15.09"></p><p>下面表格中列举了一些CAdvisor中获取到的典型监控指标：</p><table><thead><tr><th>指标名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>container_cpu_load_average_10s</td><td>gauge</td><td>过去10秒容器CPU的平均负载</td></tr><tr><td>container_cpu_usage_seconds_total</td><td>counter</td><td>容器在每个CPU内核上的累积占用时间 (单位：秒)</td></tr><tr><td>container_cpu_system_seconds_total</td><td>counter</td><td>System CPU累积占用时间（单位：秒）</td></tr><tr><td>container_cpu_user_seconds_total</td><td>counter</td><td>User CPU累积占用时间（单位：秒）</td></tr><tr><td>container_fs_usage_bytes</td><td>gauge</td><td>容器中文件系统的使用量(单位：字节)</td></tr><tr><td>container_fs_limit_bytes</td><td>gauge</td><td>容器可以使用的文件系统总量(单位：字节)</td></tr><tr><td>container_fs_reads_bytes_total</td><td>counter</td><td>容器累积读取数据的总量(单位：字节)</td></tr><tr><td>container_fs_writes_bytes_total</td><td>counter</td><td>容器累积写入数据的总量(单位：字节)</td></tr><tr><td>container_memory_max_usage_bytes</td><td>gauge</td><td>容器的最大内存使用量（单位：字节）</td></tr><tr><td>container_memory_usage_bytes</td><td>gauge</td><td>容器当前的内存使用量（单位：字节</td></tr><tr><td>container_spec_memory_limit_bytes</td><td>gauge</td><td>容器的内存使用量限制</td></tr><tr><td>machine_memory_bytes</td><td>gauge</td><td>当前主机的内存总量</td></tr><tr><td>container_network_receive_bytes_total</td><td>counter</td><td>容器网络累积接收数据总量（单位：字节）</td></tr><tr><td>container_network_transmit_bytes_total</td><td>counter</td><td>容器网络累积传输数据总量（单位：字节）</td></tr></tbody></table><h3 id="与prometheus集成" tabindex="-1"><a class="header-anchor" href="#与prometheus集成" aria-hidden="true">#</a> 与Prometheus集成</h3><p>修改/etc/prometheus/prometheus.yml，将cAdvisor添加监控数据采集任务目标当中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> cadvisor
  <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> host.docker.internal<span class="token punctuation">:</span><span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启prometheus后，可以在Prometheus UI中查看到当前所有的Target状态：</p><p><img src="`+u+`" alt="screenshot2024-08-07 20.19.13"></p><p>下面这些查询的时间过滤为1m，这是因为默认的配置文件中设置的数据采集间隔为1m，这个是需要看配置文件的。</p><p>通过以下表达式计算容器的CPU使用率：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum without (cpu) (irate(container_cpu_usage_seconds_total{id!=&quot;&quot;}[1m]))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+d+`" alt="screenshot2024-08-07 20.26.18"></p><p>查询容器内存使用量（单位：字节）:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>container_memory_usage_bytes{id!=&quot;&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询容器网络接收量速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_network_receive_bytes_total{id!=&quot;&quot;}[1m])) without (interface)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询容器网络传输量速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_network_transmit_bytes_total{id!=&quot;&quot;}[1m])) without (interface)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询容器文件系统读取速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_fs_reads_bytes_total{id!=&quot;&quot;}[1m])) without (device)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询容器文件系统写入速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_fs_writes_bytes_total{id!=&quot;&quot;}[1m])) without (device)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mysqld-exporter" tabindex="-1"><a class="header-anchor" href="#mysqld-exporter" aria-hidden="true">#</a> mysqld-exporter</h2><h3 id="安装-启动" tabindex="-1"><a class="header-anchor" href="#安装-启动" aria-hidden="true">#</a> 安装&amp;启动</h3><p>需要一个账号对数据库进行查询，所以必须去监控的数据库中授权</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;mysqld_exporter&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;12345678&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> CLIENT<span class="token punctuation">,</span> PROCESS <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;mysqld_exporter&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> performance_schema<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;mysqld_exporter&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
<span class="token comment">-- 这里建议直接%吧，而不是localhost，因为promethues填localhsot报错，需要填ip，但是这里填localhost会mysql这边通不过</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写配置文件mysql.cnf（不要把注释写进去），需要把这个文件拷贝到容器中，也可以选择挂载的方式，我这里选择的拷贝</p><div class="language-cnf line-numbers-mode" data-ext="cnf"><pre class="language-cnf"><code>![screenshot2024-08-09 20.09.38](../../../../../../Library/Application%20Support/typora-user-images/screenshot2024-08-09%2020.09.38.png)[client]
host=10.1.9.85 // 由于我是本机跑的mysql，然后容器跑的exporter，这里填localhsot不行，必须指定ip，不然连不上mysql，我也不知道为啥
user=mysqld_exporter
password=12345678
// 然后访问数据库的时候就是这种形式访问的，&#39;mysqld_exporter&#39;@&#39;10.1.9.85&#39;，这也解释了为啥上面创建账户的时候直接指定%得了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先启动容器，因为没有容器无法完成拷贝，当然这个时候启动容器会报错的，会报错找不到配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9104</span>:9104 <span class="token parameter variable">--name</span><span class="token operator">=</span>mysqld-exporter prom/mysqld-exporter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将文件拷贝过去</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> <span class="token environment constant">$PWD</span>/Documents/docker/prometheus/mysql.cnf mysqld-exporter:/.my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后重启容器即可，即可访问啦</p><p>然后修改prometheus配置文件，</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> mysqld
  <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> 10.1.9.85<span class="token punctuation">:</span><span class="token number">9104</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启，即可看到监控了</p><p><img src="`+m+'" alt="screenshot2024-08-09 19.31.56"></p><p>为了确保数据库的稳定运行，通常会关注一下四个与性能和资源利用率相关的指标：查询吞吐量、连接情况、缓冲池使用情况以及查询执行性能等。</p><h3 id="监控数据库吞吐量" tabindex="-1"><a class="header-anchor" href="#监控数据库吞吐量" aria-hidden="true">#</a> 监控数据库吞吐量</h3><p>对于数据库而言，最重要的工作就是实现对数据的增、删、改、查。为了衡量数据库服务器当前的吞吐量变化情况。在MySQL内部通过一个名为Questions的计数器，当客户端发送一个查询语句后，其值就会+1。可以通过以下MySQL指令查询Questions等服务器状态变量的值：</p><img src="'+v+'" alt="screenshot2024-08-09 19.43.47" style="zoom:50%;"><p>MySQLD Exporter中返回的样本数据中通过mysql_global_status_questions反映当前Questions计数器的大小：（这里应该是exporter本身也需要查询，所以这个数字才会有差）</p><img src="'+k+`" alt="screenshot2024-08-09 20.09.38" style="zoom:50%;"><p>通过以下PromQL可以查看当前MySQL实例查询速率的变化情况，查询数量的突变往往暗示着可能发生了某些严重的问题，因此用于用户应该关注并且设置响应的告警规则，以及时获取该指标的变化情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rate(mysql_global_status_questions[2m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般还可以从监控读操作和写操作的执行情况进行判断。通过MySQL全局状态中的Com_select可以查询到当前服务器执行查询语句的总次数：相应的，也可以通过Com_insert、Com_update以及Com_delete的总量衡量当前服务器写操作的总次数。</p><p>从MySQLD Exporter的/metrics返回的监控样本中，可以通过global_status_commands_total获取当前实例各类指令执行的次数：</p><img src="`+b+`" alt="screenshot2024-08-09 20.16.46" style="zoom:50%;"><p>用户可以通过以下PromQL查看当前MySQL实例写操作速率的变化情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(mysql_global_status_commands_total{command=~&quot;insert|update|delete&quot;}[2m])) without (command)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+_+'" alt="screenshot2024-08-09 20.19.05"></p><h3 id="连接情况" tabindex="-1"><a class="header-anchor" href="#连接情况" aria-hidden="true">#</a> 连接情况</h3><p>在MySQL中通过全局设置max_connections限制了当前服务器允许的最大客户端连接数量。一旦可用连接数被用尽，新的客户端连接都会被直接拒绝。 因此当监控MySQL运行状态时，需要时刻关注MySQL服务器的连接情况。用户可以通过以下指令查看当前MySQL服务的max_connections配置：</p><img src="'+h+'" alt="screenshot2024-08-09 20.19.36" style="zoom:50%;"><p>通过Global Status中的Threads_connected、Aborted_connects、Connection_errors_max_connections以及Threads_running可以查看当前MySQL实例的连接情况。通过以下指令可以直接当前MySQL实例的连接数：</p><img src="'+g+`" alt="screenshot2024-08-09 20.20.36" style="zoom:50%;"><p>当所有可用连接都被占用时，如果一个客户端尝试连接至MySQL，会出现“Too many connections(连接数过多)”错误，同时Connection_errors_max_connections的值也会增加。为了防止出现此类情况，你应该监控可用连接的数量，并确保其值保持在max_connections限制以内。同时如果Aborted_connects的数量不断增加时，说明客户端尝试连接到MySQL都失败了。此时可以通过Connection_errors_max_connections以及Connection_errors_internal分析连接失败的问题原因。</p><p>下面列举了与MySQL连接相关的监控指标：</p><ul><li>mysql_global_variables_max_connections： 允许的最大连接数；</li><li>mysql_global_status_threads_connected： 当前连接数；</li><li>mysql_global_status_threads_running：当前运行的连接；</li><li>mysql_global_status_aborted_connects：当前连接拒绝数；</li><li>mysql_global_status_connection_errors_total{error=&quot;max_connections&quot;}：由于超出最大连接数导致的错误；</li><li>mysql_global_status_connection_errors_total{error=&quot;internal&quot;}：由于系统内部导致的错误；</li></ul><p>通过PromQL查询当前剩余的可用连接数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql_global_variables_max_connections - mysql_global_status_threads_connected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用PromQL查询当前MySQL实例连接拒绝数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql_global_status_aborted_connects
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="监控缓冲池使用情况" tabindex="-1"><a class="header-anchor" href="#监控缓冲池使用情况" aria-hidden="true">#</a> 监控缓冲池使用情况</h3><p>MySQL默认的存储引擎InnoDB使用了一片称为缓冲池的内存区域，用于缓存数据表以及索引的数据。 当缓冲池的资源使用超出限制后，可能会导致数据库性能的下降，同时很多查询命令会直接在磁盘中执行，导致磁盘I/O不断攀升。 因此，应该关注MySQL缓冲池的资源使用情况，并且在合理的时间扩大缓冲池的大小可以优化数据库的性能。</p><p>Innodb_buffer_pool_pages_total反映了当前缓冲池中的内存页的总页数。可以通过以下指令查看：</p><img src="`+x+'" alt="screenshot2024-08-09 20.26.11" style="zoom:50%;"><p>MySQLD Exporter通过以下指标返回缓冲池中各类内存页的数量：</p><img src="'+y+'" alt="screenshot2024-08-09 20.26.46" style="zoom:67%;"><p>Innodb_buffer_pool_read_requests记录了正常从缓冲池读取数据的请求数量。可以通过以下指令查看：</p><img src="'+q+'" alt="screenshot2024-08-09 20.27.50" style="zoom:50%;"><p>MySQLD Exporter通过以下指标返回缓冲池中Innodb_buffer_pool_read_requests的值：</p><p><img src="'+f+'" alt="screenshot2024-08-09 20.28.28"></p><p>当缓冲池无法满足时，MySQL只能从磁盘中读取数据。Innodb_buffer_pool_reads即记录了从磁盘读取数据的请求数量。通常来说从内存中读取数据的速度要比从磁盘中读取快很多，因此，如果Innodb_buffer_pool_reads的值开始增加，可能意味着数据库的性能有问题。 查看Innodb_buffer_pool_reads的数量</p><img src="'+T+'" alt="screenshot2024-08-09 20.29.00" style="zoom:50%;"><p>通过以上监控指标，以及实际监控的场景，可以利用PromQL快速建立多个监控项。</p><p>通过以下PromQL可以得到各个MySQL实例的缓冲池利用率。一般来说还需要结合Innodb_buffer_pool_reads的增长率情况来结合判断缓冲池大小是否合理：</p><p><img src="'+P+`" alt="buffersie"></p><p>也可以通过以下PromQL计算2分钟内磁盘读取请求次数的增长率的变化情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rate(mysql_global_status_innodb_buffer_pool_reads[2m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询性能" tabindex="-1"><a class="header-anchor" href="#查询性能" aria-hidden="true">#</a> 查询性能</h3><p>MySQL还提供了一个Slow_queries的计数器，当查询的执行时间超过long_query_time的值后，计数器就会+1，其默认值为10秒，可以通过以下指令在MySQL中查询当前long_query_time的设置：</p><img src="`+E+'" alt="screenshot2024-08-09 20.31.47" style="zoom:50%;"><p>通过以下指令可以查看当前MySQL实例中Slow_queries的数量：</p><img src="'+S+`" alt="screenshot2024-08-09 20.32.22" style="zoom:50%;"><p>MySQLD Exporter返回的样本数据中，通过以下指标展示当前的Slow_queries的值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HELP mysql_global_status_slow_queries Generic metric from SHOW GLOBAL STATUS.
# TYPE mysql_global_status_slow_queries untyped
mysql_global_status_slow_queries 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过监控Slow_queries的增长率，可以反映出当前MySQL服务器的性能状态，可以通过以下PromQL查询Slow_queries的增长情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rate(mysql_global_status_slow_queries[2m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="网络探测-blackbox-exporter" tabindex="-1"><a class="header-anchor" href="#网络探测-blackbox-exporter" aria-hidden="true">#</a> 网络探测：Blackbox Exporter</h2><p>前几个小节主要介绍了Prometheus下如何进行白盒监控，监控主机的资源用量、容器的运行状态、数据库中间件的运行数据。 这些都是支持业务和服务的基础设施，通过白盒能够了解其内部的实际运行状态，通过对监控指标的观察能够预判可能出现的问题，从而对潜在的不确定因素进行优化。而从完整的监控逻辑的角度，除了大量的应用白盒监控以外，还应该添加适当的黑盒监控。黑盒监控即以用户的身份测试服务的外部可见性，常见的黑盒监控包括HTTP探针、TCP探针等用于检测站点或者服务的可访问性，以及访问效率等。</p><p>黑盒监控相较于白盒监控最大的不同在于黑盒监控是以故障为导向当故障发生时，黑盒监控能快速发现故障，而白盒监控则侧重于主动发现或者预测潜在的问题。一个完善的监控目标是要能够从白盒的角度发现潜在问题，能够在黑盒的角度快速发现已经发生的问题。</p><h3 id="使用blackbox-exporter" tabindex="-1"><a class="header-anchor" href="#使用blackbox-exporter" aria-hidden="true">#</a> 使用Blackbox Exporter</h3><p>Blackbox Exporter是Prometheus社区提供的官方黑盒监控解决方案，其允许用户通过：HTTP、HTTPS、DNS、TCP以及ICMP的方式对网络进行探测。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull quay.io/prometheus/blackbox-exporter
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">9115</span>:9115/tcp <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> blackbox-exporter quay.io/prometheus/blackbox-exporter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>容器一般都有默认的配置文件：<code>/etc/blackbox_exporter/config.yml</code>，如果需要更改，可以将本地文件拷贝到这个文件</p><p>运行Blackbox Exporter时，需要用户提供探针的配置信息，这些配置信息可能是一些自定义的HTTP头信息，也可能是探测时需要的一些TSL配置，也可能是探针本身的验证行为。在Blackbox Exporter每一个探针配置称为一个module，并且以YAML配置文件的形式提供给Blackbox Exporter。 每一个module主要包含以下配置内容，包括探针类型（prober）、验证访问超时时间（timeout）、以及当前探针的具体配置项：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 探针类型：http、 tcp、 dns、 icmp.</span>
<span class="token key atrule">prober</span><span class="token punctuation">:</span> &lt;prober_string<span class="token punctuation">&gt;</span>

<span class="token comment"># 超时时间</span>
<span class="token punctuation">[</span> <span class="token key atrule">timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>

<span class="token comment"># 探针的详细配置，最多只能配置其中的一个</span>
<span class="token punctuation">[</span> <span class="token key atrule">http</span><span class="token punctuation">:</span> &lt;http_probe<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span> <span class="token key atrule">tcp</span><span class="token punctuation">:</span> &lt;tcp_probe<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span> <span class="token key atrule">dns</span><span class="token punctuation">:</span> &lt;dns_probe<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span> <span class="token key atrule">icmp</span><span class="token punctuation">:</span> &lt;icmp_probe<span class="token punctuation">&gt;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个简化的探针配置文件blockbox.yml，包含两个HTTP探针配置项：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">modules</span><span class="token punctuation">:</span>
  <span class="token key atrule">http_2xx</span><span class="token punctuation">:</span>
    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">method</span><span class="token punctuation">:</span> GET
  <span class="token key atrule">http_post_2xx</span><span class="token punctuation">:</span>
    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">method</span><span class="token punctuation">:</span> POST
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过运行以下命令，进行配置文件覆盖，然后重启</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker cp $PWD/Documents/docker/prometheus/block.yml blackbox-exporter:/etc/blackbox_exporter/config.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动成功后，就可以通过访问http://127.0.0.1:9115/probe?module=http_2xx&amp;target=baidu.com对baidu.com进行探测。这里通过在URL中提供module参数指定了当前使用的探针，target参数指定探测目标，探针的探测结果通过Metrics的形式返回：</p><img src="`+L+'" alt="screenshot2024-08-10 10.24.14" style="zoom:50%;"><p>从返回的样本中，用户可以获取站点的DNS解析耗时、站点响应时间、HTTP响应状态码等等和站点访问质量相关的监控指标，从而帮助管理员主动的发现故障和问题。</p><h3 id="与prometheus集成-1" tabindex="-1"><a class="header-anchor" href="#与prometheus集成-1" aria-hidden="true">#</a> 与Prometheus集成</h3><p>接下来，只需要在Prometheus下配置对Blockbox Exporter实例的采集任务即可。最直观的配置方式：</p>',151),Q={href:"https://stackoverflow.com/questions/54397463/getting-error-get-http-localhost9443-metrics-dial-tcp-127-0-0-19443-conne",target:"_blank",rel:"noopener noreferrer"},M=a(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> baidu_http2xx_probe
  <span class="token key atrule">params</span><span class="token punctuation">:</span>
    <span class="token key atrule">module</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> http_2xx
    <span class="token key atrule">target</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> baidu.com
  <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe
  <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> host.docker.internal<span class="token punctuation">:</span><span class="token number">9115</span>
<span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> prometheus_http2xx_probe
  <span class="token key atrule">params</span><span class="token punctuation">:</span>
    <span class="token key atrule">module</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> http_2xx
    <span class="token key atrule">target</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> prometheus.io
  <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe
  <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> host.docker.internal<span class="token punctuation">:</span><span class="token number">9115</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里分别配置了名为baidu_http2x_probe和prometheus_http2xx_probe的采集任务，并且通过params指定使用的探针（module）以及探测目标（target）。</p><p>那问题就来了，假如我们有N个目标站点且都需要M种探测方式，那么Prometheus中将包含N * M个采集任务，从配置管理的角度来说显然是不可接受的。这里可以采用 Prometheus的Relabeling能力对这些配置进行简化，配置方式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;blackbox&#39;</span>
    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe
    <span class="token key atrule">params</span><span class="token punctuation">:</span>
      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>http_2xx<span class="token punctuation">]</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//prometheus.io    <span class="token comment"># Target to probe with http.</span>
        <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//prometheus.io   <span class="token comment"># Target to probe with https.</span>
        <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//10.1.9.85<span class="token punctuation">:</span><span class="token number">8080</span> 	<span class="token comment"># Target to probe with http on port 8080.</span>
    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>
        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target
      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>
        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance
      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__
        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> host.docker.internal<span class="token punctuation">:</span><span class="token number">9115</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里针对每一个探针服务（如http_2xx）定义一个采集任务，并且直接将任务的采集目标定义为需要探测的站点。在采集样本数据之前通过relabel_configs对采集任务进行动态设置。</p><ul><li>第1步，根据Target实例的地址，写入<code>__param_target</code>标签中。<code>__param_&lt;name&gt;</code>形式的标签表示，在采集任务时会在请求目标地址中添加<code>&lt;name&gt;</code>参数，等同于params的设置；</li><li>第2步，获取__param_target的值，并覆写到instance标签中；</li><li>第3步，覆写Target实例的<code>__address__</code>标签值为BlockBox Exporter实例的访问地址。</li></ul><p>通过以上3个relabel步骤，即可大大简化Prometheus任务配置的复杂度:</p><p>可以看到现在是一个job包含了三个断点，之前是有两个job，每个job各一个端点</p><p><img src="`+H+`" alt="screenshot2024-08-10 10.44.18"></p><h3 id="http探针" tabindex="-1"><a class="header-anchor" href="#http探针" aria-hidden="true">#</a> HTTP探针</h3><p>HTTP探针是进行黑盒监控时最常用的探针之一，通过HTTP探针能够网站或者HTTP服务建立有效的监控，包括其本身的可用性，以及用户体验相关的如响应时间等等。除了能够在服务出现异常的时候及时报警，还能帮助系统管理员分析和优化网站体验。</p><p>Blackbox Exporter中所有的探针均是以Module的信息进行配置。如下所示，配置了一个最简单的HTTP探针：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>modules:
  http_2xx_example:
    prober: http
    http:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过prober配置项指定探针类型。配置项http用于自定义探针的探测方式，这里有没对http配置项添加任何配置，表示完全使用HTTP探针的默认配置，该探针将使用HTTP GET的方式对目标服务进行探测，并且验证返回状态码是否为2XX，是则表示验证成功，否则失败。</p><h4 id="自定义http请求" tabindex="-1"><a class="header-anchor" href="#自定义http请求" aria-hidden="true">#</a> 自定义HTTP请求</h4><p>HTTP服务通常会以不同的形式对外展现，有些可能就是一些简单的网页，而有些则可能是一些基于REST的API服务。 对于不同类型的HTTP的探测需要管理员能够对HTTP探针的行为进行更多的自定义设置，包括：HTTP请求方法、HTTP头信息、请求参数等。对于某些启用了安全认证的服务还需要能够对HTTP探测设置相应的Auth支持。对于HTTPS类型的服务还需要能够对证书进行自定义设置。</p><p>如下所示，这里通过method定义了探测时使用的请求方法，对于一些需要请求参数的服务，还可以通过<strong>headers定义相关的请求头</strong>信息，使用<strong>body定义请求内容</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http_post_2xx</span><span class="token punctuation">:</span>
    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">method</span><span class="token punctuation">:</span> POST
      <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">Content-Type</span><span class="token punctuation">:</span> application/json
      <span class="token key atrule">body</span><span class="token punctuation">:</span> <span class="token string">&#39;{}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果HTTP服务启用了安全认证，Blackbox Exporter内置了对basic_auth的支持，可以直接设置相关的认证信息即可：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http_basic_auth_example</span><span class="token punctuation">:</span>
    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">method</span><span class="token punctuation">:</span> POST
      <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">Host</span><span class="token punctuation">:</span> <span class="token string">&quot;login.example.com&quot;</span>
      <span class="token key atrule">basic_auth</span><span class="token punctuation">:</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">&quot;username&quot;</span>
        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;mysecret&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于使用了Bear Token的服务也可以通过<strong>bearer_token配置项直接指定令牌字符串</strong>，或者通过bearer_token_file指定令牌文件。</p><p>对于一些启用了HTTPS的服务，但是需要自定义证书的服务，可以通过<strong>tls_config指定相关的证书信息</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> <span class="token key atrule">http_custom_ca_example</span><span class="token punctuation">:</span>
    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">method</span><span class="token punctuation">:</span> GET
      <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>
        <span class="token key atrule">ca_file</span><span class="token punctuation">:</span> <span class="token string">&quot;/certs/my_cert.crt&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义探针行为" tabindex="-1"><a class="header-anchor" href="#自定义探针行为" aria-hidden="true">#</a> 自定义探针行为</h4><p>在默认情况下HTTP探针只会对HTTP返回状态码进行校验，如果状态码为<strong>2XX（200 &lt;= StatusCode &lt; 300）则表示探测成功，并且探针返回的指标probe_success值为1。</strong></p><p>如果用户需要指定HTTP返回状态码，或者对HTTP版本有特殊要求，如下所示，可以使用<strong>valid_http_versions和valid_status_codes</strong>进行定义：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http_2xx_example</span><span class="token punctuation">:</span>
  <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
    <span class="token key atrule">valid_http_versions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;HTTP/1.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;HTTP/2&quot;</span><span class="token punctuation">]</span>
    <span class="token key atrule">valid_status_codes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，Blockbox返回的样本数据中也会包含指标probe_http_ssl，用于表明当前探针是否使用了SSL：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HELP probe_http_ssl Indicates if SSL was used for the final redirect
# TYPE probe_http_ssl gauge
probe_http_ssl 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果用户对于HTTP服务是否启用SSL有强制的标准。则可以使用fail_if_ssl和fail_if_not_ssl进行配置。fail_if_ssl为true时，表示如果站点启用了SSL则探针失败，反之成功。fail_if_not_ssl刚好相反。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http_2xx_example</span><span class="token punctuation">:</span>
  <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
    <span class="token key atrule">valid_status_codes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token key atrule">method</span><span class="token punctuation">:</span> GET
    <span class="token key atrule">no_follow_redirects</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">fail_if_ssl</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">fail_if_not_ssl</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了基于HTTP状态码，HTTP协议版本以及是否启用SSL作为控制探针探测行为成功与否的标准以外，还可以<strong>匹配HTTP服务的响应内容</strong>。使用<strong>fail_if_matches_regexp和fail_if_not_matches_regexp用户可以定义一组正则表达式，用于验证HTTP返回内容</strong>是否符合或者不符合正则表达式的内容。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http_2xx_example</span><span class="token punctuation">:</span>
  <span class="token key atrule">prober</span><span class="token punctuation">:</span> http
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
    <span class="token key atrule">method</span><span class="token punctuation">:</span> GET
    <span class="token key atrule">fail_if_matches_regexp</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;Could not connect to database&quot;</span>
    <span class="token key atrule">fail_if_not_matches_regexp</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;Download the latest version here&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后需要提醒的时，默认情况下HTTP探针会走IPV6的协议。 在大多数情况下，可以使用preferred_ip_protocol=ip4强制通过IPV4的方式进行探测。在Bloackbox响应的监控样本中，也会通过指标probe_ip_protocol，表明当前的协议使用情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6
# TYPE probe_ip_protocol gauge
probe_ip_protocol 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了支持对HTTP协议进行网络探测以外，Blackbox还支持对TCP、DNS、ICMP等其他网络协议。</p>`,36);function I(A,B){const e=o("ExternalLinkIcon");return p(),l("div",null,[w,n("p",null,[s("==这里出现了一个问题：填ip的话，blackbox exporter会连不上，填localhost的话，prometheus会报错，解决方法填host.docker.internal，之前的也都可以改过来："),n("a",Q,[s("可以看这里"),r(e)]),s("==")]),M])}const D=t(C,[["render",I],["__file","exporter.html.vue"]]);export{D as default};
