import{_ as e,r as o,o as c,c as i,b as s,d as n,e as p,a}from"./app-a45f47ce.js";const l="/home/assets/trie-d14dcf2e.png",u="/home/assets/root1-645fab38.png",r="/home/assets/root2-bd401e66.png",d="/home/assets/path2-89b5f2b7.png",k="/home/assets/path3-dd3bba13.png",v="/home/assets/path5-6b519d2a.png",m="/home/assets/chain-3adfc968.png",b="/home/assets/structtree-07093cfa.png",g="/home/assets/bucket-60cd1afa.png",h={},f=a(`<h1 id="go-web" tabindex="-1"><a class="header-anchor" href="#go-web" aria-hidden="true">#</a> Go-Web</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>因为Go的<code>net/http</code>包提供了基础的路由函数组合与丰富的功能函数。所以在社区里流行一种用Go编写API不需要框架的观点，如果项目的路由在个位数、URI固定且不通过URI来传递参数，那么确实使用官方库也就足够。但在复杂场景下，官方的http库还是有些力有不逮。例如下面这样的路由：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET   /card/:id
POST  /card/:id
DELTE /card/:id
GET   /card/:id/name
...
GET   /card/:id/relations
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见是否使用框架还是要具体问题具体分析的。</p><p>Go的Web框架大致可以分为这么两类：</p><ol><li>Router框架</li><li>MVC类框架</li></ol><p>在框架的选择上，大多数情况下都是依照个人的喜好和公司的技术栈。例如公司有很多技术人员是PHP出身，那么他们一定会非常喜欢像beego这样的框架，但如果公司有很多C程序员，那么他们的想法可能是越简单越好。比如很多大厂的C程序员甚至可能都会去用C语言去写很小的CGI程序，他们可能本身并没有什么意愿去学习MVC或者更复杂的Web框架，他们需要的只是一个非常简单的路由（甚至连路由都不需要，只需要一个基础的HTTP协议处理库来帮他省掉没什么意思的体力劳动）。</p><p>Go的<code>net/http</code>包提供的就是这样的基础功能，下面是一个简单的<code>http echo server</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">echo</span><span class="token punctuation">(</span>wr http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;echo error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    writeLen<span class="token punctuation">,</span> err <span class="token operator">:=</span> wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> writeLen <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;write len:&quot;</span><span class="token punctuation">,</span> writeLen<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> echo<span class="token punctuation">)</span>
    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果面临的情况比较复杂，例如几十个接口的企业级应用，直接用<code>net/http</code>库就显得不太合适了。</p><p>我们来看看开源社区中一个Kafka监控项目中的做法==实际上，新版的实现已经改为使用 router 了 hhhhh==：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//Burrow: http_server.go</span>
<span class="token keyword">func</span> <span class="token function">NewHttpServer</span><span class="token punctuation">(</span>app <span class="token operator">*</span>ApplicationContext<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>HttpServer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    server<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> handleDefault<span class="token punctuation">)</span>

    server<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/burrow/admin&quot;</span><span class="token punctuation">,</span> handleAdmin<span class="token punctuation">)</span>

    server<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/v2/kafka&quot;</span><span class="token punctuation">,</span> appHandler<span class="token punctuation">{</span>server<span class="token punctuation">.</span>app<span class="token punctuation">,</span> handleClusterList<span class="token punctuation">}</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/v2/kafka/&quot;</span><span class="token punctuation">,</span> appHandler<span class="token punctuation">{</span>server<span class="token punctuation">.</span>app<span class="token punctuation">,</span> handleKafka<span class="token punctuation">}</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/v2/zookeeper&quot;</span><span class="token punctuation">,</span> appHandler<span class="token punctuation">{</span>server<span class="token punctuation">.</span>app<span class="token punctuation">,</span> handleClusterList<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 新版代码：</span>
<span class="token comment">// This is a healthcheck and readiness URLs. Please don&#39;t change it</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/burrow/admin&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleAdmin<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/burrow/admin/ready&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleReady<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span> <span class="token string">&quot;/metrics&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span><span class="token function">handlePrometheusMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// All valid paths go here.......</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleClusterList<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleClusterDetail<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/topic&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleTopicList<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/topic/:topic&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleTopicDetail<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/topic/:topic/consumers&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleTopicConsumerList<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/consumer&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleConsumerList<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/consumer/:consumer&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleConsumerDetail<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/consumer/:consumer/status&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleConsumerStatus<span class="token punctuation">)</span>
hc<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/v3/kafka/:cluster/consumer/:consumer/lag&quot;</span><span class="token punctuation">,</span> hc<span class="token punctuation">.</span>handleConsumerStatusComplete<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码来自大名鼎鼎的linkedin公司的Kafka监控项目Burrow，没有使用任何router框架，只使用了<code>net/http</code>。只看上面这段代码似乎非常优雅，项目里大概只有这五个简单的URI，所以提供的服务就是下面这个样子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">/</span>
<span class="token operator">/</span>burrow<span class="token operator">/</span>admin
<span class="token operator">/</span>v2<span class="token operator">/</span>kafka
<span class="token operator">/</span>v2<span class="token operator">/</span>kafka<span class="token operator">/</span>
<span class="token operator">/</span>v2<span class="token operator">/</span>zookeeper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果确实这么想的话就被骗了。再进<code>handleKafka()</code>这个函数一探究竟：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">handleKafka</span><span class="token punctuation">(</span>app <span class="token operator">*</span>ApplicationContext<span class="token punctuation">,</span> w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pathParts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> app<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Kafka<span class="token punctuation">[</span>pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">&quot;cluster not found&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Allow a trailing / on requests</span>
        <span class="token keyword">return</span> <span class="token function">handleClusterList</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">handleClusterDetail</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span> pathParts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;consumer&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">switch</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">switch</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token function">handleConsumerDrop</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">,</span> <span class="token string">&quot;request method not supported&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">switch</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token function">handleConsumerList</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment">// Consumer detail - list of consumer streams/hosts? Can be config info later</span>
                <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">&quot;unknown API call&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
            <span class="token keyword">case</span> pathParts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">switch</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token function">handleConsumerTopicList</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token function">handleConsumerTopicDetail</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token keyword">case</span> pathParts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token function">handleConsumerStatus</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token keyword">case</span> pathParts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;lag&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token function">handleConsumerStatus</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">,</span> <span class="token string">&quot;request method not supported&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">switch</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> r<span class="token punctuation">.</span>Method <span class="token operator">!=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">,</span> <span class="token string">&quot;request method not supported&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token function">handleBrokerTopicList</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pathParts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pathParts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token function">handleBrokerTopicDetail</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pathParts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;offsets&quot;</span><span class="token punctuation">:</span>
        <span class="token comment">// Reserving this endpoint to implement later</span>
        <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">&quot;unknown API call&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// If we fell through, return a 404</span>
    <span class="token keyword">return</span> <span class="token function">makeErrorResponse</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">&quot;unknown API call&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为默认的<code>net/http</code>包中的<code>mux</code>不支持带参数的路由，所以Burrow这个项目使用了非常蹩脚的字符串<code>Split</code>和乱七八糟的 <code>switch case</code>来达到自己的目的，但却让本来应该很集中的路由管理逻辑变得复杂，散落在系统的各处，难以维护和管理。而系统总是从这样微不足道的混乱开始积少成多，最终变得难以收拾。</p><p>根据经验，简单地来说，只要路由带有参数，并且这个项目的API数目超过了10，就尽量不要使用<code>net/http</code>中默认的路由。在Go开源界应用最广泛的router是httpRouter，很多开源的router框架都是基于httpRouter进行一定程度的改造的成果。</p><p>再来回顾一下开头说的，开源界有这么几种框架，第一种是对httpRouter进行简单的封装，然后提供定制的中间件和一些简单的小工具集成比如gin，主打轻量，易学，高性能。第二种是借鉴其它语言的编程风格的一些MVC类框架，例如beego，方便从其它语言迁移过来的程序员快速上手，快速开发。还有一些框架功能更为强大，除了数据库schema设计，大部分代码直接生成，例如goa。不管哪种框架，适合开发者背景的就是最好的。</p><h2 id="router-请求路由" tabindex="-1"><a class="header-anchor" href="#router-请求路由" aria-hidden="true">#</a> router 请求路由</h2><p>在常见的Web框架中，router是必备的组件。Go语言圈子里router也时常被称为<code>http</code>的multiplexer。通过对Burrow代码的简单学习，已经知道如何用<code>http</code>标准库中内置的mux来完成简单的路由功能了。</p><p>RESTful是几年前刮起的API设计风潮，在RESTful中除了GET和POST之外，还使用了HTTP协议定义的几种其它的标准化语义。具体包括：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    MethodGet     <span class="token operator">=</span> <span class="token string">&quot;GET&quot;</span>
    MethodHead    <span class="token operator">=</span> <span class="token string">&quot;HEAD&quot;</span>
    MethodPost    <span class="token operator">=</span> <span class="token string">&quot;POST&quot;</span>
    MethodPut     <span class="token operator">=</span> <span class="token string">&quot;PUT&quot;</span>
    MethodPatch   <span class="token operator">=</span> <span class="token string">&quot;PATCH&quot;</span> <span class="token comment">// RFC 5789</span>
    MethodDelete  <span class="token operator">=</span> <span class="token string">&quot;DELETE&quot;</span>
    MethodConnect <span class="token operator">=</span> <span class="token string">&quot;CONNECT&quot;</span>
    MethodOptions <span class="token operator">=</span> <span class="token string">&quot;OPTIONS&quot;</span>
    MethodTrace   <span class="token operator">=</span> <span class="token string">&quot;TRACE&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看看RESTful中常见的请求路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /repos/:owner/:repo/comments/:id/reactions

POST /projects/:project_id/columns

PUT /user/starred/:owner/:repo

DELETE /user/starred/:owner/:repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RESTful风格的API重度依赖请求路径。会将很多参数放在请求URI中。除此之外还会使用很多并不那么常见的HTTP状态码。</p><p>如果系统也想要这样的URI设计，使用标准库的<code>mux</code>显然就力不从心了。</p><h3 id="httprouter" tabindex="-1"><a class="header-anchor" href="#httprouter" aria-hidden="true">#</a> httprouter</h3><p>较流行的开源go Web框架大多使用httprouter，或是基于httprouter的变种对路由进行支持。前面提到的github的参数式路由在httprouter中都是可以支持的。</p><p>因为httprouter中使用的是显式匹配，所以在设计路由的时候需要规避一些会导致路由冲突的情况，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conflict:
GET /user/info/:name
GET /user/:id

no conflict:
GET /user/info/:name
POST /user/:id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来讲的话，如果两个路由拥有一致的http方法(指 GET/POST/PUT/DELETE)和请求路径前缀，且在某个位置出现了A路由是wildcard（指:id这种形式）参数，B路由则是普通字符串，那么就会发生路由冲突。路由冲突会在初始化阶段直接panic：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>panic: wildcard route <span class="token string">&#39;:id&#39;</span> conflicts with existing children <span class="token keyword">in</span> path <span class="token string">&#39;/user/:id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还有一点需要注意，因为httprouter考虑到字典树的深度，在初始化时会对参数的数量进行限制，所以在路由中的参数数目不能超过255，否则会导致httprouter无法识别后续的参数。不过这一点上也不用考虑太多，毕竟URI是人设计且给人来看的，相信没有长得夸张的URI能在一条路径中带有200个以上的参数。</p><p>除支持路径中的wildcard参数之外，httprouter还可以支持<code>*</code>号来进行通配，不过<code>*</code>号开头的参数只能放在路由的结尾，例如下面这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Pattern: /src/*filepath

 /src/                     filepath <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
 /src/somefile.go          filepath <span class="token operator">=</span> <span class="token string">&quot;somefile.go&quot;</span>
 /src/subdir/somefile.go   filepath <span class="token operator">=</span> <span class="token string">&quot;subdir/somefile.go&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种设计在RESTful中可能不太常见，主要是为了能够使用httprouter来做简单的HTTP静态文件服务器。</p><p>除了正常情况下的路由支持，httprouter也支持对一些特殊情况下的回调函数进行定制，例如404的时候：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>NotFound <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;oh no, not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者内部panic的时候：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span>PanicHandler <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> c <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Recovering from panic, Reason: %#v&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),w={href:"https://github.com/gin-gonic/gin",target:"_blank",rel:"noopener noreferrer"},q=a('<h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p><strong>httprouter和众多衍生router使用的数据结构被称为压缩字典树（Radix Tree）</strong>。</p><p>字典树常用来进行字符串检索，例如用给定的字符串序列建立字典树。对于目标字符串，只要从根节点开始深度优先搜索，即可判断出该字符串是否曾经出现过，时间复杂度为<code>O(n)</code>，n可以认为是目标字符串的长度。为什么要这样做？字符串本身不像数值类型可以进行数值比较，两个字符串对比的时间复杂度取决于字符串长度。如果不用字典树来完成上述功能，要对历史字符串进行排序，再利用二分查找之类的算法去搜索，时间复杂度只高不低。可认为字典树是一种空间换时间的典型做法。</p><p>普通的字典树有一个比较明显的缺点，就是每个字母都需要建立一个孩子节点，这样会导致字典树的层数比较深，<strong>压缩字典树相对好地平衡了字典树的优点和缺点</strong>。是典型的压缩字典树结构：</p><img src="'+l+`" alt="screenshot2024-07-25 10.29.36" style="zoom:33%;"><p>每个节点上不只存储一个字母了，这也是压缩字典树中“压缩”的主要含义。<strong>使用压缩字典树可以减少树的层数，同时因为每个节点上数据存储也比通常的字典树要多，所以程序的局部性较好（一个节点的path加载到cache即可进行多个字符的对比），从而对CPU缓存友好</strong>。</p><h3 id="压缩字典树创建过程" tabindex="-1"><a class="header-anchor" href="#压缩字典树创建过程" aria-hidden="true">#</a> 压缩字典树创建过程</h3><p>跟踪一下httprouter中，一个典型的压缩字典树的创建过程，路由设定如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PUT /user/installations/:installation_id/repositories/:repository_id

GET /marketplace_listing/plans/
GET /marketplace_listing/plans/:id/accounts
GET /search
GET /status
GET /support

补充路由：
GET /marketplace_listing/plans/ohyes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="root-节点创建" tabindex="-1"><a class="header-anchor" href="#root-节点创建" aria-hidden="true">#</a> root 节点创建</h4><p>httprouter的Router结构体中存储压缩字典树使用的是下述数据结构：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 略去了其它部分的 Router struct</span>
<span class="token keyword">type</span> Router <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    trees <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>node
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	static nodeType <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// default</span>
	root
	param
	catchAll
<span class="token punctuation">)</span>

<span class="token keyword">type</span> node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	path      <span class="token builtin">string</span>
	indices   <span class="token builtin">string</span>
	wildChild <span class="token builtin">bool</span>
	nType     nodeType
	priority  <span class="token builtin">uint32</span>
	children  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node
	handle    Handle
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>trees</code>中的<code>key</code>即为HTTP 1.1的RFC中定义的各种方法，具体有：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET
HEAD
OPTIONS
POST
PUT
PATCH
DELETE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>每一种方法对应的都是一棵独立的压缩字典树，这些树彼此之间不共享数据。具体到我们上面用到的路由，<code>PUT</code>和<code>GET</code>是两棵树而非一棵。</strong></p><p>简单来讲，某个方法第一次插入的路由就会导致对应字典树的根节点被创建，按顺序，先是一个<code>PUT</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">&quot;/user/installations/:installation_id/repositories/:reposit&quot;</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样<code>PUT</code>对应的根节点就会被创建出来。把这棵<code>PUT</code>的树画出来：</p><img src="`+u+`" alt="screenshot2024-07-25 10.44.30" style="zoom:50%;"><p>节点类型为<code>*httprouter.node</code>，为了说明方便，留下了目前关心的几个字段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>path: 当前节点对应的路径中的字符串

wildChild: 子节点是否为参数节点，即 wildcard node，或者说 :id 这种类型的节点

nType: 当前节点类型，有四个枚举值: 分别为 static/root/param/catchAll。
    static                   // 非根节点的普通字符串节点
    root                     // 根节点
    param                    // 参数节点，例如 :id
    catchAll                 // 通配符节点，例如 *anyway

indices：子节点索引，当子节点为非参数类型，即本节点的wildChild为false时，会将每个子节点的首字母放在该索引数组。说是数组，实际上是个string。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，<code>PUT</code>路由只有唯一的一条路径。</p><h4 id="子节点插入" tabindex="-1"><a class="header-anchor" href="#子节点插入" aria-hidden="true">#</a> 子节点插入</h4><p>当插入<code>GET /marketplace_listing/plans</code>时，类似前面PUT的过程，</p><img src="`+r+'" alt="screenshot2024-07-25 10.46.28" style="zoom:33%;"><p>因为第一个路由没有参数，path都被存储到根节点上了。所以只有一个节点。</p><p>然后插入<code>GET /marketplace_listing/plans/:id/accounts</code>，新的路径与之前的路径有共同的前缀，且可以直接在之前叶子节点后进行插入</p><img src="'+d+'" alt="screenshot2024-07-25 10.46.58" style="zoom:33%;"><p>由于<code>:id</code>这个节点只有一个字符串的普通子节点，所以indices还依然不需要处理。</p><p>上面这种情况比较简单，新的路由可以直接作为原路由的子节点进行插入。</p><h4 id="边分裂" tabindex="-1"><a class="header-anchor" href="#边分裂" aria-hidden="true">#</a> 边分裂</h4><p>接下来插入<code>GET /search</code>，这时会导致树的边分裂</p><img src="'+k+'" alt="screenshot2024-07-25 10.48.05" style="zoom:50%;"><p>原有路径和新的路径在初始的<code>/</code>位置发生分裂，这样需要把原有的root节点内容下移，再将新路由 <code>search</code>同样作为子节点挂在root节点之下。这时候因为子节点出现多个，root节点的indices提供子节点索引，这时候该字段就需要派上用场了。&quot;ms&quot;代表子节点的首字母分别为m（marketplace）和s（search）。</p><p>把<code>GET /status</code>和<code>GET /support</code>也插入到树中。这时候会导致在<code>search</code>节点上再次发生分裂</p><img src="'+v+`" alt="screenshot2024-07-25 10.48.56" style="zoom:50%;"><h4 id="子节点冲突处理" tabindex="-1"><a class="header-anchor" href="#子节点冲突处理" aria-hidden="true">#</a> 子节点冲突处理</h4><p>在路由本身只有字符串的情况下，不会发生任何冲突。只有当路由中含有wildcard（类似 :id）或者catchAll的情况下才可能冲突。</p><p>子节点的冲突处理很简单，分几种情况：</p><ol><li>在插入wildcard节点时，父节点的children数组非空且wildChild被设置为false。例如：<code>GET /user/getAll</code>和<code>GET /user/:id/getAddr</code>，或者<code>GET /user/*aaa</code>和<code>GET /user/:id</code>。</li><li>在插入wildcard节点时，父节点的children数组非空且wildChild被设置为true，但该父节点的wildcard子节点要插入的wildcard名字不一样。例如：<code>GET /user/:id/info</code>和<code>GET /user/:name/info</code>。</li><li>在插入catchAll节点时，父节点的children非空。例如：<code>GET /src/abc</code>和<code>GET /src/*filename</code>，或者<code>GET /src/:id</code>和<code>GET /src/*filename</code>。</li><li>在插入static节点时，父节点的wildChild字段被设置为true。</li><li>在插入static节点时，父节点的children非空，且子节点nType为catchAll。</li></ol><p><strong>只要发生冲突，都会在初始化的时候panic</strong>。例如，在插入路由<code>GET /marketplace_listing/plans/ohyes</code>时，出现第4种冲突情况：它的父节点<code>marketplace_listing/plans/</code>的wildChild字段为true。</p><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h2><p>对现在流行的Web框架中的中间件(middleware)技术原理进行分析，并介绍如何使用中间件技术将业务和非业务代码功能进行解耦。</p><h3 id="代码泥潭" tabindex="-1"><a class="header-anchor" href="#代码泥潭" aria-hidden="true">#</a> 代码泥潭</h3><p>先来看一段代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// middleware/hello.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>wr http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span>
    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个典型的Web服务，挂载了一个简单的路由。线上服务一般也是从这样简单的服务开始逐渐拓展开去的。</p><p>现在突然来了一个新的需求，想要统计之前写的hello服务的处理耗时，需求很简单，对上面的程序进行少量修改：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// middleware/hello_with_time_elapse.go</span>
<span class="token keyword">var</span> logger <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>wr http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    timeStart <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    timeElapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>timeStart<span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>timeElapsed<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样便可以在每次接收到http请求时，打印出当前请求所消耗的时间。</p><p>完成了这个需求之后，继续进行业务开发，提供的API逐渐增加，每一个handler里都有之前提到的记录运行时间的代码，每次增加新的路由我们也同样需要把这些看起来长得差不多的代码拷贝到需要的地方去。因为代码不太多，所以实施起来也没有遇到什么大问题。</p><p>渐渐的系统增加到了30个路由和<code>handler</code>函数，每次增加新的handler，第一件工作就是把之前写的所有和业务逻辑无关的周边代码先拷贝过来。</p><p>一旦有一天，需求发生变化，统计时间不能只是打印，需要上传服务器，或者有任何其它的非功能或统计需求，修改必然牵一发而动全身。只要增加一个非常简单的非业务统计，就需要去几十个handler里增加这些业务无关的代码。</p><h3 id="使用中间件剥离非业务逻辑" tabindex="-1"><a class="header-anchor" href="#使用中间件剥离非业务逻辑" aria-hidden="true">#</a> 使用中间件剥离非业务逻辑</h3><p><strong>犯的最大的错误，是把业务代码和非业务代码揉在了一起</strong>。对于大多数的场景来讲，非业务的需求都是在http请求处理前做一些事情，并且在响应完成之后做一些事情。有没有办法使用一些重构思路把这些公共的非业务功能代码剥离出去呢？回到刚开头的例子，需要给我们的<code>helloHandler()</code>增加超时时间统计，<strong>可以使用一种叫<code>function adapter</code>的方法来对<code>helloHandler()</code>进行包装</strong>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>wr http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">timeMiddleware</span><span class="token punctuation">(</span>next http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>
    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>wr http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeStart <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// next handler</span>
        next<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>wr<span class="token punctuation">,</span> r<span class="token punctuation">)</span>

        timeElapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>timeStart<span class="token punctuation">)</span>
        logger<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>timeElapsed<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token function">timeMiddleware</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就非常轻松地实现了业务与非业务之间的剥离，魔法就在于这个<code>timeMiddleware</code>。可以从代码中看到，的<code>timeMiddleware()</code>也是一个函数，其参数为<code>http.Handler</code>，<code>http.Handler</code>的定义在<code>net/http</code>包中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何方法实现了<code>ServeHTTP</code>，即是一个合法的<code>http.Handler</code>，先来梳理一下http库的<code>Handler</code>，<code>HandlerFunc</code>和<code>ServeHTTP</code>的关系：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要handler函数签名是：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么这个<code>handler</code>和<code>http.HandlerFunc()</code>就有了一致的函数签名，可以将该<code>handler()</code>函数进行类型转换，转为<code>http.HandlerFunc</code>。而<code>http.HandlerFunc</code>实现了<code>http.Handler</code>这个接口。在<code>http</code>库需要调用handler函数来处理http请求时，会调用<code>HandlerFunc()</code>的<code>ServeHTTP()</code>函数，可见一个请求的基本调用链是这样的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>h <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面提到的把自定义<code>handler</code>转换为<code>http.HandlerFunc()</code>这个过程是必须的，因为<code>handler</code>没有直接实现<code>ServeHTTP</code>这个接口。上面的代码中看到的HandleFunc(注意HandlerFunc和HandleFunc的区别)里也可以看到这个强制转换过程：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DefaultServeMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token function">HandlerFunc</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 源码也转了</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知道handler是怎么一回事，中间件通过包装handler，再返回一个新的handler就好理解了。</p><p>总结一下，中间件要做的事情就是通过一个或多个函数对handler进行包装，返回一个包括了各个中间件逻辑的函数链。把上面的包装再做得复杂一些：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>customizedHandler <span class="token operator">=</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token function">ratelimit</span><span class="token punctuation">(</span>helloHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数链在执行过程中的上下文可以用下图表示</p><img src="`+m+`" alt="screenshot2024-07-25 11.34.15" style="zoom:40%;"><p>再直白一些，这个流程在进行请求处理的时候就是不断地进行函数压栈再出栈，有一些类似于递归的执行流：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[exec of logger logic]           函数栈: []

[exec of timeout logic]          函数栈: [logger]

[exec of ratelimit logic]        函数栈: [timeout/logger]

[exec of helloHandler logic]     函数栈: [ratelimit/timeout/logger]

[exec of ratelimit logic part2]  函数栈: [timeout/logger]

[exec of timeout logic part2]    函数栈: [logger]

[exec of logger logic part2]     函数栈: []
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>功能实现了，但在上面的使用过程中也看到，这种函数套函数的用法不是很美观，同时也不具备什么可读性。</p><h3 id="更优雅的中间件写法" tabindex="-1"><a class="header-anchor" href="#更优雅的中间件写法" aria-hidden="true">#</a> 更优雅的中间件写法</h3><p>上一节中解决了业务功能代码和非业务功能代码的解耦，但也提到了，看起来并不美观，如果需要修改这些函数的顺序，或者增删中间件还是有点费劲，下面进行一些“写法”上的优化。</p><p>看一个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r <span class="token operator">=</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>
r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>ratelimit<span class="token punctuation">)</span>
r<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过多步设置，拥有了和上一节差不多的执行函数链。胜在直观易懂，如果要增加或者删除中间件，只要简单地增加删除对应的<code>Use()</code>调用就可以了。非常方便。</p><p>从框架的角度来讲，怎么实现这样的功能呢？也不复杂==太牛逼了==：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> middleware <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler

<span class="token keyword">type</span> Router <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    middlewareChain <span class="token punctuation">[</span><span class="token punctuation">]</span> middleware
    mux <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> http<span class="token punctuation">.</span>Handler
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Router<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Router<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>m middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r<span class="token punctuation">.</span>middlewareChain <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>middlewareChain<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>route <span class="token builtin">string</span><span class="token punctuation">,</span> h http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> mergedHandler <span class="token operator">=</span> h

    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>middlewareChain<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
        mergedHandler <span class="token operator">=</span> r<span class="token punctuation">.</span>middlewareChain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>mergedHandler<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    r<span class="token punctuation">.</span>mux<span class="token punctuation">[</span>route<span class="token punctuation">]</span> <span class="token operator">=</span> mergedHandler
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意代码中的<code>middleware</code>数组遍历顺序，和用户希望的调用顺序应该是&quot;相反&quot;的。</p><h2 id="请求校验-validator" tabindex="-1"><a class="header-anchor" href="#请求校验-validator" aria-hidden="true">#</a> 请求校验 Validator</h2><h3 id="重构请求校验函数" tabindex="-1"><a class="header-anchor" href="#重构请求校验函数" aria-hidden="true">#</a> 重构请求校验函数</h3><p>假设数据已经通过某个开源绑定库绑定到了具体的结构体上。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RegisterReq <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Username       <span class="token builtin">string</span>   <span class="token string">\`json:&quot;username&quot;\`</span>
    PasswordNew    <span class="token builtin">string</span>   <span class="token string">\`json:&quot;password_new&quot;\`</span>
    PasswordRepeat <span class="token builtin">string</span>   <span class="token string">\`json:&quot;password_repeat&quot;\`</span>
    Email          <span class="token builtin">string</span>   <span class="token string">\`json:&quot;email&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">register</span><span class="token punctuation">(</span>req RegisterReq<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Username<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>PasswordNew<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>PasswordRepeat<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> req<span class="token punctuation">.</span>PasswordNew <span class="token operator">==</span> req<span class="token punctuation">.</span>PasswordRepeat <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token function">emailFormatValid</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">nil</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;invalid email&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;password and reinput must be the same&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;password and password reinput must be longer than 0&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;length of username cannot be 0&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种代码一般怎么进行优化呢？</p>`,87),y={href:"https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html",target:"_blank",rel:"noopener noreferrer"},T=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">register</span><span class="token punctuation">(</span>req RegisterReq<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Username<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;length of username cannot be 0&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>PasswordNew<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>PasswordRepeat<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;password and password reinput must be longer than 0&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> req<span class="token punctuation">.</span>PasswordNew <span class="token operator">!=</span> req<span class="token punctuation">.</span>PasswordRepeat <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;password and reinput must be the same&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token function">emailFormatValid</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;invalid email&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码更清爽，看起来也不那么别扭了。这是比较通用的重构理念。虽然使用了重构方法使校验过程代码看起来优雅了，但还是得为每一个<code>http</code>请求都去写这么一套差不多的<code>validate()</code>函数，有没有更好的办法来帮助解除这项体力劳动？答案就是validator。</p><h3 id="用validator解放体力劳动" tabindex="-1"><a class="header-anchor" href="#用validator解放体力劳动" aria-hidden="true">#</a> 用validator解放体力劳动</h3><p>从设计的角度讲，一般会为每个请求都声明一个结构体。前文中提到的校验场景都可以通过validator完成工作。</p><p>这里我们引入一个新的validator库：</p><blockquote><p>https://github.com/go-playground/validator</p></blockquote><p>使用 <code>go get github.com/go-playground/validator/v10</code> 可以下载 validator 库。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/go-playground/validator/v10&quot;</span>

<span class="token keyword">type</span> RegisterReq <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字符串的 gt=0 表示长度必须 &gt; 0，gt = greater than</span>
    Username       <span class="token builtin">string</span>   <span class="token string">\`validate:&quot;gt=0&quot;\`</span>
    <span class="token comment">// 同上</span>
    PasswordNew    <span class="token builtin">string</span>   <span class="token string">\`validate:&quot;gt=0&quot;\`</span>
    <span class="token comment">// eqfield 跨字段相等校验</span>
    PasswordRepeat <span class="token builtin">string</span>   <span class="token string">\`validate:&quot;eqfield=PasswordNew&quot;\`</span>
    <span class="token comment">// 合法 email 格式校验</span>
    Email          <span class="token builtin">string</span>   <span class="token string">\`validate:&quot;email&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">validateFunc</span><span class="token punctuation">(</span>req RegisterReq<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1" aria-hidden="true">#</a> 原理</h3><p>从结构上来看，每一个结构体都可以看成是一棵树。假如有如下定义的结构体：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Nested <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Email <span class="token builtin">string</span> <span class="token string">\`validate:&quot;email&quot;\`</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Age    <span class="token builtin">int</span> <span class="token string">\`validate:&quot;eq=10&quot;\`</span>
    Nested Nested
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把这个结构体画成一棵树</p><img src="`+b+`" alt="screenshot2024-07-25 13.47.56" style="zoom:33%;"><p>从字段校验的需求来讲，无论采用深度优先搜索还是广度优先搜索来对这棵结构体树来进行遍历，都是可以的。</p><p>下面是递归的深度优先搜索方式的遍历示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;reflect&quot;</span>
    <span class="token string">&quot;regexp&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
    <span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Nested <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Email <span class="token builtin">string</span> <span class="token string">\`validate:&quot;email&quot;\`</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Age    <span class="token builtin">int</span> <span class="token string">\`validate:&quot;eq=10&quot;\`</span>
    Nested Nested
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">validateEmail</span><span class="token punctuation">(</span>input <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> pass<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>
        <span class="token string">\`^([\\w\\.\\_]{2,10})@(\\w{1,}).([a-z]{2,4})$\`</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span> pass <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">validate</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    validateResult <span class="token operator">:=</span> <span class="token boolean">true</span>
    errmsg <span class="token operator">:=</span> <span class="token string">&quot;success&quot;</span>
    vt <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    vv <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vv<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fieldVal <span class="token operator">:=</span> vv<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        tagContent <span class="token operator">:=</span> vt<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;validate&quot;</span><span class="token punctuation">)</span>
        k <span class="token operator">:=</span> fieldVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">switch</span> k <span class="token punctuation">{</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>
            val <span class="token operator">:=</span> fieldVal<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            tagValStr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>tagContent<span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span>
            tagVal<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>tagValStr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> val <span class="token operator">!=</span> tagVal <span class="token punctuation">{</span>
                errmsg <span class="token operator">=</span> <span class="token string">&quot;validate int failed, tag is: &quot;</span><span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>
                    tagVal<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
                validateResult <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
            val <span class="token operator">:=</span> fieldVal<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            tagValStr <span class="token operator">:=</span> tagContent
            <span class="token keyword">switch</span> tagValStr <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span>
                nestedResult <span class="token operator">:=</span> <span class="token function">validateEmail</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
                <span class="token keyword">if</span> nestedResult <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
                    errmsg <span class="token operator">=</span> <span class="token string">&quot;validate mail failed, field val is: &quot;</span><span class="token operator">+</span> val
                    validateResult <span class="token operator">=</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
            <span class="token comment">// 递归</span>
            valInter <span class="token operator">:=</span> fieldVal<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            nestedResult<span class="token punctuation">,</span> msg <span class="token operator">:=</span> <span class="token function">validate</span><span class="token punctuation">(</span>valInter<span class="token punctuation">)</span>
            <span class="token keyword">if</span> nestedResult <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
                validateResult <span class="token operator">=</span> <span class="token boolean">false</span>
                errmsg <span class="token operator">=</span> msg
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> validateResult<span class="token punctuation">,</span> errmsg
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> T<span class="token punctuation">{</span>Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> Nested<span class="token punctuation">:</span> Nested<span class="token punctuation">{</span>Email<span class="token punctuation">:</span> <span class="token string">&quot;abc@abc.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    validateResult<span class="token punctuation">,</span> errmsg <span class="token operator">:=</span> <span class="token function">validate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validateResult<span class="token punctuation">,</span> errmsg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里简单地对<code>eq=x</code>和<code>email</code>这两个tag进行了支持。</p><p>开源校验组件在功能上要远比这里复杂的多。<strong>但原理很简单，就是用反射对结构体进行树形遍历</strong>。这时候可能会产生一个问题，对结构体进行校验时大量使用了反射，而Go的反射在性能上不太出众，有时甚至会影响到程序的性能。这样的考虑确实有一些道理，但需要对结构体进行大量校验的场景往往出现在Web服务，这里并不一定是程序的性能瓶颈所在。</p><p>如果基于反射的校验真的成为了服务的性能瓶颈怎么办？现在也有一种思路可以避免反射：使用Go内置的Parser对源代码进行扫描，然后根据结构体的定义生成校验代码。</p><h2 id="服务流量限制" tabindex="-1"><a class="header-anchor" href="#服务流量限制" aria-hidden="true">#</a> 服务流量限制</h2><h3 id="流量限制手段" tabindex="-1"><a class="header-anchor" href="#流量限制手段" aria-hidden="true">#</a> 流量限制手段</h3><p>流量限制的手段有很多，最常见的：漏桶、令牌桶两种：</p><ol><li>漏桶是指有一个一直装满了水的桶，每过固定的一段时间即向外漏一滴水。如果接到了这滴水，那么就可以继续服务请求，如果没有接到，那么就需要等待下一滴水。</li><li>令牌桶则是指匀速向桶中添加令牌，服务请求时需要从桶中获取令牌，令牌的数目可以按照需要消耗的资源进行相应的调整。如果没有令牌，可以选择等待，或者放弃。</li></ol><p>这两种方法看起来很像，不过还是有区别的。漏桶流出的速率固定，而令牌桶只要在桶中有令牌，那就可以拿。也就是说令牌桶是允许一定程度的并发的，比如同一个时刻，有100个用户请求，只要令牌桶中有100个令牌，那么这100个请求全都会放过去。令牌桶在桶中没有令牌的情况下也会退化为漏桶模型。</p><img src="`+g+`" alt="screenshot2024-07-25 14.41.12" style="zoom:33%;"><p>实际应用中令牌桶应用较为广泛，开源界流行的限流器大多数都是基于令牌桶思想的。并且在此基础上进行了一定程度的扩充，比如<code>github.com/juju/ratelimit</code>提供了几种不同特色的令牌桶填充方式：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewBucket</span><span class="token punctuation">(</span>fillInterval time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> capacity <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Bucket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认的令牌桶，<code>fillInterval</code>指每过多长时间向桶里放一个令牌，<code>capacity</code>是桶的容量，超过桶容量的部分会被直接丢弃。桶初始是满的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewBucketWithQuantum</span><span class="token punctuation">(</span>fillInterval time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> quantum <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Bucket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和普通的<code>NewBucket()</code>的区别是，每次向桶中放令牌时，是放<code>quantum</code>个令牌，而不是一个令牌。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewBucketWithRate</span><span class="token punctuation">(</span>rate <span class="token builtin">float64</span><span class="token punctuation">,</span> capacity <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Bucket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个就有点特殊了，会按照提供的比例，每秒钟填充令牌数。例如<code>capacity</code>是100，而<code>rate</code>是0.1，那么每秒会填充10个令牌。</p><p>从桶中获取令牌也提供了几个API：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>tb <span class="token operator">*</span>Bucket<span class="token punctuation">)</span> <span class="token function">Take</span><span class="token punctuation">(</span>count <span class="token builtin">int64</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tb <span class="token operator">*</span>Bucket<span class="token punctuation">)</span> <span class="token function">TakeAvailable</span><span class="token punctuation">(</span>count <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tb <span class="token operator">*</span>Bucket<span class="token punctuation">)</span> <span class="token function">TakeMaxDuration</span><span class="token punctuation">(</span>count <span class="token builtin">int64</span><span class="token punctuation">,</span> maxWait time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>
    time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tb <span class="token operator">*</span>Bucket<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span>count <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tb <span class="token operator">*</span>Bucket<span class="token punctuation">)</span> <span class="token function">WaitMaxDuration</span><span class="token punctuation">(</span>count <span class="token builtin">int64</span><span class="token punctuation">,</span> maxWait time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于开源界更为有名的Google的Java工具库Guava中提供的ratelimiter，这个库不支持令牌桶预热，且无法修改初始的令牌容量，所以可能个别极端情况下的需求无法满足。但在明白令牌桶的基本原理之后，如果没办法满足需求，也可以很快对其进行修改并支持自己的业务场景。</p><h3 id="原理-2" tabindex="-1"><a class="header-anchor" href="#原理-2" aria-hidden="true">#</a> 原理</h3><p>从功能上来看，令牌桶模型就是对全局计数的加减法操作过程，但使用计数需要加读写锁。Go语言可以用buffered channel来完成简单的加令牌取令牌操作：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> tokenBucket <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每过一段时间向<code>tokenBucket</code>中添加<code>token</code>，如果<code>bucket</code>已经满了，那么直接放弃：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> fillInterval <span class="token operator">=</span> time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">10</span>
    <span class="token keyword">var</span> capacity <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">var</span> tokenBucket <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>

    fillToken <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>fillInterval<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">{</span>
            <span class="token keyword">select</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
                <span class="token keyword">select</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> tokenBucket <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
                <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token punctuation">}</span>
                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;current token cnt:&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>tokenBucket<span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">go</span> <span class="token function">fillToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看运行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>current token cnt: <span class="token number">98</span> <span class="token number">2024</span>-07-25 <span class="token number">14</span>:53:00.838811 +0800 CST <span class="token assign-left variable">m</span><span class="token operator">=</span>+0.981385292
current token cnt: <span class="token number">99</span> <span class="token number">2024</span>-07-25 <span class="token number">14</span>:53:00.848822 +0800 CST <span class="token assign-left variable">m</span><span class="token operator">=</span>+0.991396584
current token cnt: <span class="token number">100</span> <span class="token number">2024</span>-07-25 <span class="token number">14</span>:53:00.858807 +0800 CST <span class="token assign-left variable">m</span><span class="token operator">=</span>+1.001381376
current token cnt: <span class="token number">100</span> <span class="token number">2024</span>-07-25 <span class="token number">14</span>:53:00.868807 +0800 CST <span class="token assign-left variable">m</span><span class="token operator">=</span>+1.011381834
current token cnt: <span class="token number">100</span> <span class="token number">2024</span>-07-25 <span class="token number">14</span>:53:00.877826 +0800 CST <span class="token assign-left variable">m</span><span class="token operator">=</span>+1.020400084
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在1s钟的时候刚好填满100个，没有太大的偏差。不过这里可以看到，Go的定时器存在大约0.001s的误差，所以如果令牌桶大小在1000以上的填充可能会有一定的误差。对于一般的服务来说，这一点误差无关紧要。</p><p>上面的令牌桶的取令牌操作实现起来也比较简单：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TakeAvailable</span><span class="token punctuation">(</span>block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> takenResult <span class="token builtin">bool</span>
    <span class="token keyword">if</span> block <span class="token punctuation">{</span>
        <span class="token keyword">select</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>tokenBucket<span class="token punctuation">:</span>
            takenResult <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 非阻塞，如果当前 tokenBucket 没有数据，就会直接走 default</span>
        <span class="token keyword">select</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>tokenBucket<span class="token punctuation">:</span>
            takenResult <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            takenResult <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> takenResult
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些公司自己造的限流的轮子就是用上面这种方式来实现的，不过如果开源版 ratelimit 也如此的话，那也没什么可说的了。现实并不是这样的。</p><p>思考一下，令牌桶每隔一段固定的时间向桶中放令牌，如果记下上一次放令牌的时间为 t1，和当时的令牌数k1，放令牌的时间间隔为ti，每次向令牌桶中放x个令牌，令牌桶容量为cap。现在如果有人来调用<code>TakeAvailable</code>来取n个令牌，这个时刻记为t2。在t2时刻，令牌桶中理论上应该有多少令牌呢？伪代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>cur <span class="token operator">=</span> k1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token operator">/</span>ti<span class="token punctuation">)</span> <span class="token operator">*</span> x
cur <span class="token operator">=</span> cur <span class="token operator">&gt;</span> <span class="token builtin">cap</span> ? <span class="token builtin">cap</span> <span class="token punctuation">:</span> cur
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用两个时间点的时间差，再结合其它的参数，理论上在取令牌之前就完全可以知道桶里有多少令牌了。那劳心费力地向channel里填充token的操作，理论上是没有必要的。只要在每次<code>Take</code>的时候，再对令牌桶中的token数进行简单计算，就可以得到正确的令牌数。</p><p>在得到正确的令牌数之后，再进行实际的<code>Take</code>操作就好，这个<code>Take</code>操作只需要对令牌数进行简单的减法即可，记得加锁以保证并发安全。<code>github.com/juju/ratelimit</code>这个库就是这样做的。</p>`,50);function x(P,R){const t=o("ExternalLinkIcon");return c(),i("div",null,[f,s("p",null,[n("目前开源界最为流行（star数最多）的Web框架"),s("a",w,[n("gin"),p(t)]),n("使用的就是httprouter的变种。")]),q,s("p",null,[n("很简单，在《重构》一书中已经给出了方案："),s("a",y,[n("Guard Clauses"),p(t)]),n("。")]),T])}const H=e(h,[["render",x],["__file","goweb.html.vue"]]);export{H as default};
