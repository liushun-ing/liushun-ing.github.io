import{_ as t,r,o as p,c as l,b as n,d as s,e as a,a as o}from"./app-94ce788a.js";const i={},c=n("h1",{id:"json-rpc-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json-rpc-api","aria-hidden":"true"},"#"),s(" JSON-RPC API")],-1),u=n("h2",{id:"概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),s(" 概念")],-1),d=n("p",null,"为了让软件应用程序与以太坊区块链交互（通过读取区块链数据或向网络发送交易），它必须连接到以太坊节点。",-1),h={href:"https://github.com/ethereum/execution-apis",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.jsonrpc.org/specification",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"无状态的、轻量级远程过程调用 (RPC) 协议",-1),g={href:"https://github.com/ethereum/execution-apis",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"通俗解释：json-rpc 是基于 json 的跨语言远程调用协议，区块链中的 JSON-RPC API 其实就是基于 JSON-RPC 定义了一些 API 的规范，规定了一个实现需要提供哪些 API，这些 API 的名字，参数，返回值等等是什么。",-1),b=n("h2",{id:"其他应用程序接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他应用程序接口","aria-hidden":"true"},"#"),s(" 其他应用程序接口")],-1),_=n("strong",null,"执行客户端",-1),v=n("strong",null,"JSON-RPC 应用程序接口",-1),f={href:"https://ethereum.github.io/beacon-APIs/#/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/ethereum/execution-apis/blob/main/src/engine/common.md",target:"_blank",rel:"noopener noreferrer"},j=o('<h2 id="编码约定-十六进制" tabindex="-1"><a class="header-anchor" href="#编码约定-十六进制" aria-hidden="true">#</a> 编码约定（十六进制）</h2><p>两种关键数据类型通过 JSON 传递：未格式化的字节数组和数量。 两者都使用十六进制编码传递，但对格式化有不同的要求。</p><h3 id="数量" tabindex="-1"><a class="header-anchor" href="#数量" aria-hidden="true">#</a> 数量</h3><p>当对数量（整数、编号）进行编码时：编码为十六进制（以“0x”为前缀），最紧凑的表示方法（例外：0 应表示为“0x0”）。</p><p>以下是一些示例：</p><ul><li>0x41（十进制中是 65）</li><li>0x400（十进制中是 1024）</li><li>错误：0x（后面至少有一位，0 是“0x0”）</li><li>错误：0x0400（不允许有前导零）</li><li>错误：ff（必须有前缀 0x）</li></ul><h3 id="无格式数据" tabindex="-1"><a class="header-anchor" href="#无格式数据" aria-hidden="true">#</a> 无格式数据</h3><p>当对无格式数据（字节数组、帐户地址、哈希、字节码数组）进行编码时：编码为十六进制，以“0x”为前缀，每字节两个十六进制数字。</p><p>以下是一些示例：</p><ul><li>0x41（大小为 1，“A”）</li><li>0x004200（大小为 3，“\\0B\\0”）</li><li>0x（大小为 0，“”）</li><li>错误：0xf0f0f（位数必须是偶数）</li><li>错误：004200（必须以 0x 为前缀）</li></ul><h2 id="默认区块参数" tabindex="-1"><a class="header-anchor" href="#默认区块参数" aria-hidden="true">#</a> 默认区块参数</h2><p>以下方法有额外的默认区块参数：</p>',12),P={href:"https://ethereum.org/zh/developers/docs/apis/json-rpc/#eth_getbalance",target:"_blank",rel:"noopener noreferrer"},C={href:"https://ethereum.org/zh/developers/docs/apis/json-rpc/#eth_getcode",target:"_blank",rel:"noopener noreferrer"},S={href:"https://ethereum.org/zh/developers/docs/apis/json-rpc/#eth_gettransactioncount",target:"_blank",rel:"noopener noreferrer"},y={href:"https://ethereum.org/zh/developers/docs/apis/json-rpc/#eth_getstorageat",target:"_blank",rel:"noopener noreferrer"},J={href:"https://ethereum.org/zh/developers/docs/apis/json-rpc/#eth_call",target:"_blank",rel:"noopener noreferrer"},N=o('<p>当发出作用于以太坊状态的请求时，最后一个默认区块参数决定了区块的高度。</p><p>默认区块参数可以使用以下选项：</p><ul><li><code>HEX String</code> - 整数区块号</li><li><code>String &quot;earliest&quot;</code> - 表示最早/创世区块</li><li><code>String &quot;latest&quot;</code> - 最新挖出的区块</li><li><code>String &quot;safe&quot;</code> - 最新且安全的头部区块</li><li><code>String &quot;finalized&quot;</code> - 最新的最终确定的区块</li><li><code>String &quot;pending&quot;</code> - 未决状态/交易</li></ul><p>其他的 API 就不说明了，可以查看文档。</p><h2 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h2>',5),R={href:"https://curl.se/",target:"_blank",rel:"noopener noreferrer"},O=o(`<p>Curl 请求可能会返回与内容类型相关的错误消息。 这是因为 <code>--data</code> 选项将内容类型设置为 <code>application/x-www-form-urlencoded</code>。 如果节点确实抱怨此问题，请通过在调用开始时放置 <code>-H &quot;Content-Type: application/json&quot;</code> 来手动设置标头。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--data</span> <span class="token string">&#39;{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;web3_clientVersion&quot;,&quot;params&quot;:[],&quot;id&quot;:67}&#39;</span> <span class="token number">127.0</span>.0.1:8545
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>JsonRPC协议定义了一种简单的<strong>请求</strong>-<strong>响应</strong>模型，通信双方通过发送和接收JSON格式的消息进行交互。</p><h3 id="请求示例" tabindex="-1"><a class="header-anchor" href="#请求示例" aria-hidden="true">#</a> 请求示例</h3><p>一个JsonRPC请求由以下几个部分组成：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;methodName&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> ...<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>jsonrpc</code>：指定JsonRPC版本，通常为&quot;2.0&quot;。</li><li><code>method</code>：指定要调用的远程方法名。</li><li><code>params</code>：包含要传递给远程方法的参数列表。</li><li><code>id</code>：请求的唯一标识符，用于将请求和响应进行匹配。</li></ul><h3 id="响应示例" tabindex="-1"><a class="header-anchor" href="#响应示例" aria-hidden="true">#</a> 响应示例</h3><p>一个JsonRPC响应由以下几个部分组成：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> <span class="token string">&quot;resultValue&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;errorMessage&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>jsonrpc</code>：指定JsonRPC版本，通常为&quot;2.0&quot;。</li><li><code>result</code>：包含远程方法调用的结果值。</li><li><code>error</code>：包含错误信息，如果请求执行过程中发生错误。</li><li><code>id</code>：与请求中的标识符相匹配，用于将响应与请求进行匹配。</li></ul><h3 id="成功和失败响应示例" tabindex="-1"><a class="header-anchor" href="#成功和失败响应示例" aria-hidden="true">#</a> 成功和失败响应示例</h3><p>成功的JsonRPC响应示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败的JsonRPC响应示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">-32601</span><span class="token punctuation">,</span> <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Method not found&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数的数据类型" tabindex="-1"><a class="header-anchor" href="#参数的数据类型" aria-hidden="true">#</a> 参数的数据类型</h3><p>JsonRPC支持以下基本数据类型作为参数和结果值：</p><ul><li>字符串（String）</li><li>数字（Number）</li><li>布尔值（Boolean）</li><li>数组（Array）</li><li>对象（Object）</li><li>空值（Null）</li></ul><p>当参数或者返回结果中包含<strong>字节数组</strong>的时候需要注意，由于JSON是一种文本格式，所以在序列化和反序列化字节数组时，会将其转换为Base64编码的字符串。这种转换会增加数据存储的大小和处理时间。</p><p>因此，对于大型字节数组，传递原始二进制数据的方式可能会更高效，而不是通过 JSON 进行编码和解码。在这种情况下，其他二进制传输协议（如gRPC或自定义的二进制协议）可能更适合处理字节数组的传递。</p>`,21);function A(I,w){const e=r("ExternalLinkIcon");return p(),l("div",null,[c,u,d,n("p",null,[s("为此，每种以太坊客户端均实现了 "),n("a",h,[s("JSON-RPC 规范"),a(e)]),s("，因而应用程序可以依赖一组统一的方法，而与具体节点或客户端实现无关。")]),n("p",null,[n("a",k,[s("JSON-RPC"),a(e)]),s(" 是一种"),m,s("。 它定义了一些数据结构及其处理规则。 它与传输无关，因为这些概念可以在同一进程，通过接口、超文本传输协议或许多不同的消息传递环境中使用。 它使用 JSON (RFC 4627) 作为数据格式。")]),n("p",null,[s("执行客户端规范："),n("a",g,[s("网页"),a(e)])]),q,b,n("p",null,[s("本文章主要处理以太坊"),_,s("使用的 "),v,s("。 但是，共识客户端也有一个远程过程调用应用程序接口，允许用户直接从节点查询有关节点的信息、请求信标区块、信标状态和其他与共识相关的信息。 此应用程序接口记录在"),n("a",f,[s("信标应用程序接口网页"),a(e)]),s("上。")]),n("p",null,[s("内部应用程序接口还用于节点内的客户端间通信——也就是说，它使共识客户端和执行客户端能够交换数据。 这种内部应用程序接口称为“引擎应用程序接口”，其规范见 "),n("a",x,[s("GitHub"),a(e)]),s("。")]),j,n("ul",null,[n("li",null,[n("a",P,[s("eth_getBalance"),a(e)])]),n("li",null,[n("a",C,[s("eth_getCode"),a(e)])]),n("li",null,[n("a",S,[s("eth_getTransactionCount"),a(e)])]),n("li",null,[n("a",y,[s("eth_getStorageAt"),a(e)])]),n("li",null,[n("a",J,[s("eth_call"),a(e)])])]),N,n("p",null,[s("下面提供了通过向以太坊节点发出 "),n("a",R,[s("curl"),a(e)]),s(" 请求来使用 JSON_RPC 应用程序接口的示例。 每个示例都包括对特定端点、其参数、返回类型的描述，以及应该如何使用它的工作示例。")]),O])}const z=t(i,[["render",A],["__file","jsonrpc.html.vue"]]);export{z as default};
