import{_ as p,r as e,o,c,b as s,d as n,e as i,a}from"./app-de60e2dc.js";const u="/home/assets/cryptobase-ba35f6a7.png",l="/home/assets/hash-8ead2f69.png",r="/home/assets/secp256k1-406e4e64.png",k="/home/assets/sign1-aac1f446.png",d="/home/assets/sign2-9786056d.png",h="/home/assets/27_ethereum-tx-sign-flow-ea45615f.png",v={},m=a('<h1 id="区块链中的密码学" tabindex="-1"><a class="header-anchor" href="#区块链中的密码学" aria-hidden="true">#</a> 区块链中的密码学</h1><h2 id="基础架构" tabindex="-1"><a class="header-anchor" href="#基础架构" aria-hidden="true">#</a> 基础架构</h2><p><img src="'+u+'" alt="screenshot2024-07-19 09.55.02"></p><p><img src="'+l+'" alt="screenshot2024-07-19 10.06.08"></p><h2 id="秘钥和地址" tabindex="-1"><a class="header-anchor" href="#秘钥和地址" aria-hidden="true">#</a> 秘钥和地址</h2><p>以太坊有两种不同类型的账户：外部账户(EOAs)和合约CA。以太币的所有权是通过私钥，以太坊地址，和数字签名建立的。私钥是每个用户与以太坊交互的中心。事实上，账户地址直接来源于私钥：它唯一确定了一个以太坊地址，也叫账户。</p><h3 id="私钥" tabindex="-1"><a class="header-anchor" href="#私钥" aria-hidden="true">#</a> 私钥</h3><p>私钥只是一个随机选择的数字。私钥的所有权和控制权是用户控制相应以太坊地址所有资产的根本，此外，用户还可以访问授权该地址的合约。私钥用于在交易中进行签名，以证明所有权。</p><p>必须确保私钥，如果将它透露给第三方就等于交出了以太币和合约的控制权。并且，必须要备份，以免意外丢失。如果私钥遗失，是无法恢复的，它所保护的资产也就永远丢失了。</p><blockquote><p>从随机数生成私钥</p></blockquote><p>生成密钥的第一步，也是最重要的一步，就是找到一个安全的熵或者随机数的源。创建以太坊私钥涉及到要从1−2^256^中选择数字。以太坊软件使用底层操作系统的随机数生成器生成<strong>256位随机数</strong>。</p><p>私钥可以是任何非零的数字，可以大到只略小于2^256^的非常大的数——一个非常大的78位的数，大约1.158×10^77^。</p><blockquote><p>“2^256^——以太坊私钥空间的大小——是一个非常大的数字，十进制大约为10^77^”——Andreas Antonopoulo,《Mastering Ethereum: Building Smart Contracts and DApps》的作者</p></blockquote><p>注意，私钥生成是离线的；它与以太坊网络没有任何通信，也不需要。</p><p><em>不要自己编写代码来生成随机数或者用你的编程语言随机生成一个简单的随机数。</em></p><h3 id="公钥" tabindex="-1"><a class="header-anchor" href="#公钥" aria-hidden="true">#</a> 公钥</h3><p>以太坊公钥是椭圆曲线上的一个点，一个满足椭圆曲线等式的(x，y)坐标。</p><p>它由两个从私钥生成的数字组成，并且只能单向生成，这意味着，如果你有一个私钥，就可以计算出公钥，但是你不能从公钥计算出私钥。</p><p>公钥是私钥通过椭圆曲线乘法得来，是不可逆的：𝐾=𝑘×𝐺，这里的𝑘是私钥，𝐺是常数点(生成点)，𝐾是公钥。</p><blockquote><p>椭圆曲线乘法(×)与普通的乘法不同。它是一种单向函数:一个方向很容易计算出结果(乘法)，而反方向则是不可能的(除法)。</p></blockquote><blockquote><p>以太坊使用与比特币相同的椭圆曲线，secp256k1——Andreas Antonopoulo,《Mastering Ethereum: Building Smart Contracts and DApps》的作者</p></blockquote><p>看不懂椭圆曲线咋工作的。=_=</p><img src="'+r+'" alt="screenshot2024-07-19 10.14.21" style="zoom:50%;"><h3 id="以太坊地址格式" tabindex="-1"><a class="header-anchor" href="#以太坊地址格式" aria-hidden="true">#</a> 以太坊地址格式</h3><p>以太坊地址是一个十六进制数，用公钥的 Keccak-256 哈希的后20字节表示。其中，Keccak256运算得到的值为32位。</p><h3 id="ecdsa" tabindex="-1"><a class="header-anchor" href="#ecdsa" aria-hidden="true">#</a> ECDSA</h3><p>ECDSA（Elliptic Curve Digital Signature Algorithm）是一种从椭圆曲线密码学派生的数字签名算法，感觉就是基于椭圆曲线得到公私钥，然后使用该公私钥进行非对称加解密验证。</p><p>ECDSA处理过程： 1.参与数字签名的所有通信方都使用相同的全局参数，用于定义椭圆曲线以及曲线上的基点 2.签名者首先生成一对公私钥。对于私钥，选择一个随机数或者伪随机数作为私钥，利用随机数和基点算出另一点，作为公钥 3.对消息计算Hash值，用私钥、全局参数和Hash值生成签名 4.验证者用签名者的公钥、全局参数等验证。</p><h2 id="单向散列函数" tabindex="-1"><a class="header-anchor" href="#单向散列函数" aria-hidden="true">#</a> 单向散列函数</h2><p>Hash函数（单向散列）是密码学的一个重要分支，它是一种将任意长度的输入变换为固定长度的输出且不可逆的单项密码体制，Hash函数在数字签名和消息完整性检测等方面有着广泛的应用。</p><p>单向散列函数的特点：</p><ol><li>任意长度的输入数据，输出值是固定长度，相当于输入数据的指纹。</li><li>每一个特定的输入数据都对应到一个“唯一”的输出值。</li><li>从输出值（散列值）无法反推出输入值。</li><li>在给定时间和给定计算资源的条件下，以目前的技术水平，无法找到有同一个数据“指纹”的两条不同的数据。</li><li>输入数据改变 1 bit（位），输出结果也会产生巨大变化。</li></ol><p>常见的Hash函数有MD5、SHA1、SHA256。其中，MD5、SHA1都已被破解，有安全隐患。SHA256目前是安全的。</p><blockquote><p>Keccak256</p></blockquote><p>由于MD5、SHA系列的Hash函数遭受到了碰撞攻击，NIST(National Institute of Standards and Technology)在2005年10月31日到11月1日和2006年8月24日至25日举办了两次Hash函数研讨会，评估了Hash函数当前的使用状况，征求了公众对Hash函数的新规则。经过讨论之后，在2007年11月，NIST决定通过公开竞赛，以高级加密标准AES的开发过程为范例开发新的Hash函数。经过一系列竞赛，NIST在2012年评选出最终算法并产生了新的Hash标准。Keccak算法由于其较强的安全性和软硬件实现性能，最终被选为新一代的标准Hash算法，并被命名为SHA-3。</p><p>以太坊采用的是Keccak256，也就是 SHA-3 的前身。</p><ul><li>SHA256 属于MD4 家族，使用同一结构的压缩函数引擎，所以，攻击MD5和SHA1的方法可以被扩展，用来攻击SHA256。虽然目前还没有爆出SHA256 被攻击成功的案例，但如果下一代单向散列函数还基于同一原理，系统风险会大大增加。</li><li>Keccak 属于完全不同的框架（海绵函数引擎），可以分散被成功攻击的风险。Keccak256软件实现速度较慢， 但是对于硬件实现非常友好，基于硬件的算法实现数据处理速度很快。</li><li>NIST接受原始的Keccak256设计后，更改了Padding的格式， 以太坊坚持使用了原始的方案，因为这一更改存在争议，导致了正式的SHA3实现和原始的Keccak不兼容。</li></ul><h2 id="签名和校验" tabindex="-1"><a class="header-anchor" href="#签名和校验" aria-hidden="true">#</a> 签名和校验</h2><h3 id="以太坊和比特币的签名差异" tabindex="-1"><a class="header-anchor" href="#以太坊和比特币的签名差异" aria-hidden="true">#</a> 以太坊和比特币的签名差异</h3><p>虽然以太坊签名算法和比特币一样，都是 secp256k1 ，但是在签名的格式有所差异。</p>',40),b={href:"https://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 0x30 、0x02 是DER数据格式中定义的Tag，不同Tag对应不同含义。以 secp256k1 算法来说：</p><ul><li>total-length： 1字节，表示签名字节总长度，其值等于：4byte(Tag total-length 后面的四个Tag)+R的长度+S的长度。而secp256k1算法是256长度，即32字节。因此签名字节总长度为0x44(68=4+32+32)。</li><li>R-length： 1字节，表示R值长度。其值始终等于0x20(表示十进制32)。</li><li>R： 32字节，secp256k1 算法中的R值。</li><li>S-length: 1字节，表示S值长度。始终等于0x20。</li><li>S：32字节，secp256k1 算法中的S值。</li></ul><p>示例</p><p><img src="`+k+`" alt="screenshot2024-07-19 10.36.35"></p><p>对比比特币签名，以太坊的签名格式是<code>r+s+v</code>。 r 和 s 是ECDSA签名的原始输出，而末尾的一个字节为 recovery id 值，但在以太坊中用<code>V</code>表示，v 值为1或者0。recovery id 简称 recid，表示从内容和签名中成功恢复出公钥时需要查找的次数（因为根据<code>r</code>值在椭圆曲线中查找符合要求的坐标点可能有多个），但在比特币下最多需要查找两次。这样在签名校验恢复公钥时，不需要遍历查找，一次便可找准公钥，加速签名校验速度。</p><p>签名是针对32字节的byte，实际上是对应待签名内容的哈希值，以太坊中哈希值<code>common.Hash</code>长度固定为32。比如对交易签名时传入的是交易哈希<code>crypto.Sign(tx.Hash()[:], prv)</code>。注意是 tx.Hash()，不是整个数据。下面展示更清晰：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
hash <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">Keccak256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
hashedData <span class="token operator">:=</span> crypto<span class="token punctuation">.</span><span class="token function">Keccak256Hash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">Hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hashedData<span class="token punctuation">.</span><span class="token function">Hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8</span>
signature<span class="token punctuation">,</span> err <span class="token operator">:=</span> crypto<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以太坊签名格式是<code>[R] [S] [V]</code>，和比特币不同。因此需要进行调换，将 R 和 S 值放到前面，将 recid 放到最后。</p><p><img src="`+d+`" alt="screenshot2024-07-19 10.43.21"></p><blockquote><p>签名校验</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 删除 signature 的最后一个字节，因为它是ECDSA恢复ID，不能包含它</span>
signatureWithoutRecoverID <span class="token operator">:=</span> signature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">// The signature should have the 64 byte [R || S] format.</span>
<span class="token comment">// 这也就是为什么需要剃掉最后一个字节的原因，最后一个字节是 v，是 0 或者 1.</span>
isVerified <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">VerifySignature</span><span class="token punctuation">(</span>publicKeyBytes<span class="token punctuation">,</span> hash<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signatureWithoutRecoverID<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交易数据签名和校验" tabindex="-1"><a class="header-anchor" href="#交易数据签名和校验" aria-hidden="true">#</a> 交易数据签名和校验</h3><blockquote><p>==流程图，重要，记住签名的过程==</p><p>数据都需要经过 RLP 编码之后，才计算 hash，然后对 hash 签名。</p></blockquote><img src="`+h+`" alt="以太坊交易签名流程" style="zoom:50%;"><blockquote><p>签名过程</p></blockquote><p>首先调用types 的交易签名方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>signedTx<span class="token punctuation">,</span> err <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">SignTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">LatestSignerForChainID</span><span class="token punctuation">(</span>chainId<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span>

<span class="token comment">// SignTx signs the transaction using the given signer and private key.</span>
<span class="token keyword">func</span> <span class="token function">SignTx</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>Transaction<span class="token punctuation">,</span> s Signer<span class="token punctuation">,</span> prv <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span>
	sig<span class="token punctuation">,</span> err <span class="token operator">:=</span> crypto<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prv<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">WithSignature</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sig<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数内部，会调用 s.Hash(tx)对整个交易进行 RLP 编码，并计算 Keccak256hash 值。下面是 signer 的 EIP155 提案的一种hash实现</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Hash returns the hash to be signed by the sender.</span>
<span class="token comment">// It does not uniquely identify the transaction.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s EIP155Signer<span class="token punctuation">)</span> <span class="token function">Hash</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>Transaction<span class="token punctuation">)</span> common<span class="token punctuation">.</span>Hash <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">rlpHash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		tx<span class="token punctuation">.</span><span class="token function">GasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		tx<span class="token punctuation">.</span><span class="token function">Gas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		tx<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		tx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		tx<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		s<span class="token punctuation">.</span>chainId<span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后对这个 hash 值进行签名，得到 sig。得到 sig 后，需要解析出 r,s,v，并重新构造一个交易对象并返回。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token comment">// WithSignature returns a new transaction with the given signature.</span>
<span class="token comment">// This signature needs to be in the [R || S || V] format where V is 0 or 1.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>Transaction<span class="token punctuation">)</span> <span class="token function">WithSignature</span><span class="token punctuation">(</span>signer Signer<span class="token punctuation">,</span> sig <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> signer<span class="token punctuation">.</span><span class="token function">SignatureValues</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> sig<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%w: r: %s, s: %s, v: %s&quot;</span><span class="token punctuation">,</span> ErrInvalidSig<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	cpy <span class="token operator">:=</span> tx<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cpy<span class="token punctuation">.</span><span class="token function">setSignatureValues</span><span class="token punctuation">(</span>signer<span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Transaction<span class="token punctuation">{</span>inner<span class="token punctuation">:</span> cpy<span class="token punctuation">,</span> time<span class="token punctuation">:</span> tx<span class="token punctuation">.</span>time<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这里的 V 的计算不在是简单返回 0 或者 1 了，从前面的签名算法过程，可以知道 R 和 S 是ECDSA签名的原始输出，V 值是 recid，其值是0或者1。但是在交易签名时，EIP155 的实现中，V 值不再是recid, 而是 recid+ chainID*2+ 35。</p><blockquote><p>解析</p></blockquote><p>签名交易后，如何才能获得交易签名者呢？这个是加密算法的逆向解签名者，是利用用户签名内容以及签名信息(R、S、V)得到用户私钥的公钥，从而得到签名者账户地址。最终比对账户地址判断是否交易有效。</p>`,25);function f(x,S){const t=e("ExternalLinkIcon");return o(),c("div",null,[m,s("p",null,[n("比特币在BIP66中对签名数据格式采用严格的"),s("a",b,[n("DER"),i(t)]),n("编码格式，其签名数据格式如下：")]),g])}const H=p(v,[["render",f],["__file","crypto_base.html.vue"]]);export{H as default};
